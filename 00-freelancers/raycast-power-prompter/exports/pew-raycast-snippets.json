[
  {
    "name": "components-block",
    "text": "## \ud83c\udfd7\ufe0f Components\n> \ud83d\udca1 *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n",
    "keyword": "components-block;"
  }
,
  {
    "name": "suggested-approach-block",
    "text": "## \u270d\ufe0f Suggested Approach\n> \ud83d\udca1 *How should this be implemented?*\n\n[A high-level implementation plan presented as pseudo-code or a step-by-step guide. This should be based on existing project conventions and patterns, detailing class names, objects, and structures to guide the developer. It should be adaptable into actual code.]\n\n- [Plan Phase]\n  - [Details or pseudo-code as a step]\n  - [More details, steps or pseudo-code as needed]\n  - [...]\n\n- [More phases if needed]\n- [...]\n",
    "keyword": "suggested-approach-block;"
  }
,
  {
    "name": "properties-block",
    "text": "## \ud83d\udcdd Properties\n> \ud83d\udca1 *What identifies a component? What can be configured? What can change?*\n\n[The values and configurations that determine a components identity and possible states]\n\n- [Component]\n    - [Property]: [Description of the property]\n    - [More properties if needed]\n    - [...]\n        - [Sub-component]\n            - [Property]: [Description of the property]\n            - [More properties if needed]\n            - [...]\n\n- [More components if needed]\n\n- [...]\n",
    "keyword": "properties-block;"
  }
,
  {
    "name": "end-goal-block",
    "text": "## \ud83c\udfaf End Goal\n> \ud83d\udca1 *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n",
    "keyword": "end-goal-block;"
  }
,
  {
    "name": "initial-requirements-block",
    "text": "## \ud83d\udcdd Initial Requirements\n*What should the system/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n",
    "keyword": "initial-requirements-block;"
  }
,
  {
    "name": "states-block",
    "text": "## \ud83d\udea6 States\n> \ud83d\udca1 *What are the possible conditions or data a component can hold at any given time?*\n\n[A breakdown of a component's various states, categorized by where that state is stored or how it manifests.]\n\n- [Component]\n  - [State category e.g. UI, Memory, Local Device, Remote]\n    - [State]\n    - [More states as needed]\n    - [...]\n  - [More state categories as needed]\n  - [...]\n\n- [More components as needed]\n- [...]\n",
    "keyword": "states-block;"
  }
,
  {
    "name": "effort-breakdown-estimates-block",
    "text": "## \u23f1\ufe0f Effort Breakdown & Estimates\n> \ud83d\udca1 *How long will it take?*\n\n[The ideal and most likely outcome for design, refinement, front-end, back-end and operational work, where QA is calculated as 25% of core work, testing as 15% and and contingency buffer defaults to 10% of total work, but should be increased if there is a high risk of unforeseen problems along the way.]\n\n### Core Work Estimates\n\n| Work Type      | Hours       | Reasoning                                                                         |\n|:---------------|:------------|:----------------------------------------------------------------------------------|\n| **Design**     | [ X ]       | [ Explanation of design effort needed, or 0 if none ]                             |\n| **Refinement** | [ X ]       | [ Effort needed for planning, detailing requirements, and refining the approach ] |\n| **Front-end**  | [ X ]       | [ Front-end development tasks (UI implementation, state management, etc.) ]       |\n| **Backend**    | [ X ]       | [ Backend development tasks (API endpoints, database changes, logic, etc.) ]      |\n| **Operations** | [ X ]       | [ DevOps, deployment, configuration tasks ]                                       |\n| **Core Total** | **[ Sum ]** |                                                                                   |\n\n### QA, Testing & Delay Margin\n\n| Work Type        | Hours | Percentage | Reasoning                                                  |\n|:-----------------|:------|:-----------|:-----------------------------------------------------------|\n| **QA**           | [ X ] | **25%**    | [ 25% of core work total for quality assurance ]           |\n| **Testing**      | [ X ] | **15%**    | [ 15% of core work total for testing effort ]              |\n| **Delay Margin** | [ X ] | **10%+**   | [ 10% minimum, increase for high-risk/unknown complexity ] |\n\n### Total Estimate\n**Total Hours:** [ Grand Total ]\n",
    "keyword": "effort-breakdown-estimates-block;"
  }
,
  {
    "name": "user-stories-block",
    "text": "## \ud83d\udc64 User Stories\n> \ud83d\udca1 *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n  - I want [Desired Goal] so that [Benefit].\n  - [More user stories for this user type if needed]\n  - [...]\n\n- [More user types if needed]\n- [...]\n",
    "keyword": "user-stories-block;"
  }
,
  {
    "name": "essential-conditions-block",
    "text": "## \ud83d\udee1\ufe0f Essential Conditions\n> \ud83d\udca1 *What should always go right? What can never go wrong? What should always be? What should never be?*\n\n[A set of fundamental measurable conditions that must always be met. These serve as direct input for unit and end-to-end tests.]\n\n- [Parent Item]\n  - [Essential condition]\n  - [More essential conditions if needed]\n  - [...]\n\n- [More items if needed]\n- [...]\n",
    "keyword": "essential-conditions-block;"
  }
,
  {
    "name": "analytics-block",
    "text": "## \ud83d\udcca Analytics\n> \ud83d\udca1 *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n  - [Event]\n    - Id: [event_id]\n    - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n    - Properties:\n      - [Property Name]: [Data Type] - [Description of the property]\n      - [More properties as needed]\n      - [...]\n  - [More events as needed]\n  - [...]\n",
    "keyword": "analytics-block;"
  }
,
  {
    "name": "interactions-block",
    "text": "## \u26a1\ufe0f Interactions\n> \ud83d\udca1 *What triggers changes in a component, and how does data flow as a result?*\n\n[A mapping of interactions from actors, events, or parent components that affect a component, detailing the action, the resulting data flow, and any state changes it triggers.]\n\n- [Component]\n    - Interaction from [Actor: User | Event: System Notification | Parent: ContainerView]\n        - When [a specific action occurs, e.g., \"user taps the save button\"]\n            - Data Flow: [Description of what data is sent where, e.g., \"Form data is sent to the API client\"]\n            - Triggers State Change: [Description of the resulting state, e.g., \"Component's UI state becomes 'saving'\"]\n        - [More actions from this source]\n        - [...]\n    - [More interaction sources for this component]\n    - [...]\n\n- [More components]\n- [...]",
    "keyword": "interactions-block;"
  }
,
  {
    "name": "relevant-context-block",
    "text": "## \ud83d\udcda Relevant Context\n> \ud83d\udca1 *What background information is essential for understanding and completing this work?*\n\n[A curated list of all necessary files, documentation, and background information required to understand the scope and execute the work.]\n\n- [Parent Item]\n  - [Relevant file, url, or context] for [brief explanation of why it's important]: [link or reference]\n  - [More relevant files or context if needed]\n  - [...]\n",
    "keyword": "relevant-context-block;"
  }
,
  {
    "name": "checkpoints-block",
    "text": "## \ud83d\ude80 Checkpoints\n> \ud83d\udca1 *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n",
    "keyword": "checkpoints-block;"
  }
,
  {
    "name": "ui-ux-specifications-block",
    "text": "## \ud83c\udfa8 UI/UX Specifications\n> \ud83d\udca1 *How should something look, feel, and behave?*\n\n[Detailed visual and interactive specifications for components, especially where prototypes are insufficient. This includes notes on spacing, animations, and other nuanced UI/UX behaviors.]\n\n- [Parent Item]\n  - [UI/UX Behaviour]\n  - [More UI/UX Behaviours if needed]\n\n- [More items if needed]\n- [...]\n",
    "keyword": "ui-ux-specifications-block;"
  }
,
  {
    "name": "deliverables-block",
    "text": "## \ud83d\udce6 Deliverables\n> \ud83d\udca1 *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n",
    "keyword": "deliverables-block;"
  }
,
  {
    "name": "acceptance-criteria-block",
    "text": "## \u2705 Acceptance Criteria\n> \ud83d\udca1 *How do we confirm that an item is complete and correct?*\n\n[A list of specific, verifiable conditions that must be met for a requirement, component, or deliverable to be considered complete and accepted.]\n\n- [Parent Item]\n    - [Acceptance criterion]\n    - [More acceptance criteria if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n",
    "keyword": "acceptance-criteria-block;"
  }
,
  {
    "name": "behaviours-block",
    "text": "# \ud83d\udee0\ufe0f Behaviours\n> \ud83d\udca1 *Which states or events should the component act upon? How should it behave when nothing happens?*\n\n[How a component should act when a state is, or an event happens]\n\n- [Component]\n  - [State or event]\n      - Should [Behaviour]\n      - [More behaviours if needed]\n      - [...]\n  - [More states or events if needed]\n  - [...]\n    - [Sub-component]\n      - [More states or events if needed]\n      - [...]\n    - [More sub-components if needed]\n    - [...]\n\n- [More components if needed]\n- [...]\n",
    "keyword": "behaviours-block;"
  }
,
  {
    "name": "requirement-flows-block",
    "text": "## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n",
    "keyword": "requirement-flows-block;"
  }
,
  {
    "name": "security-rules-block",
    "text": "## \ud83d\udd12 Security Rules\n> \ud83d\udca1 *What are the access control rules for data and infrastructure?*\n\n[A definition of security rules, policies, and configurations for different parts of the system, such as database access, API permissions, or infrastructure settings.]\n\n- [Parent Item]\n  - [Rule or Policy]\n    - [Condition or rule, e.g., \"Allowed if auth.uid == userId\"].\n  - [More rules or policies as needed]\n  - [...]\n- [More parent items as needed]\n- [...]\n",
    "keyword": "security-rules-block;"
  }
,
  {
    "name": "title-block",
    "text": "# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> \ud83d\udca1 *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n",
    "keyword": "title-block;"
  }
,
  {
    "name": "ins-play-devils-advocate",
    "text": "- Always play devil\u2019s advocate.\n- Be sceptical and brutally honest in your approach.\n- Reviews your answers before answering and argue why it won\u2019t work.\n",
    "keyword": "ins-play-devils-advocate;"
  }
,
  {
    "name": "ins-no-workarounds",
    "text": "- Do not create workarounds, quick fixes or dirty hacks.\n- Focus on what was asked and make sure it's implemented as intended.\n",
    "keyword": "ins-no-workarounds;"
  }
,
  {
    "name": "ins-project-deep-research",
    "text": "- Think deep and make sure you understand 100% of the entire scope of what is being asked of you.\n- Based on that understanding research this project to understand exactly how to implement what I\u2019ve asked you.\n- Follow 100% of the project\u2019s already existing conventions and examples similar to my request.\n- Follow existing patterns and conventions exactly as they are in the project.\n- Stick to what\u2019s already been established.\n",
    "keyword": "ins-project-deep-research;"
  }
,
  {
    "name": "ins-parallel-execution",
    "text": "- Act as the orchestrator of multiple agents executing parallel tasks toward the main objective.\n- Begin by breaking down the main task into small, clearly scoped subtasks with single responsibilities.\n- Organize these subtasks into waves of parallel execution, ensuring each wave contains tasks that can run simultaneously without interference.\n- Assign subtasks to multiple agents in parallel, each focused on their own task while contributing to the shared goal.\n- Your core responsibility is to orchestrate the waves, review outputs, and confirm each subtask is completed exactly as required.\n- Direct agents with specific tasks, track their progress, and ensure they remain within scope while working efficiently toward the overall objective.\n- Adjust and create new subtasks when reviews or new insights reveal the need, while always keeping the main objective as the guiding point.\n- Always prevent interference between agents and maintain alignment with the overarching goal.\n",
    "keyword": "ins-parallel-execution;"
  }
,
  {
    "name": "ins-mvp-mindset",
    "text": "- Apply the MVP mindset: focus getting the must-haves that deliver the most value right now, avoid adding or describing anything unnecessary, and keep every step aligned strictly with the main goal. \n",
    "keyword": "ins-mvp-mindset;"
  }
,
  {
    "name": "flutter-ins-edge-functions-dtos",
    "text": "# Supabase Edge Functions and DTOs\n\nThis document explains how we handle Supabase Edge Functions and Data Transfer Objects (DTOs) in this project, ensuring type-safe communication between the Flutter app and backend services.\n\n## 1. DTOs (Data Transfer Objects)\n\nDTOs are our standardized way of defining data structures that are sent to and received from APIs, particularly Edge Functions.\n\n### DTO Structure\n\nAll DTOs that are written to Supabase tables must extend `SupabaseDto`.\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\nimport 'package:float_note/core/dto/supabase_dto.dart';\n\npart 'example_dto.g.dart';\n\n@JsonSerializable(includeIfNull: true, explicitToJson: true)\nclass ExampleDto extends SupabaseDto {\n  ExampleDto({\n    required this.id,\n    required this.createdAt,\n    required this.updatedAt,\n    required this.field1,\n    this.field2,\n  });\n\n  factory ExampleDto.fromJson(Map<String, dynamic> json) =>\n      _$ExampleDtoFromJson(json);\n\n  static const fromJsonFactory = _$ExampleDtoFromJson;\n  static const toJsonFactory = _$ExampleDtoToJson;\n  \n  @override\n  final String id;\n  @override\n  final DateTime createdAt;\n  @override\n  final DateTime updatedAt;\n  \n  final String field1;\n  final String? field2;\n\n  @override\n  Map<String, dynamic> toJson() => _$ExampleDtoToJson(this);\n}\n```\n\n### Request & Response DTOs\n\nFor Edge Functions, we may use DTOs that don't extend `SupabaseDto` if they don't map directly to a table. These are simple classes with `json_serializable`.\n\n```dart\n// Request DTO sent to an Edge Function\n@JsonSerializable()\nclass MyFunctionRequest {\n  MyFunctionRequest({required this.someValue});\n  final String someValue;\n  // fromJson/toJson ...\n}\n\n// Response DTO received from an Edge Function\n@JsonSerializable()\nclass MyFunctionResponse {\n  MyFunctionResponse({required this.result});\n  final String result;\n  // fromJson/toJson ...\n}\n```\n\n## 2. Calling Edge Functions\n\nEdge Functions are called from a Service class in the Flutter app.\n\n### Service Structure\n\n```dart\nclass MyFeatureService with Loglytics {\n  // ...\n  SupabaseClient get _supabaseClient => Supabase.instance.client;\n\n  Future<TurboResponse<MyFunctionResponse>> callMyFunction({\n    required String someValue,\n  }) async {\n    try {\n      final response = await _supabaseClient.functions.invoke(\n        'my-function-name',\n        body: MyFunctionRequest(someValue: someValue).toJson(),\n      );\n\n      if (response.status != 200) {\n        return TurboResponse.fail(\n          title: 'Error',\n          message: 'Failed to call function: ${response.data}',\n        );\n      }\n\n      return TurboResponse.success(\n        result: MyFunctionResponse.fromJson(response.data),\n      );\n    } catch (e, s) {\n      log.error('Failed to invoke Edge Function', error: e, stackTrace: s);\n      return TurboResponse.fail(\n        title: 'Error',\n        message: 'An unexpected error occurred.',\n      );\n    }\n  }\n}\n```\n\n## 3. Edge Function Backend Structure\n\nOur Edge Functions are written in TypeScript and located in a separate `supabase/functions` directory.\n\n### Service-Oriented Architecture\n\nSplit logic into focused service classes:\n\n```typescript\n// supabase/functions/_shared/services/ValidationService.ts\nexport class ValidationService {\n  static validateInput(data: unknown): MyFunctionRequest {\n    // Validation logic here\n    // Throws an error if invalid\n    return data as MyFunctionRequest;\n  }\n}\n```\n\n### Main Function Structure\n\n```typescript\n// supabase/functions/my-function-name/index.ts\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { ValidationService } from \"../_shared/services/ValidationService.ts\";\n\nserve(async (req) => {\n  try {\n    const requestData = await req.json();\n    const validatedData = ValidationService.validateInput(requestData);\n\n    // Business logic...\n    const result = `You sent: ${validatedData.someValue}`;\n\n    return new Response(\n      JSON.stringify({ result }),\n      { headers: { \"Content-Type\": \"application/json\" }, status: 200 },\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { headers: { \"Content-Type\": \"application/json\" }, status: 400 },\n    );\n  }\n});\n```\n\n## 4. Error Handling\n\nEdge Functions should return meaningful JSON error messages with appropriate status codes (e.g., 400 for bad request, 500 for server error). The Flutter service layer then converts these into user-friendly `TurboResponse.fail` objects.\n\n## 5. Testing Edge Functions\n\nAlways test with the Supabase CLI:\n\n```bash\n# Start local Supabase environment\nsupabase start\n\n# In Flutter, configure SupabaseService to use local URLs\n# (This is handled by our Environment enum)\nflutter run --dart-define=env=emulators\n```\n\n## Key Takeaways\n\n1.  **Always create DTOs** for Edge Function requests and responses.\n2.  **Use `TurboResponse<DTO>`** in your Flutter services for type-safe returns from function calls.\n3.  **Call functions** using `Supabase.instance.client.functions.invoke()`.\n4.  **Extract logic into services** in your TypeScript function code.\n5.  **Validate all incoming data** inside your Edge Function.\n6.  **Return structured JSON responses** (both for success and errors).",
    "keyword": "flutter-ins-edge-functions-dtos;"
  }
,
  {
    "name": "flutter-ins-service-locator",
    "text": "---\nname: service-locator-pattern\ndescription: \"The Service Locator pattern implementation using GetIt for dependency injection with standardized locator conventions.\"\n---\n# \ud83d\udccd Service Locator Pattern\n\nService Locator pattern implementation using `get_it` package for centralized dependency management.\n\n## Core Setup\n\nAll dependency injection is managed in `lib/core/services/locator_service.dart` using the `GetIt` service locator.\n\n## Locator Pattern Convention\n\nEvery injectable class follows this standardized pattern:\n\n```dart\nclass PosthogService {\n  // \ud83d\udccd LOCATOR -------------------------------------------------------------------------------\n\n  /// Returns the singleton instance of [PosthogService].\n  static PosthogService get locate => GetIt.I.get();\n\n  /// Registers this service as a lazy singleton in the GetIt service locator.\n  static void registerLazySingleton() => GetIt.I.registerLazySingleton(PosthogService.new);\n\n  // ... rest of the class\n}\n```\n\n## Required Elements\n\n- **`// \ud83d\udccd LOCATOR`** comment block\n- **Static `locate` getter** to retrieve instance from GetIt\n- **Static `register...` method** to handle its own registration logic\n\n## Benefits\n\n- **Decoupling**: Classes don't create their own dependencies\n- **Centralized Management**: All registrations in one place\n- **Testability**: Easy to swap implementations for testing\n- **Modularity**: Clear separation of concerns",
    "keyword": "flutter-ins-service-locator;"
  }
,
  {
    "name": "flutter-ins-flutter-busy-state",
    "text": "---\nname: busy-state-pattern\ndescription: \"Global busy state management pattern for showing loading indicators during asynchronous operations.\"\n---\n# \u23f3 Busy State Pattern\n\nGlobal busy state management for consistent loading indicators during asynchronous operations.\n\n## BusyService Core\n\nThe `BusyService` singleton manages application-wide busy state, exposing a `ValueListenable<BusyModel>` for UI listening.\n\n## Setting Busy State from ViewModels\n\n### Option 1: BusyServiceManagement Mixin\n\nFor ViewModels that frequently manage busy states:\n\n```dart\nclass MyViewModel extends BaseViewModel with BusyServiceManagement {\n  Future<void> doSomething() async {\n    setBusy(true);\n    await _myApi.fetchData();\n    setIdle(); // Equivalent to setBusy(false)\n  }\n}\n```\n\n### Option 2: Global Functions\n\nFor quick, one-off access:\n\n```dart\nimport 'package:float_note/state/globals/g_busy.dart';\n\nclass MyViewModel extends BaseViewModel {\n  Future<void> doSomething() async {\n    gSetBusy();\n    await _myApi.fetchData();\n    gSetIdle();\n  }\n}\n```\n\n## Global UI Integration\n\nThe busy indicator is handled at the top level of the widget tree using `BusyListenableBuilder`:\n\n```dart\n// In main app shell\nStack(\n  children: [\n    // App content\n    BusyListenableBuilder(\n      builder: (context, busyModel, child) {\n        return IsBusyIcon(busyModel: busyModel);\n      },\n    ),\n  ],\n)\n```\n\n## Benefits\n\n- **Consistent UX**: Same loading indicator across entire app\n- **Clean ViewModels**: No need for individual loading state management\n- **Global Control**: Single source of truth for busy state\n- **Automatic Display**: Loading overlay appears automatically when `gSetBusy()` is called\n\n## Customization\n\nBoth `setBusy()` and `gSetBusy()` accept parameters to customize behavior:\n- Show backdrop\n- Ignore pointer events\n- Custom loading messages",
    "keyword": "flutter-ins-flutter-busy-state;"
  }
,
  {
    "name": "flutter-ins-localization-pattern",
    "text": "---\nname: localization-pattern\ndescription: \"The architectural pattern for implementing localization and internationalization (i18n) in this Flutter project using ARB files and code generation.\"\n---\n# \ud83c\udf0d Localization Pattern\n\nThis pattern describes how localization is architecturally implemented in this project using Flutter's internationalization approach with ARB files and code generation.\n\n## Pattern Overview\n\nOur localization architecture follows these key principles:\n- **ARB Files**: Source of truth for all translations (`lib/l10n/intl_en.arb`, `lib/l10n/intl_nl.arb`)\n- **Code Generation**: The `intl_utils` package generates type-safe Dart classes from ARB files\n- **Global Accessor**: A simple global getter `gStrings` provides context-free access to localized strings\n- **Language Service**: The `LanguageService` manages language state and switching\n\n## ARB File Structure\n\nEach entry in an `.arb` file consists of a key-value pair:\n\n```json\n{\n  \"@@locale\": \"en\",\n  \"welcome\": \"Welcome\",\n  \"helloUsername\": \"Hello @{username}\",\n  \"@helloUsername\": {\n    \"placeholders\": {\n      \"username\": {\n        \"type\": \"Object\"\n      }\n    }\n  }\n}\n```\n\nKeys become getters in the generated `S` class, placeholders become method parameters.\n\n## Global String Access Pattern\n\n**File:** `lib/l10n/globals/g_strings.dart`\n\n```dart\nimport 'package:float_note/l10n/strings/gen/l10n.dart';\n\n/// Returns the current instance of [S] for localization.\nS get gStrings => S.current;\n```\n\nThis enables context-free string access anywhere in the application.\n\n## Language Loading Flow\n\n1. App starts \u2192 `MyAppViewModel` calls `_setupStrings()`\n2. `_setupStrings()` calls `S.load()` with locale from `LanguageService`\n3. `LanguageService` retrieves saved language from `LocalStorageService` (defaults to `en`)\n4. Strings are loaded and available via `gStrings`\n\n## Language Switching Flow\n\n1. User selects language \u2192 calls `LanguageService.updateLanguage()`\n2. `LanguageService` saves choice to local storage\n3. Updates `ValueListenable<TSupportedLanguage>` triggering listeners\n4. `MyAppView` rebuilds `ShadApp.router` with new locale\n5. Widget tree rebuilds with new locale, `gStrings` provides updated strings\n\n## Generated Files\n\nRunning `flutter pub run intl_utils:generate` creates:\n- `lib/l10n/strings/gen/l10n.dart`: Contains the `S` class delegate\n- `lib/l10n/strings/gen/intl/messages_*.dart`: Message lookups for each language",
    "keyword": "flutter-ins-localization-pattern;"
  }
,
  {
    "name": "flutter-ins-informer-box",
    "text": "---\nname: informer-box-pattern\ndescription: \"Pattern for managing collections of reactive state using InformerBox and other Box utilities for dynamic UI resources.\"\n---\n# \ud83d\udce6 InformerBox Pattern\n\nPattern for managing collections of reactive state where each item needs its own `Informer` instance.\n\n## InformerBox for Dynamic Collections\n\nWhen dealing with lists where each item has reactive state (e.g., task completion status):\n\n```dart\n// In ViewModel\nfinal taskCompletionInformers = InformerBox<bool>(initialValue: false);\n\n// In View\nListView.builder(\n  itemCount: tasks.length,\n  itemBuilder: (context, index) {\n    final task = tasks[index];\n    return ValueListenableBuilder<bool>(\n      valueListenable: model.taskCompletionInformers.get(task.id),\n      builder: (context, isCompleted, _) {\n        return Checkbox(\n          value: isCompleted,\n          onChanged: (value) => model.toggleTask(task.id),\n        );\n      },\n    );\n  },\n)\n```\n\n## Benefits\n\n- **Dynamic Management**: Creates `Informer`s on-demand for specific IDs\n- **Automatic Disposal**: Handles cleanup of unused `Informer`s\n- **Perfect for ListView.builder**: Each list item gets its own reactive state\n\n## Other Box Utilities\n\nFollowing the same pattern for UI resource management:\n\n- **`FocusNodeBox`**: Manages collection of `FocusNode`s\n- **`ScrollControllerBox`**: Manages `ScrollController`s  \n- **`TextEditingControllerBox`**: Manages `TextEditingController`s\n\n## Separation of Concerns\n\nThese Box utilities allow ViewModels to control UI resources (focus, scrolling, text input) without holding direct widget references, maintaining clean separation between logic and UI layers.",
    "keyword": "flutter-ins-informer-box;"
  }
,
  {
    "name": "flutter-ins-utilities",
    "text": "# \u26a1 Concurrency Patterns\n\nPatterns for managing asynchronous operations and keeping the UI thread responsive using project-specific utilities.\n\n## Heavy Work with Isolator\n\nFor CPU-intensive tasks, use `Isolator` (`lib/state/utils/isolator.dart`) to run work on separate isolates.\n\n**When to use:** Computations taking more than a few milliseconds that aren't I/O-bound.\n\n```dart\n// In service\nFuture<File> compressImage(File file) async {\n  final isolator = TIsolator<File, File>();\n  return await isolator.run(\n    input: file,\n    computation: (file, sendProgress) {\n      // Heavy processing logic here\n      return compressedFile;\n    },\n  );\n}\n```\n\n## Race Condition Prevention with Mutex\n\nUse `Mutex` (`lib/state/utils/mutex.dart`) when state can be modified by multiple async operations.\n\n**When to use:** Updating critical state in response to async events.\n\n```dart\nfinal _mutex = Mutex();\n\nvoid onData(User? user) => _mutex.lockAndRun(\n  run: (unlock) async {\n    // Protected code - only one operation at a time\n    _currentUser.add(user);\n    unlock();\n  },\n);\n```\n\n## Rate Limiting with Throttler\n\nUse `Throttler` (`lib/state/utils/throttler.dart`) to limit function execution frequency.\n\n**When to use:** Rapid-fire events where only the latest event matters within a time window.\n\n```dart\nfinal _throttler = Throttler(duration: 1.seconds);\n\nvoid _manageHouseholdMembers() => _throttler.run(() {\n  // Runs at most once per second\n});\n```\n\n## Delayed Execution with Debouncer\n\nUse `Debouncer` (`lib/state/utils/debouncer.dart`) to delay execution until activity stops.\n\n**When to use:** User input like search fields - wait until user stops typing.\n\n```dart\nfinal _debouncer = Debouncer(duration: kDurationsAnimationX0p5);\n\nvoid _tryUpdateUsernameAvailability() => _debouncer.run(() async {\n  // Runs only after user stops typing for 500ms\n  final isAvailable = await _usernamesApi.usernameIsAvailable();\n  _usernameIsAvailable.update(isAvailable);\n});\n```\n",
    "keyword": "flutter-ins-utilities;"
  }
,
  {
    "name": "flutter-ins-mvvm-architecture",
    "text": "---\nname: mvvm-architecture-pattern\ndescription: \"The Model-View-ViewModel architectural pattern implementation with strict separation of concerns and reactive UI updates.\"\n---\n# \ud83c\udfd7\ufe0f MVVM Architecture Pattern\n\nImplementation of Model-View-ViewModel pattern with strict separation of concerns and reactive programming principles.\n\n## Core Philosophy\n\n- **Separation of Concerns**: UI (View) is \"dumb\", all state/logic in ViewModel\n- **Reactivity**: UI reacts to state changes automatically, not imperatively updated\n- **Single Source of Truth**: State centralized in Services and ViewModels\n- **Immutability**: Prefer immutable state objects, update by creating new instances\n\n## Views (UI Layer)\n\n**Characteristics:**\n- Almost always `StatelessWidget`\n- Contain no business logic or mutable state\n- Receive state and callbacks from ViewModel\n- Rebuild specific parts using `ValueListenableBuilder`\n\n## ViewModels (Logic Layer)\n\n**Characteristics:**\n- Hold all state for a view using `Informer`s\n- Contain all business logic (button actions, data formatting, etc.)\n- Expose state via public `ValueListenable` getters\n- Provided to View using `ViewModelBuilder`\n\n## UI Updates with ValueListenableBuilder\n\nReactive UI updates by listening to ViewModel state:\n\n```dart\n// Single state listener\nValueListenableBuilder<bool>(\n  valueListenable: model.isLoading,\n  builder: (context, isLoading, child) {\n    return isLoading\n        ? const CircularProgressIndicator()\n        : const Text('Data Loaded!');\n  },\n)\n\n// Multiple state listeners\nValueListenableBuilderX2<String, int>(\n  valueListenable: model.username,\n  valueListenable2: model.itemCount,\n  builder: (context, username, count, child) {\n    return Text('$username has $count items');\n  },\n)\n```\n\n## StatefulWidget Restrictions\n\n**Never use `StatefulWidget`** for business or UI logic state.\n\n**Exception:** Only when absolutely necessary for Flutter framework integration (e.g., animations requiring `TickerProviderStateMixin`). Must contain minimal logic required for mixin functionality.\n\n**Reasoning:** `StatefulWidget` mixes state, logic, and UI code, making it hard to test and maintain while scattering state across the widget tree.",
    "keyword": "flutter-ins-mvvm-architecture;"
  }
,
  {
    "name": "flutter-ins-supabase-comms",
    "text": "# Supabase Communication\n\nThis document outlines the architecture and patterns we use for communicating with Supabase in the FloatNote mobile application. Our approach provides a reactive, type-safe, and scalable way to manage data.\n\n## 1. High-Level Architecture\n\nOur Supabase communication is structured in three main layers:\n\n1.  **API Layer (`SupabaseApi`)**: A generic, low-level, stateless wrapper around the `supabase_flutter` package. This class is responsible for direct communication with a specific Supabase table (e.g., `tasks`, `profiles`).\n2.  **Service Layer (`SyncedDocService` & `SyncedDocsService`)**: Stateful, singleton services that manage the application's state. They use a `SupabaseApi` instance to listen to real-time streams, hold the data in memory, and provide business logic for CRUD operations.\n3.  **UI Layer (ViewModels & Widgets)**: The UI layer consumes data from the services, typically through `ValueListenable`s, to build a reactive user interface.\n\nThis architecture ensures a clear separation of concerns, making the codebase easier to manage, test, and scale.\n\n## 2. Core Concepts\n\n### `SupabaseApi<T>`\n\n`SupabaseApi<T>` is our generic class for all table-specific APIs. It's instantiated inside a service and configured for a specific table and DTO.\n\n**`lib/supabase/services/supabase_api.dart`**\n```dart\nclass SupabaseApi<T extends SupabaseDto> with Loglytics {\n  SupabaseApi({\n    required this.client,\n    required this.table,\n    required this.fromJsonFactory,\n    required this.toJsonFactory,\n  });\n  // ... methods for create, getById, getAll, update, delete, streamDocs, etc.\n}\n```\nIt is typically instantiated directly within the service that uses it, like in `TaskService`.\n\n### `SyncedDocService` & `SyncedDocsService`\n\nThese are the base classes for our stateful services that need to sync with Supabase data.\n-   `SyncedDocsService`: Manages a collection of documents from a table. It holds a `Map<String, T>` of documents in memory.\n-   `SyncedDocService`: Manages a single document from a table. It holds a single `T?` object in memory.\n\n## 3. Real-time Data Streaming and Syncing with `AuthSyncService`\n\nData synchronization is tied to the user's authentication state via the `AuthSyncService` base class, which `SyncedDoc(s)Service` extends.\n\n1.  **Auth-Aware Streaming**: When a user logs in, `AuthSyncService` is triggered.\n2.  **Defining the Stream**: Each service overrides the `stream` getter to define which Supabase query to listen to. For example, `TaskService` listens for tasks that are not yet completed.\n    ```dart\n    // in tasks/services/task_service.dart\n    @override\n    FutureOr<Stream<Map<String, TaskDto>?>> Function(User user) get stream =>\n        (user) => syncConfig.syncFromRemote\n            ? syncer\n                .streamDocsWithFilter(\n                  column: kCompletedAt,\n                  value: null,\n                )\n                .map(\n                  (event) => switch (event) {\n                    Success<List<TaskDto>>() => event.result.toIdMap(\n                        (element) => element.id,\n                      ),\n                    Fail<List<TaskDto>>() => defaultValues().toIdMap(\n                        (element) => element.id,\n                      ),\n                  },\n                )\n            : const Stream<Map<String, TaskDto>>.empty();\n    ```\n3.  **Processing Data**: The `onData` getter in `AuthSyncService` processes the data from the stream and updates the local in-memory state (`_docs` informer). This automatically updates any listening UI components.\n    ```dart\n    // in data/services/synced_docs_service.dart\n    @override\n    void Function(Map<String, T>? value, User? user) get onData => (value, user) {\n          if (user == null) {\n            // Clear data on logout\n            _docs.update(defaultValues().toIdMap((element) => element.id));\n            return;\n          }\n          // Update the in-memory map of documents\n          _docs.update(value ?? defaultValues().toIdMap((element) => element.id));\n        };\n    ```\n\n## 4. CRUD Operations\n\nAll create, update, and delete operations are handled by methods in our services (e.g., `TaskService`). These methods use the underlying `SupabaseApi` to perform the remote operation and then update the local state.\n\n**Example from `SyncedDocsService`:**\n```dart\n// in data/services/synced_docs_service.dart\nFuture<TurboResponse<T>> updateDoc(\n  T value, {\n  bool doNotifyListeners = true,\n  bool awaitSync = false,\n}) async {\n  // 1. Optimistic local update\n  _docs.updateCurrent(\n    (cValue) => cValue..[value.id] = value,\n  );\n  // 2. Remote Supabase update\n  if (awaitSync) {\n    await _trySyncUpdate(value: value);\n  } else {\n    unawaited(_trySyncUpdate(value: value));\n  }\n  return TurboResponse.success(result: value);\n}\n```\nThis pattern provides an \"optimistic update\" where the UI reacts instantly to the local state change, while the remote update happens in the background.\n\n## 5. Finding and Sorting Data\n\n-   **Finding Docs by ID**: Services provide a `docs[id]` lookup on the in-memory map. This is extremely fast as it doesn't require a database query.\n-   **Sorting**: Sorting is done in-memory, often using an `Isolator` for performance if the list is large. This ensures that the data exposed to the UI via `ValueListenable`s is always in the desired order without blocking the UI thread.\n    ```dart\n    // in tasks/services/task_service.dart\n    Future<List<TaskDto>> sortedPer({ ... }) async {\n      return await _taskIsolator.run(\n        input: pTasks,\n        computation: (input, sendProgress) {\n          // ... sorting logic ...\n        },\n      );\n    }\n    ```",
    "keyword": "flutter-ins-supabase-comms;"
  }
,
  {
    "name": "flutter-ins-supabase-tables",
    "text": "# Supabase Tables\n\nThis document provides a comprehensive guide to managing our Supabase database. It covers everything from adding new tables and defining data models to writing Row Level Security (RLS) policies and implementing server-side logic with Edge Functions. Adhering to these conventions is crucial for maintaining a stable, secure, and scalable backend.\n\nOur core philosophy is that **the Supabase schema is the single source of truth for our data**.\n\n## 1. How We Add a New Table\n\nAdding a new table is a structured process that ensures all parts of our system are in sync.\n\n### Step 1: Define the Table in Supabase Studio (or via Migration)\n\nThe first step is to define the schema for your new table. This should be done via a SQL migration file in your `supabase/migrations` directory.\n\n-   **Convention:** Use snake_case for table and column names. Define primary keys, foreign keys, and indexes appropriately.\n-   **Example Migration (`supabase/migrations/..._create_tasks_table.sql`):**\n    ```sql\n    create table public.tasks (\n        id uuid primary key default gen_random_uuid(),\n        user_id uuid references auth.users not null,\n        title text check (length(title) > 0),\n        created_at timestamp with time zone default timezone('utc'::text, now()) not null,\n        -- other columns\n    );\n    ```\n\n### Step 2: Create DTOs in the Flutter App\n\nBased on the table definition, create a corresponding Data Transfer Object (DTO) in the Flutter application.\n\n-   **Location:** `lib/your_feature/dtos/your_model_dto.dart`\n-   **Convention:** Use `json_serializable` with `fieldRename: FieldRename.snake`. Run `flutter pub run build_runner build` after creating your DTO.\n-   **Base Class:** Your DTO must extend `SupabaseDto`.\n\n### Step 3: Create a `SupabaseApi` Instance\n\nEach table is accessed through our generic `SupabaseApi` class. This is typically instantiated inside the service that manages the data for that table.\n\n-   **Location:** `lib/your_feature/services/your_table_service.dart`\n-   **Convention:** The service will hold a `late final` instance of `SupabaseApi<YourDto>`.\n    ```dart\n    // In TaskService.dart\n    late final SupabaseApi<TaskDto> _api = SupabaseApi(\n      client: Supabase.instance.client,\n      table: 'tasks',\n      fromJsonFactory: TaskDto.fromJson,\n      toJsonFactory: (task) => task.toJson(),\n    );\n    ```\n\n### Step 4: Create a Service\n\nIf the table's data needs to be held in state, shared across features, or requires business logic, create a service.\n\n-   **Location:** `lib/your_feature/services/your_table_service.dart`\n-   **Convention:** Extend `SyncedDocsService` (for collections) or `SyncedDocService` (for single items) and register it as a lazy singleton in `lib/core/services/locator_service.dart`.\n\n## 2. How We Handle Security with RLS\n\nRow Level Security (RLS) policies are our primary defense for protecting user data. They are defined as SQL in migration files and must be created for every new table.\n\nOur policies follow these principles:\n-   **Default Deny:** RLS is enabled on all tables, so access is denied unless an explicit policy allows it.\n-   **Authentication Required:** Nearly all policies check that the user is authenticated using `auth.uid()`.\n-   **Data Validation:** We use `CHECK` constraints in our table definitions to validate incoming data.\n-   **Ownership and Permissions:** Access control is based on ownership. Policies check `auth.uid()` against a `user_id` column in the table.\n    ```sql\n    -- Example RLS policy for 'tasks' table\n    alter table public.tasks enable row level security;\n\n    create policy \"Users can manage their own tasks.\"\n    on public.tasks for all\n    using (auth.uid() = user_id)\n    with check (auth.uid() = user_id);\n    ```\n\n## 3. Things We Consider When Managing Tables\n\n-   **Scalability & Cost:** How will this design perform with millions of rows? We design queries to be efficient and ensure proper indexing on columns that are frequently queried.\n-   **Data Integrity:** We use **Postgres Transactions** for any operation that involves multiple writes to ensure atomicity. This can be done inside an RPC (a Postgres function exposed to the API) or an Edge Function.\n-   **Denormalization:** We sometimes duplicate data to optimize for read performance. When we do this, we create a **database trigger and function** to keep the duplicated data in sync.\n-   **Cleanup:** When a user is deleted, what related data needs to be cleaned up? We use `ON DELETE CASCADE` in our foreign key constraints or database triggers for this.\n\n## 4. How We Use Supabase in Edge Functions\n\nOur server-side logic is written in TypeScript and deployed as Supabase Edge Functions.\n\n-   **SDK:** We use the **Supabase client library** for Deno. When using a service role key, the function has privileged access to the database, bypassing RLS policies.\n-   **Triggers:** We use database triggers and webhooks to invoke Edge Functions in response to data changes.\n-   **DTOs:** Edge Functions should have their own DTOs located in `supabase/functions/_shared/dtos/`. These must be kept in sync with the table definitions.",
    "keyword": "flutter-ins-supabase-tables;"
  }
,
  {
    "name": "flutter-ins-crash-report-analytics",
    "text": "# Crash Reporting and Analytics Pattern\n\n## Overview\nThis pattern defines how crash reporting and analytics should be implemented when enabled in the Float Note project.\n\n## Current Status\nAnalytics and crash reporting are **disabled** but dependencies remain:\n- `posthog_flutter: ^5.0.0` (commented out in main.dart)\n- `sentry_flutter: ^9.4.0` (commented out in main.dart)\n- `loglytics: ^0.16.1` (active for logging only)\n\n## Pattern Structure\n\n### 1. Error Catching Foundation\n```dart\n// Global error handling in main.dart\nrunZonedGuarded(\n  () async {\n    // App initialization\n    runApp(...);\n  },\n  (error, stack) {\n    Log(location: 'Zoned').error(\n      'Unhandled exception caught: ${error.toString()}',\n      error: error,\n      stackTrace: stack,\n    );\n  },\n);\n```\n\n### 2. Service Integration Pattern\nWhen re-enabling analytics:\n\n```dart\n// Initialize PostHog\nfinal config = PostHogConfig('YOUR_KEY');\nconfig.debug = kDebugMode;\nconfig.captureApplicationLifecycleEvents = true;\nconfig.host = 'https://eu.i.posthog.com';\n\n// Wrap in Sentry\nawait SentryFlutter.init(\n  (options) {\n    options.dsn = 'YOUR_DSN';\n    options.sendDefaultPii = true;\n    options.tracesSampleRate = 1.0;\n  },\n  appRunner: () async {\n    await Posthog().setup(config);\n    // Run app\n  },\n);\n```\n\n### 3. Loglytics Abstraction Pattern\n```dart\nLoglytics.setUp(\n  crashReportsInterface: CrashReportsImplementation(),\n  analyticsInterface: AnalyticsImplementation(),\n  analytics: (analyticsFactory) {\n    // Register feature analytics\n  },\n  logLevel: kDebugMode ? LogLevel.trace : LogLevel.info,\n);\n```\n\n### 4. Error Reporting Pattern\nAlways use Loglytics for error reporting:\n\n```dart\nclass MyService with Loglytics {\n  Future<void> riskyOperation() async {\n    try {\n      // Operation\n    } catch (e, s) {\n      log.error(\n        'Operation failed',\n        error: e,\n        stackTrace: s,\n      );\n      rethrow;\n    }\n  }\n}\n```\n\n### 5. Analytics Event Pattern\nWhen implemented, analytics follow:\n- **Subject**: What entity (task, float, auth)\n- **Action**: What happened (created, deleted, tapped)\n- **Parameters**: Context data\n\n```dart\nclass TaskAnalytics extends TAnalytics {\n  void taskCompleted({required String taskId}) {\n    service.completed(\n      subject: subjects.task,\n      parameters: parameters(id: taskId),\n    );\n  }\n}\n```\n\n## Integration Points\n- Supabase auth events sync with analytics when enabled\n- User identification flows through all services\n- Error context includes user properties\n\n## Re-enabling Checklist\n1. Create missing TAnalytics infrastructure\n2. Uncomment initialization code\n3. Add environment-specific API keys\n4. Register feature analytics classes\n5. Add analytics calls to ViewModels\n6. Test in development first",
    "keyword": "flutter-ins-crash-report-analytics;"
  }
,
  {
    "name": "flutter-ins-error-handling",
    "text": "# Error Handling and User Feedback Pattern\n\n## Core Concept: TurboResponse\n\nAll asynchronous operations return `TurboResponse<T>` - a sealed class representing success or failure.\n\n### Response Types\n```dart\n// Success with result\nTurboResponse.success(result: value, title: 'Done', message: 'Operation completed')\n\n// Failure with error\nTurboResponse.fail(error: e, stackTrace: s, title: 'Error', message: 'Failed')\n\n// Convenience constructors\nTurboResponse.successAsBool() // When no result needed\nTurboResponse.failAsBool()    // Default failure\n```\n\n## Golden Rule: No Error States in UI\n\n**Never show error states in the UI.** Keep the last valid state and provide feedback via:\n- **Toasts**: Non-blocking notifications for success/minor errors\n- **Dialogs**: Blocking alerts for critical errors requiring acknowledgment\n\nException: Form validation errors shown inline.\n\n## Layered Error Handling\n\n### Layer 1: API/Low-Level Services\nConvert raw exceptions to TurboResponse:\n\n```dart\nFuture<TurboResponse<AuthResponse>> login({\n  required String email,\n  required String password,\n}) async {\n  try {\n    final authResponse = await _supabase.client.auth.signInWithPassword(\n      email: email,\n      password: password,\n    );\n    return TurboResponse.success(result: authResponse);\n  } on AuthException catch (error) {\n    return tryHandleSupabaseAuthException(\n      supabaseAuthException: error,\n      log: log,\n    );\n  } catch (error, stackTrace) {\n    log.error('Login failed', error: error, stackTrace: stackTrace);\n    return TurboResponse.fail(\n      title: 'Login failed',\n      message: 'An unknown error occurred',\n      error: error,\n    );\n  }\n}\n```\n\n### Layer 2: Business Services\nPropagate TurboResponse without try-catch:\n\n```dart\nFuture<TurboResponse<TaskDto>> updateTask(TaskDto task) async {\n  final response = await api.updateDoc(task);\n  return response; // Propagate as-is\n}\n```\n\n### Layer 3: ViewModels\nConvert TurboResponse to user feedback:\n\n```dart\nFuture<void> onDeletePressed(BuildContext context, TaskDto task) async {\n  try {\n    setBusy(true);\n    final response = await TaskService.locate.deleteTask(id: task.id);\n    \n    response.when(\n      success: (_) {\n        ToastService.locate.showToast(\n          context: context,\n          title: 'Task deleted',\n        );\n      },\n      fail: (_) {\n        DialogService.locate.showOkDialog(\n          context: context,\n          title: 'Error',\n          message: 'Could not delete task',\n        );\n      },\n    );\n  } catch (error, stackTrace) {\n    log.error('Unexpected error', error: error, stackTrace: stackTrace);\n    DialogService.locate.showSomethingWentWrongDialog(context: context);\n  } finally {\n    setBusy(false);\n  }\n}\n```\n\n## User Feedback Services\n\n### ToastService\n```dart\nToastService.locate.showToast(\n  context: context,\n  title: 'Success',\n  subtitle: 'Changes saved',\n);\n```\n\n### DialogService\n```dart\nDialogService.locate.showOkDialog(\n  context: context,\n  title: 'Error',\n  message: 'Connection failed',\n);\n\nDialogService.locate.showOkCancelDialog(\n  context: context,\n  title: 'Confirm',\n  message: 'Delete this item?',\n);\n```\n\n## Handling TurboResponse\n\n### Safe Pattern: .when()\n```dart\nresponse.when(\n  success: (s) => handleSuccess(s),\n  fail: (f) => handleFailure(f),\n);\n```\n\n### Conditional Checks\n```dart\nif (response.isSuccess) {\n  // Handle success\n}\n```\n\n### Dangerous: Direct .result\n```dart\n// Only after checking isSuccess!\nif (response.isSuccess) {\n  final value = response.result;\n}\n```\n\n### Transaction Pattern: .throwWhenFail()\n```dart\n// In database transactions only\nresponse.throwWhenFail();\n```\n\n## Supabase Integration\n\nServices using `SupabaseApi` automatically return `TurboResponse`:\n- All CRUD operations wrapped\n- `SupabaseAuthExceptionHandler` mixin for auth errors\n- Consistent error messages across the app",
    "keyword": "flutter-ins-error-handling;"
  }
,
  {
    "name": "flutter-ins-informer-state",
    "text": "---\nname: informer-state-pattern\ndescription: \"The core pattern for reactive state management using Informer<T> instead of ValueNotifier in ViewModels and Services.\"\n---\n# \ud83d\udce1 Informer State Pattern\n\nThe core pattern for reactive state management using `Informer<T>` as the foundation for all state handling.\n\n## What is Informer?\n\n`Informer<T>` is our custom `ValueListenable<T>` that replaces Flutter's `ValueNotifier` for consistency and extended functionality.\n\n## Basic Usage Pattern\n\n```dart\nclass MyViewModel extends BaseViewModel {\n  // Private mutable state holder\n  final _isLoading = Informer<bool>(false);\n\n  // Public immutable stream for UI\n  ValueListenable<bool> get isLoading => _isLoading;\n\n  void fetchData() {\n    _isLoading.update(true);\n    // ... fetch data ...\n    _isLoading.update(false);\n  }\n}\n```\n\n## State Mutation Methods\n\n### Direct Update: `update()`\nFor simple state replacements:\n```dart\nvoid setLoading(bool isLoading) {\n  _isLoading.update(isLoading);\n}\n```\n\n### Functional Update: `updateCurrent()`\nWhen new state depends on current state (preferred for complex objects):\n```dart\nfinal _counter = Informer<int>(0);\n\nvoid increment() {\n  _counter.updateCurrent((cValue) => cValue + 1);\n}\n\n// With collections\nfinal _tasks = ListInformer<Task>([]);\n\nvoid addTask(Task newTask) {\n  _tasks.updateCurrent((currentTasks) {\n    currentTasks.add(newTask); // Safe - works with fresh copy\n    return currentTasks;\n  });\n}\n```\n\n### Silent Updates\nFor batching multiple state changes:\n```dart\nvoid updateTwoThingsSilently() {\n  _informerA.silentUpdate(newValueA);\n  _informerB.silentUpdate(newValueB);\n  \n  // Manually trigger rebuild\n  _informerA.rebuild();\n  _informerB.rebuild();\n}\n```\n\n## Key Principles\n\n- All state mutations must happen inside the ViewModel/Service that owns the state\n- Private `_informer` instances are mutable, public getters return `ValueListenable`\n- Use `updateCurrent()` when new state depends on current state for atomicity\n- Silent updates allow batching multiple changes for single UI rebuild",
    "keyword": "flutter-ins-informer-state;"
  }
,
  {
    "name": "flutter-ins-service-state",
    "text": "---\nname: service-state-pattern\ndescription: \"Pattern for managing shared application state and business logic using Services with dependency injection.\"\n---\n# \ud83d\udd27 Service State Pattern\n\nPattern for managing shared application state and business logic using Services registered with dependency injection.\n\n## When to Use Services\n\nServices are for state or business logic that needs to be shared across multiple features or screens.\n\n**Examples:** `AuthService`, `HouseholdService`, `ShoppingListService`\n\n## Service Implementation\n\nServices use the same `Informer` pattern as ViewModels for state management:\n\n```dart\nclass MyService {\n  // Private state\n  final _data = Informer<List<Item>>([]);\n  \n  // Public state access\n  ValueListenable<List<Item>> get data => _data;\n  \n  // Business logic\n  void addItem(Item item) {\n    _data.updateCurrent((current) {\n      current.add(item);\n      return current;\n    });\n  }\n}\n```\n\n## Dependency Injection with GetIt\n\n**Registration:** In `lib/core/services/locator_service.dart`\n\n- `registerLazySingleton()`: Single instance throughout app lifecycle\n- `registerFactory()`: New instance each time requested (for ViewModels)\n\n```dart\n// Service registration\nclass MyService {\n  static void registerLazySingleton() => \n      GetIt.I.registerLazySingleton(MyService.new);\n  static MyService get locate => GetIt.I.get();\n}\n\n// Accessing in ViewModel\nfinal _myService = MyService.locate;\n```\n\n## Sync Services\n\nFor data from Supabase, use specialized abstract services:\n- `AuthSyncService`: Authentication-aware data sync\n- `HouseholdCollectionSyncService`: Household-scoped collections\n\nThese automatically handle:\n- Listening to Supabase streams\n- Updating state in response to data changes\n- Authentication event handling",
    "keyword": "flutter-ins-service-state;"
  }
,
  {
    "name": "flutter-ins-turbo-response",
    "text": "---\nname: turbo-response-feedback-pattern\ndescription: \"Pattern for standardized user feedback using TurboResponse for consistent success and error handling.\"\n---\n# \ud83c\udfaf TurboResponse Feedback Pattern\n\nStandardized approach to user feedback using `TurboResponse<T>` for consistent operation outcomes.\n\n## TurboResponse Structure\n\n**`Success<T>`** - Successful operations:\n- `result`: The value of type `T` returned\n- `title` & `message`: Optional strings for success toasts\n\n**`Fail<T>`** - Failed operations:\n- `error`: Underlying `Object` that caused failure\n- `stackTrace`: Stack trace for debugging\n- `title` & `message`: User-friendly error explanations\n\n## Golden Rule: Keep UI Stable\n\n**Never update UI into error state** - avoid disruptive red error messages.\n\n**Instead:**\n1. **Keep UI in last valid state** - user can continue interacting\n2. **Provide non-intrusive feedback** via Toasts or blocking Dialogs/Sheets\n\n**Exception:** Form validation errors below form fields are acceptable UX pattern.\n\n## Service Layer Contract\n\nEvery fallible operation returns `Future<TurboResponse>`:\n\n```dart\nFuture<TurboResponse<User>> updateProfile(UserProfile profile) async {\n  try {\n    final user = await _api.updateUser(profile);\n    return Success(\n      result: user,\n      title: 'Success',\n      message: 'Profile updated successfully',\n    );\n  } catch (e, stackTrace) {\n    return Fail(\n      error: e,\n      stackTrace: stackTrace,\n      title: 'Update Failed',\n      message: 'Could not update profile. Please try again.',\n    );\n  }\n}\n```\n\nThis ensures ViewModels receive structured responses for appropriate feedback handling.",
    "keyword": "flutter-ins-turbo-response;"
  }
,
  {
    "name": "flutter-con-globals",
    "text": "# Globals\n\nGlobals files provide easy, global access to variables or service instances that may be computed at runtime. They are used sparingly to simplify access to frequently needed, app-wide values.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/globals/<global_name>.dart`\n-   **Naming**: The file is typically prefixed with `g_` (for \"global\"), e.g., `g_now.dart`.\n\n**Example:** `lib/data/globals/g_now.dart`\n\n## 2. Structure and Conventions\n\n-   **Declaration**: Globals are defined as top-level getters or variables.\n-   **Getters vs. Variables**:\n    -   **Getters** are used for values that should be re-computed every time they are accessed (e.g., `gNow()` which should always return the current time).\n    -   **Variables** can be used for globally accessible instances that are initialized once.\n-   **Purpose**:\n    -   **Runtime Values**: Provide access to values that change during runtime (e.g., `gNow()`, `gUserId`).\n    -   **Service Accessors**: Create convenient shortcuts to access service instances or their properties (e.g., `gStrings` which provides access to the localization service's current strings).\n    -   **Localization**: `gStrings` is the primary way to access localized strings throughout the application. All user-facing text should use `gStrings` (e.g., `gStrings.today`, `gStrings.tomorrow`, `gStrings.cancel`).\n-   **Distinction from Constants**: Unlike constants (which must be known at compile-time), globals can be initialized or computed at runtime.\n-   **Localization Workflow**:\n    -   Add new strings to the ARB files (`lib/l10n/config/intl_en.arb` and `intl_nl.arb`)\n    -   Access them via `gStrings.yourStringKey`\n    -   **NEVER** run build commands to generate localization files - the project has a plugin that generates them automatically\n\n## 3. Example\n\n```dart\n// lib/data/globals/g_now.dart\n\n/// Returns the current [DateTime] using [DateTime.now].\nDateTime get gNow() => DateTime.now();\n```\n\n```dart\n// lib/data/globals/g_user_id.dart\n\nimport 'package:{project_name}/auth/services/auth_service.dart';\nimport 'package:{project_name}/data/constants/k_values.dart';\n\n/// Returns the current user's unique identifier.\n///\n/// Returns [kValuesNoAuthId] if no user is currently signed in.\nString get gUserId => AuthService.locate.user?.id ?? kValuesNoAuthId;\n```\n",
    "keyword": "flutter-con-globals;"
  }
,
  {
    "name": "flutter-con-forms",
    "text": "# Forms\n\nForm configurations centralize the definition, state, and validation logic for a form in the application.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/forms/<form_name>_form.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_form.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/auth/forms/login_form.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Form classes extend `FormConfig` from `lib/forms/abstracts/form_config.dart`.\n-   **Dependency Injection**:\n    -   Forms are registered with `GetIt` as factories.\n    -   They must have a static `locate` getter and a static `registerFactory` method.\n-   **Field Enum**: A private `enum` is defined within the file to represent the unique identifiers for each form field.\n    ```dart\n    enum _LoginFormField {\n      email,\n      password,\n    }\n    ```\n-   **Field Configuration**:\n    -   The class overrides the `formFieldConfigs` getter, which returns a `Map<Enum, TFormFieldConfig>`.\n    -   This map links each field `enum` value to a `TFormFieldConfig` instance.\n    -   `TFormFieldConfig` defines everything about a field: its type (`TFieldType`), validation logic (`valueValidator`), initial value, whether it's obscured, etc.\n-   **Validation**:\n    -   Validation logic is provided via the `valueValidator` property of `TFormFieldConfig`.\n    -   Validators are typically composed using `kValueValidatorsMultiple` and other helpers from `lib/forms/constants/k_value_validators.dart`.\n-   **Field Accessors**: The class provides public getters to easily access the `TFormFieldConfig` for each field from the `ViewModel`.\n    ```dart\n    TFormFieldConfig<String> get email => formFieldConfig(_LoginFormField.email);\n    ```\n\n## 3. Example\n\n```dart\n// lib/auth/forms/login_form.dart\n\nimport 'package:{project_name}/forms/abstracts/form_config.dart';\nimport 'package:{project_name}/forms/config/t_form_field_config.dart';\n// ... other imports\n\nenum _LoginFormField {\n  email,\n  password,\n}\n\nclass LoginForm extends FormConfig {\n  // 1. GetIt registration\n  static LoginForm get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(LoginForm.new);\n\n  // 2. Field accessors\n  TFormFieldConfig<String> get email => formFieldConfig(_LoginFormField.email);\n  TFormFieldConfig<String> get password => formFieldConfig(_LoginFormField.password);\n\n  // 3. Field configuration map\n  @override\n  late final Map<Enum, TFormFieldConfig> formFieldConfigs = {\n    _LoginFormField.email: TFormFieldConfig<String>(\n      id: _LoginFormField.email,\n      fieldType: TFieldType.textInput,\n      valueValidator: kValueValidatorsMultiple(\n        [\n          kValueValidatorsRequired(errorText: () => gStrings.enterYourEmail),\n          kValueValidatorsEmail(errorText: () => gStrings.enterAValidEmail),\n        ],\n      ),\n    ),\n    _LoginFormField.password: TFormFieldConfig<String>(\n      id: _LoginFormField.password,\n      fieldType: TFieldType.textInput,\n      obscureText: true,\n      valueValidator: kValueValidatorsRequired(errorText: () => gStrings.enterYourPassword),\n    ),\n  };\n}\n```\n",
    "keyword": "flutter-con-forms;"
  }
,
  {
    "name": "flutter-con-utils",
    "text": "# Utils (Utilities)\n\nUtility files contain helper classes that provide specific, reusable functionality that doesn't fit neatly into other categories like services or extensions.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/state/utils/` (This project centralizes many core utilities here).\n-   **Naming**: Files are named in `snake_case` based on the utility they provide.\n\n**Example:** `lib/state/utils/debouncer.dart`\n\n## 2. Structure and Conventions\n\n-   **Class-Based**: Utilities are typically implemented as classes rather than top-level functions, allowing them to manage their own state if necessary.\n-   **Single Responsibility**: Each utility class has a clear and single purpose.\n    -   `Debouncer`: Delays execution of a function until a certain period of inactivity has passed.\n    -   `Mutex`: Ensures that a piece of code is not executed concurrently.\n    -   `ScrollControllerBox`: Manages a collection of `ScrollController` instances.\n-   **Instantiation**: They are instantiated directly where needed; they are not typically registered with `GetIt` unless they manage a shared, singleton resource.\n-   **Lifecycle**: If a utility class holds resources that need to be cleaned up (like a `Timer` in `Debouncer` or controllers in `ScrollControllerBox`), it provides a `dispose` method.\n\n## 3. Example\n\n```dart\n// lib/state/utils/debouncer.dart\n\nimport 'dart:async';\nimport 'dart:ui';\nimport '../../data/constants/k_durations.dart';\n\nclass Debouncer {\n  Debouncer({\n    Duration duration = kDurationsAnimation,\n  }) : _duration = duration;\n\n  final Duration _duration;\n  Timer? _timer;\n\n  /// Schedules a callback to be run after the specified duration.\n  void run(VoidCallback voidCallback) {\n    tryCancel();\n    _timer = Timer(\n      _duration,\n      () {\n        voidCallback();\n      },\n    );\n  }\n\n  /// Cancels any pending callback if one exists.\n  void tryCancel() {\n    if (_timer != null) {\n      _timer?.cancel();\n    }\n  }\n}\n```",
    "keyword": "flutter-con-utils;"
  }
,
  {
    "name": "flutter-con-typedefs",
    "text": "# Typedefs\n\nTypedefs are used to create a custom type alias for a function signature. This improves code readability and makes it easier to use complex function types as parameters.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/typedefs/<typedef_name>.dart`\n-   **Naming**: The file is named in `snake_case`.\n\n**Example:** `lib/components/typedefs/on_component_pressed.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: The `typedef` keyword is used to define the alias.\n-   **Naming**: The typedef name is `PascalCase` and should clearly describe the purpose of the function signature it represents.\n-   **Purpose**: They are most useful for defining callbacks or builder functions that are passed as parameters to widgets or other methods. This makes the code that uses them cleaner and more self-documenting.\n\n## 3. Example\n\n```dart\n// lib/components/typedefs/on_component_pressed.dart\n\nimport 'package:{project_name}/components/enums/t_component.dart';\n\ntypedef OnComponentPressed = void Function(TComponent component);\n```\n\n```dart\n// lib/state/typedefs/lazy_locator_def.dart\n\n/// Used to store locate calls inside a callback.\n///\n/// This way the actual locate call is only called when necessary.\ntypedef LazyLocatorDef<T extends Object> = T Function();\n```\n",
    "keyword": "flutter-con-typedefs;"
  }
,
  {
    "name": "flutter-con-exceptions",
    "text": "# Exceptions\n\nCustom exception classes are used to handle specific, known error cases in a structured and readable way.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/state/exceptions/`\n-   **Naming**: Files are named in `snake_case` and end with `_exception.dart`. The class name is `PascalCase`.\n\n**Example:** `lib/state/exceptions/unexpected_null_exception.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: In this project, custom exceptions are plain Dart classes. They do not always implement the standard `Exception` interface, but they are used with the `throw` keyword.\n-   **Properties**: They typically have a `final String reason` property to describe the nature of the error.\n-   **Constructor**: A `const` constructor is provided.\n-   **`toString()` Override**: They override the `toString()` method to provide a clear and informative string representation of the exception, which is useful for logging and debugging.\n-   **Purpose**: They are thrown when the application enters a state that should be impossible according to the logic, helping to identify bugs and logical errors quickly.\n\n## 3. Example\n\n```dart\n// lib/state/exceptions/unexpected_null_exception.dart\n\nclass UnexpectedNullException {\n  const UnexpectedNullException({\n    required this.reason,\n  });\n\n  final String reason;\n\n  @override\n  String toString() {\n    return 'UnexpectedNullException{reason: $reason}';\n  }\n}\n```",
    "keyword": "flutter-con-exceptions;"
  }
,
  {
    "name": "flutter-con-view-arguments",
    "text": "# View Arguments\n\nView Arguments are simple data classes used to pass type-safe data to a new view during navigation.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/views/<screen_name>/<screen_name>_arguments.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_arguments.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/auth/views/verify_email/verify_email_arguments.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Argument classes must extend `ViewArguments` from `lib/routing/abstracts/view_arguments.dart`.\n-   **Purpose**: They act as a container for data that a `ViewModel` needs to initialize itself.\n-   **Immutability**: Properties of the class are `final`.\n-   **Serialization**:\n    -   They must implement a `toMap()` method to convert the object's properties into a `Map<String, dynamic>`.\n    -   They must have a `factory YourArguments.fromMap(Map<String, dynamic> map)` constructor to create an instance from a map. This is used by the routing system to reconstruct the arguments.\n\n## 3. Example\n\n```dart\n// lib/auth/views/verify_email/verify_email_arguments.dart\n\nimport 'package:{project_name}/routing/abstracts/view_arguments.dart';\n\nclass VerifyEmailArguments extends ViewArguments {\n  VerifyEmailArguments({\n    required this.email,\n    required this.password,\n  });\n\n  final String email;\n  final String password;\n\n  @override\n  Map<String, dynamic> toMap() => {\n        'email': email,\n        'password': password,\n      };\n\n  factory VerifyEmailArguments.fromMap(Map<String, dynamic> map) => VerifyEmailArguments(\n        email: map['email'] as String,\n        password: map['password'] as String,\n      );\n}\n```\n",
    "keyword": "flutter-con-view-arguments;"
  }
,
  {
    "name": "flutter-con-views",
    "text": "# Views\n\nViews are the UI-facing components of a feature screen. They are responsible for rendering the UI and delegating user interactions to a `ViewModel`.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/views/<screen_name>/<screen_name>_view.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_view.dart`. The class name is the `PascalCase` version of the file name (e.g., `auth_view.dart` contains `AuthView`).\n\n**Example:** `lib/auth/views/auth/auth_view.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Views are always `StatelessWidget`. All state and logic are handled by the `ViewModel`.\n-   **ViewModel Connection**: The `View` connects to its corresponding `ViewModel` using the `ViewModelBuilder` widget from the `veto` package.\n-   **ViewModel Instantiation**: The `ViewModel` is provided to the `ViewModelBuilder` via its static `locate` getter, which uses `GetIt` for service location.\n    ```dart\n    ViewModelBuilder<AuthViewModel>(\n      viewModelBuilder: () => AuthViewModel.locate,\n      builder: (context, model, isInitialised, child) {\n        // ... build UI using `model`\n      },\n    )\n    ```\n-   **UI Construction**:\n    -   The root widget is typically a `TScaffold`, which provides a consistent screen layout.\n    -   The UI is built reactively based on the `ViewModel`'s state, which is exposed through `ValueListenable`s (like `Informer`). `ValueListenableBuilder` (and its variants `...X2`, `...X3`, etc.) are used to listen to these state changes and rebuild parts of the UI.\n    -   Widgets are composed from the project's UI library (`lib/uiux/widgets/`), which are often prefixed with `T`, and from the `shadcn_ui` package.\n    -   **IMPORTANT**: Always prefer `shadcn_ui` widgets over Flutter's built-in widgets when available:\n        -   Use `ShadButton` instead of `ElevatedButton`/`TextButton`\n        -   Use `ShadDatePicker` or `ShadCalendar` with `ShadPopover` instead of `showDatePicker`\n        -   Use `ShadDialog` instead of `showDialog` where appropriate\n        -   Use `ShadIconButton` for icon buttons\n    -   For date/time selection in task planning features, restrict selection to today and tomorrow only using `selectableDayPredicate`\n-   **Routing**:\n    -   Views that represent a screen have a `static const String path` property that defines their route path for `go_router`.\n-   **Arguments**:\n    -   If a `View` requires data to be passed to it during navigation, it will have a constructor that accepts an `arguments` parameter (e.g., `final VerifyEmailArguments? arguments;`). This is then passed to the `ViewModelBuilder`'s `argumentBuilder`.\n\n## 3. Example\n\n```dart\n// lib/auth/views/verify_email/verify_email_view.dart\n\nimport 'package:{project_name}/uiux/widgets/t_scaffold.dart';\nimport 'package:flutter/material.dart';\nimport 'package:veto/data/models/base_view_model.dart';\nimport 'verify_email_arguments.dart';\nimport 'verify_email_view_model.dart';\n\nclass VerifyEmailView extends StatelessWidget {\n  const VerifyEmailView({\n    super.key,\n    this.arguments,\n  });\n\n  final VerifyEmailArguments? arguments;\n\n  static const String path = 'verify-email';\n\n  @override\n  Widget build(BuildContext context) {\n    return ViewModelBuilder<VerifyEmailViewModel>(\n      argumentBuilder: () => arguments,\n      builder: (context, model, isInitialised, child) {\n        if (!isInitialised) return const SizedBox.shrink();\n\n        return TScaffold(\n          // ... UI implementation using `model`\n        );\n      },\n      viewModelBuilder: () => VerifyEmailViewModel.locate,\n    );\n  }\n}\n```\n",
    "keyword": "flutter-con-views;"
  }
,
  {
    "name": "flutter-con-extensions",
    "text": "# Extensions\n\nExtensions are used to add new functionality to existing classes without modifying their source code. They are a powerful way to add utility and helper methods to both core Dart types and custom classes.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/extensions/<class_name>_extension.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_extension.dart`. The extension itself is usually named `<ClassName>Extension`.\n\n**Example:** `lib/data/extensions/string_extension.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `extension` syntax is used.\n    ```dart\n    extension StringExtension on String {\n      // ... methods\n    }\n    ```\n-   **Purpose**:\n    -   **Utility Methods**: Add convenient helper methods to core types like `String`, `DateTime`, `List`, and `Widget`. This helps to create a fluent and readable API.\n    -   **Domain-Specific Logic**: Encapsulate logic related to a specific type in a clean, reusable way. For example, `AnimationExtension` adds animation methods directly to the `Widget` class.\n-   **Clarity**: Extension methods should be well-named and have a clear, single purpose to avoid polluting the namespace of the extended class.\n-   **Statelessness**: Extension methods should be pure functions that operate on the instance of the class they are extending (`this`). They cannot store their own state.\n\n## 3. Example\n\n```dart\n// lib/data/extensions/string_extension.dart\n\nextension StringExtension on String {\n  String get withPeriod {\n    if (isEmpty) return '';\n    return endsWith('.') ? this : '${trim()}.';\n  }\n\n  String capitalize({bool forceLowercase = false}) {\n    if (isEmpty) {\n      return '';\n    }\n    return forceLowercase\n        ? '${this[0].toUpperCase()}${substring(1).toLowerCase()}'\n        : '${this[0].toUpperCase()}${substring(1)}';\n  }\n\n  String? get nullIfEmpty => trim().isEmpty ? null : this;\n}\n```",
    "keyword": "flutter-con-extensions;"
  }
,
  {
    "name": "flutter-con-constants",
    "text": "# Constants\n\nConstants files are used to store compile-time constant values that are used throughout the application. Centralizing constants helps avoid magic numbers/strings and makes maintenance easier.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/constants/<constants_name>.dart`\n-   **Naming**: The file is typically prefixed with `k_` (for \"konstant\"), e.g., `k_durations.dart`.\n\n**Example:** `lib/data/constants/k_durations.dart`\n\n## 2. Structure and Conventions\n\n-   **Declaration**: All variables in a constants file must be declared as `const`.\n-   **Top-Level**: Constants are defined as top-level variables within the file, not inside a class.\n-   **Purpose**: They are used for values that will not change at runtime, such as:\n    -   Animation durations (`kDurationsAnimation`)\n    -   JSON keys (`kKeysUserId`)\n    -   Default values or limits (`kLimitsMinUsernameLength`)\n    -   Asset paths (`kPngsDoveOfPeace`)\n-   **Organization**: Constants are grouped into separate files based on their domain (e.g., `k_durations.dart`, `k_keys.dart`).\n\n## 3. Example\n\n```dart\n// lib/data/constants/k_durations.dart\n\nconst kDurationsAnimationX0p5 = Duration(milliseconds: 113);\nconst kDurationsAnimation = Duration(milliseconds: 225);\nconst kDurationsAnimationX2 = Duration(milliseconds: 450);\nconst kDurationsHover = Duration(milliseconds: 50);\nconst kDurationsTimeOut = Duration(seconds: 10);\n```",
    "keyword": "flutter-con-constants;"
  }
,
  {
    "name": "flutter-con-dtos",
    "text": "# DTOs (Data Transfer Objects)\n\nDTOs are classes that model the structure of data being transferred between the application and a remote source, such as a Supabase database table or a REST API endpoint. They are responsible for serialization and deserialization.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/dtos/<dto_name>_dto.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_dto.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/auth/dtos/user_profile_dto.dart`\n\n## 2. Structure and Conventions\n\n-   **Serialization**:\n    -   DTO classes are annotated with `@JsonSerializable()`.\n    -   This requires a corresponding `part '<dto_name>_dto.g.dart';` directive. The `.g.dart` file is generated by `build_runner`.\n    -   `fieldRename: FieldRename.snake` is often used to automatically convert Dart's `camelCase` fields to `snake_case` for JSON keys, which is common in databases.\n-   **Base Class/Interface**: DTOs that map to Supabase tables should implement the `SupabaseDto` abstract class, which enforces the presence of `id`, `createdAt`, and `updatedAt` fields.\n-   **Immutability**: All properties of a DTO should be `final`.\n-   **Constructors and Factories**:\n    -   A `const` constructor is used to create instances.\n    -   **IMPORTANT**: All fields should be `required` in the constructor, even nullable fields. This ensures explicit handling of null values.\n    -   A `factory YourDto.fromJson(Map<String, dynamic> json)` is required for `json_serializable` and is used to create an instance from a JSON map. It delegates to the generated `_$YourDtoFromJson` function.\n-   **`toJson()` Method**:\n    -   An instance method `Map<String, dynamic> toJson()` is required for `json_serializable` to convert the DTO instance into a JSON map. It delegates to the generated `_$YourDtoToJson` function.\n-   **`copyWith()` Method**:\n    -   A `copyWith` method is included to allow for the creation of a new, modified instance from an existing one, which is useful for immutability.\n    -   For nullable fields that need to be explicitly set to null, use a boolean `force` parameter pattern (e.g., `bool forceFieldName = false`).\n    -   Example: `fieldName: forceFieldName ? fieldName : fieldName ?? this.fieldName`\n\n## 3. Example\n\n```dart\n// lib/auth/dtos/user_profile_dto.dart\n\nimport 'package:{project_name}/core/dto/supabase_dto.dart';\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'user_profile_dto.g.dart';\n\n@JsonSerializable()\nclass UserProfileDto implements SupabaseDto {\n  const UserProfileDto({\n    required this.id,\n    required this.updatedAt,\n    required this.createdAt,\n    required this.username, // nullable but still required\n    // ... other final properties\n  });\n\n  @override\n  final String id;\n  @override\n  final DateTime updatedAt;\n  @override\n  final DateTime createdAt;\n  final String? username;\n\n  // Serialization methods\n  factory UserProfileDto.fromJson(Map<String, dynamic> json) => _$UserProfileDtoFromJson(json);\n  @override\n  Map<String, dynamic> toJson() => _$UserProfileDtoToJson(this);\n\n  // copyWith method\n  UserProfileDto copyWith({\n    String? id,\n    DateTime? updatedAt,\n    DateTime? createdAt,\n    String? username,\n    bool forceUsername = false, // force pattern for nullable fields\n  }) {\n    return UserProfileDto(\n      id: id ?? this.id,\n      updatedAt: updatedAt ?? this.updatedAt,\n      createdAt: createdAt ?? this.createdAt,\n      username: forceUsername ? username : username ?? this.username,\n    );\n  }\n}\n```\n",
    "keyword": "flutter-con-dtos;"
  }
,
  {
    "name": "flutter-con-enums",
    "text": "# Enums\n\nEnums are used to represent a fixed number of constant values, such as states, types, or modes.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/enums/<enum_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The `enum` name itself is `PascalCase`.\n\n**Example:** `lib/auth/enums/auth_view_mode.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `enum` syntax is used.\n-   **Helper Getters**: Enums often include helper getters to make checking for a specific value more readable and less error-prone.\n    ```dart\n    enum AuthViewMode {\n      login,\n      register;\n\n      bool get isLogin => this == AuthViewMode.login;\n      bool get isRegister => this == AuthViewMode.register;\n    }\n    ```\n-   **Default Value**: If an enum has a logical default state, a `static const` field named `defaultValue` is often provided.\n    ```dart\n    enum AuthViewMode {\n      login,\n      register;\n\n      static const defaultValue = AuthViewMode.login;\n    }\n    ```\n-   **Associated Data**: When an enum value needs to be associated with more complex data (like a display name or an icon), getters are used to provide this information.\n\n## 3. Example\n\n```dart\n// lib/auth/enums/auth_view_mode.dart\n\nenum AuthViewMode {\n  login,\n  register,\n  forgotPassword;\n\n  // Default value\n  static const defaultValue = AuthViewMode.login;\n\n  // Helper getters\n  bool get isLogin => this == AuthViewMode.login;\n  bool get isRegister => this == AuthViewMode.register;\n  bool get isForgotPassword => this == AuthViewMode.forgotPassword;\n}\n```",
    "keyword": "flutter-con-enums;"
  }
,
  {
    "name": "flutter-con-annotations",
    "text": "# Annotations\n\nAnnotations are a form of metadata that can be added to your code. They don't affect the execution of the code itself but provide valuable information to developers or tools.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/state/annotations/`\n-   **Naming**: Files are named in `snake_case`. The annotation class name is `PascalCase`.\n\n**Example:** `lib/state/annotations/can_throw.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: An annotation is a `const` class. It is good practice to also annotate it with `@immutable`.\n-   **Constructor**: The constructor must be `const`.\n-   **Purpose**: They serve as documentation and hints about the code's behavior or intended use.\n    -   `@canThrow`: Marks a method that is expected to throw exceptions, signaling to the caller that they need to implement `try-catch` handling.\n    -   `@DisposeMe`: Indicates that an instance of a class should be disposed of when it's no longer needed.\n    -   `@DoNotChangeOrder`: Warns that the order of values in an `enum` or fields in a class is significant and should not be altered.\n-   **Usage**: They are used by prefixing a class, method, or property declaration with `@YourAnnotation()`.\n\n## 3. Example\n\n```dart\n// lib/state/annotations/can_throw.dart\n\nimport 'package:flutter/foundation.dart';\n\n/// A constant instance of [CanThrow] for convenient use.\nconst canThrow = CanThrow._();\n\n/// An annotation indicating that a method can throw an exception.\n@immutable\nclass CanThrow {\n  const CanThrow._();\n}\n```\n\n**Usage Example:**\n\n```dart\n@canThrow\nvoid riskyOperation() {\n  throw Exception('Something went wrong');\n}\n```",
    "keyword": "flutter-con-annotations;"
  }
,
  {
    "name": "flutter-con-routers",
    "text": "# Routers\n\nRouters provide a structured and convenient way to handle navigation for a specific feature area of the application. They are an abstraction on top of `go_router`.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/routers/<feature>_router.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_router.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/home/routers/home_router.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Router classes extend `BaseNavigation` from `lib/routing/abstracts/base_navigation.dart`.\n-   **Dependency Injection**: Routers are registered with `GetIt` as factories and provide a static `locate` getter and `registerFactory` method.\n-   **Core Properties**:\n    -   `root`: A getter that specifies the root path for this feature's navigation stack (e.g., `'/home'`).\n    -   `navigationTab`: A getter that associates the router with a specific tab in the main shell navigation, if applicable.\n-   **Navigation Methods**:\n    -   The class provides strongly-typed methods for navigating to the screens within its feature (e.g., `goHomeView()`, `pushSettingsView()`).\n    -   These methods handle the construction of the route path and the packaging of `ViewArguments` into the `extra` parameter for `go_router`.\n    -   They use the `go`, `push`, and `pushReplacement` methods from the `BaseNavigation` class.\n-   **Route Definitions**: The actual `GoRoute` definitions are centralized in `lib/routing/services/base_router_service.dart`. The feature-specific router classes are primarily for providing a clean, type-safe API for triggering navigation.\n\n## 3. Example\n\n```dart\n// lib/home/routers/home_router.dart\n\nimport 'package:{project_name}/home/views/home/home_view.dart';\nimport 'package:{project_name}/routing/abstracts/base_navigation.dart';\n// ... other imports\n\nclass HomeRouter extends BaseNavigation {\n  // 1. GetIt Registration\n  static HomeRouter get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(HomeRouter.new);\n\n  // 2. Core Properties\n  @override\n  NavigationTab? get navigationTab => NavigationTab.home;\n\n  @override\n  String get root => HomeView.path.asRootPath;\n\n  // 3. Navigation Methods\n  void goHomeView({\n    StatefulNavigationShell? statefulNavigationShell,\n  }) {\n    if (statefulNavigationShell != null) {\n      goBranch(statefulNavigationShell: statefulNavigationShell);\n    } else {\n      go(location: root);\n    }\n  }\n\n  void pushSettingsView() {\n    push(\n      location: '$root/${SettingsView.path}',\n      extra: [\n        SettingsViewArguments(),\n      ],\n    );\n  }\n}\n```\n",
    "keyword": "flutter-con-routers;"
  }
,
  {
    "name": "flutter-con-abstracts",
    "text": "# Abstracts\n\nAbstract classes and mixins are used to define contracts, interfaces, or shared structures that other classes must implement or can use. They are fundamental to creating a consistent and maintainable architecture.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/abstracts/<abstract_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The abstract class or mixin name is `PascalCase`.\n\n**Example:** `lib/data/abstracts/has_id.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: They are defined using the `abstract class` or `mixin` keywords.\n-   **Purpose**:\n    -   **Interface/Contract**: An `abstract class` can define a set of methods and properties that concrete classes must implement. This enforces a common API. For example, `SupabaseDto` requires all DTOs to have an `id` and a `toJson()` method.\n    -   **Shared Structure**: An `abstract class` can also provide a partial implementation that subclasses can inherit and extend.\n    -   **Shared Behavior**: A `mixin` can provide a set of methods and properties that can be added to a class without inheritance.\n-   **Abstract Methods**: Methods without a body are declared, forcing the implementing/extending class to provide the implementation.\n\n## 3. Examples\n\n### Abstract Class as an Interface\n\n```dart\n// lib/core/dto/supabase_dto.dart\n\nabstract class SupabaseDto {\n  /// The unique identifier for the DTO.\n  String get id;\n\n  /// Converts this DTO instance into a JSON map.\n  Map<String, dynamic> toJson();\n\n  DateTime get createdAt;\n  DateTime get updatedAt;\n}\n```\n\n### Abstract Class as a Base\n\n```dart\n// lib/state/abstracts/initialisable.dart\n\nabstract class Initialisable {\n  Initialisable() {\n    initialise();\n  }\n\n  var _isInitialised = false;\n  Future get isReady => _isReady.future;\n\n  @mustCallSuper\n  void initialise() => markAsReady();\n  \n  // ... other implemented methods\n}\n```",
    "keyword": "flutter-con-abstracts;"
  }
,
  {
    "name": "flutter-con-models",
    "text": "# Models\n\nModels are plain Dart classes that represent data structures used within the application's business logic. They differ from DTOs in that they are not necessarily tied to a remote data source and are often used for UI state or internal logic.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/models/<model_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The class name is `PascalCase`.\n\n**Example:** `lib/data/models/sync_config.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: Models are typically simple Dart classes.\n-   **Immutability**: Properties are often `final` to encourage immutability, and a `copyWith` method may be provided.\n-   **Purpose**: They can serve various purposes:\n    -   **Configuration**: Holding configuration data (e.g., `SyncConfig`).\n    -   **UI State**: Representing a piece of UI state that is more complex than a primitive type.\n    -   **Logic Grouping**: Grouping related data and functions (e.g., `CRUD` model holds a set of callbacks).\n-   **Serialization**: Unlike DTOs, models are generally not annotated for JSON serialization unless they need to be persisted locally or sent over the network in a non-database context.\n\n## 3. Example\n\n```dart\n// lib/data/models/sync_config.dart\n\n/// Configuration for controlling sync behavior and direction.\nclass SyncConfig {\n  /// Creates a new configuration instance.\n  const SyncConfig({\n    this.syncFromRemote = false,\n    this.syncToRemote = true,\n  });\n\n  final bool syncFromRemote;\n  final bool syncToRemote;\n\n  /// Creates a copy of this configuration with optional overrides.\n  SyncConfig copyWith({\n    bool? syncFromRemote,\n    bool? syncToRemote,\n  }) =>\n      SyncConfig(\n        syncFromRemote: syncFromRemote ?? this.syncFromRemote,\n        syncToRemote: syncToRemote ?? this.syncToRemote,\n      );\n}\n```",
    "keyword": "flutter-con-models;"
  }
,
  {
    "name": "flutter-con-view-models",
    "text": "# View Models\n\nView Models manage the state and business logic for a specific `View`. They orchestrate data flow between services and the UI.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/views/<screen_name>/<screen_name>_view_model.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_view_model.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/auth/views/auth/auth_view_model.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: ViewModels extend `BaseViewModel` from the `veto` package. If they need to accept navigation arguments, they are typed, e.g., `BaseViewModel<MyViewArguments>`.\n-   **Mixins**: They commonly use mixins like `Loglytics` for logging and `BusyServiceManagement` for handling loading states.\n-   **Dependency Injection**:\n    -   ViewModels are registered with `GetIt` as factories.\n    -   They must have a static `locate` getter and a static `registerFactory` method.\n    -   Dependencies (like services and routers) are retrieved within the ViewModel using their respective `.locate` getters.\n    ```dart\n    class AuthViewModel extends BaseViewModel with Loglytics {\n      static AuthViewModel get locate => GetIt.I.get();\n      static void registerFactory() => GetIt.I.registerFactory(AuthViewModel.new);\n\n      final _toastService = ToastService.locate;\n      // ...\n    }\n    ```\n-   **State Management**:\n    -   State is managed using `Informer` objects (from the `informers` package). An `Informer` is a `ValueNotifier`.\n    -   State is exposed to the `View` as a `ValueListenable<T>` via a getter.\n    ```dart\n    final _authViewMode = Informer<AuthViewMode>(AuthViewMode.defaultValue);\n    ValueListenable<AuthViewMode> get authViewMode => _authViewMode;\n    ```\n-   **Lifecycle**:\n    -   `initialise()`: This method is overridden to perform setup logic, like adding listeners or fetching initial data.\n    -   `dispose()`: This method is overridden to clean up resources, such as canceling subscriptions or disposing controllers and `Informer`s.\n-   **Business Logic**:\n    -   Public methods contain the logic for handling user interactions from the `View` (e.g., `onLoginPressed`).\n    -   Asynchronous operations that interact with services return a `Future<TurboResponse>`. The ViewModel handles the success and failure cases of the response, often showing a toast or dialog.\n    -   A `Mutex` is often used to prevent concurrent execution of critical asynchronous operations like login or registration.\n-   **Localization**:\n    -   Always use `gStrings` for user-facing text in toasts, dialogs, and error messages.\n    -   Import `package:{project_name}/l10n/globals/g_strings.dart` to access localized strings.\n    -   Example: `_toastService.showToast(context: context, title: gStrings.taskDeletedSuccessfully);`\n\n## 3. Example\n\n```dart\n// lib/auth/views/auth/auth_view_model.dart\n\nclass AuthViewModel extends BaseViewModel with Loglytics, BusyServiceManagement {\n  // 1. GetIt Locator and Registration\n  static AuthViewModel get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(AuthViewModel.new);\n\n  // 2. Dependencies\n  final _toastService = ToastService.locate;\n  final _emailService = EmailService.locate;\n  // ...\n\n  // 3. Lifecycle\n  @override\n  Future<void> initialise() async {\n    _authViewMode.addListener(_onAuthViewModeChanged);\n    super.initialise();\n  }\n\n  @override\n  void dispose() {\n    _authViewMode.removeListener(_onAuthViewModeChanged);\n    super.dispose();\n  }\n\n  // 4. State Management\n  final _authViewMode = Informer<AuthViewMode>(AuthViewMode.defaultValue);\n  ValueListenable<AuthViewMode> get authViewMode => _authViewMode;\n\n  // 5. Business Logic\n  Future<void> onLoginPressed({\n    required AuthViewMode authViewMode,\n    required BuildContext context,\n  }) async {\n    // ... logic to call services and handle TurboResponse\n  }\n}\n```\n",
    "keyword": "flutter-con-view-models;"
  }
,
  {
    "name": "flutter-con-widgets",
    "text": "# Widgets\n\nWidgets are reusable UI components that can be used across different views in the application.\n\n## 1. File Naming and Location\n\n-   **Location**: Widgets are typically located in a `widgets` directory within a feature folder (`lib/<feature>/widgets/`) or in a shared UI folder (`lib/uiux/widgets/`).\n-   **Naming**:\n    -   Files are named in `snake_case`.\n    -   A common convention is to prefix custom, project-specific widgets with `t_` (e.g., `t_button.dart`, `t_scaffold.dart`). This distinguishes them from standard Flutter or third-party widgets.\n\n**Examples:**\n-   `lib/uiux/widgets/buttons/t_button.dart`\n-   `lib/auth/widgets/logout_button.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Most reusable widgets are `StatelessWidget`s. `StatefulWidget`s are only used when the widget needs to manage its own internal, ephemeral state, such as animations or temporary user input.\n-   **Self-Contained**: Widgets should be self-contained and not depend on a specific `ViewModel`. They receive all necessary data and callbacks through their constructor parameters.\n-   **Styling and Theming**:\n    -   Widgets should use the project's centralized theme and sizing system for consistent styling. This is accessed via the `BuildContext` extension methods.\n    -   **Colors**: `context.colors.primary`, `context.colors.background` (Note: `context.colors` uses properties like `icon`, `background`, `border`, etc., not `foreground`)\n    -   **Text Styles**: `context.texts.h1`, `context.texts.p`\n    -   **Sizing**: `TSizes.appPadding` (constants), `context.sizes.width` (responsive)\n-   **UI Component Library**: \n    -   **ALWAYS** use `shadcn_ui` package widgets when available (e.g., `ShadButton`, `ShadCalendar`, `ShadPopover`, `ShadDatePicker`)\n    -   When implementing date/time pickers, use `ShadDatePicker` or `ShadCalendar` with `ShadPopover` instead of Flutter's built-in `showDatePicker`\n    -   Reference local packages at `flutter-packages` for package documentation when needed (these are symlinks to the local git repos - all important packages are included here - ask for any missing packages if needed)\n-   **Localization**:\n    -   Use `gStrings` for all user-facing text (e.g., `gStrings.today`, `gStrings.tomorrow`)\n    -   Add new strings to ARB files (`lib/l10n/config/intl_en.arb` and `intl_nl.arb`)\n    -   **NEVER** run build commands to generate localization files - the project has a plugin that generates them automatically\n-   **Date Restrictions**: When implementing date selection for task planning, restrict selection to today and tomorrow only\n-   **Customization**: Widgets are designed to be customizable through constructor parameters, allowing them to be adapted for different use cases.\n    -   **Text Parameters**: Pass user-facing text (titles, button labels, etc.) as String parameters instead of hardcoding them in the widget\n    -   **Spacing**: Use `TGap()` for standard spacing instead of `SizedBox(height: TSizes.appPadding)`\n-   **Responsiveness**: Reusable widgets should be designed to work well on different screen sizes.\n-   **Sheets and Dialogs**:\n    -   When creating custom sheets, extend `ShadSheet` directly instead of returning it from `build()`\n    -   Separate the sheet structure from its content by using a private content widget\n\n## 3. Example\n\n```dart\n// lib/uiux/widgets/t_badge.dart\n\nimport 'package:{project_name}/uiux/extensions/color_extension.dart';\nimport 'package:flutter/widgets.dart';\nimport 'package:shadcn_ui/shadcn_ui.dart';\n\nclass TBadge extends StatelessWidget {\n  const TBadge({\n    super.key,\n    this.text,\n    this.iconData,\n    required this.color,\n    // ... other parameters\n  });\n\n  final String? text;\n  final IconData? iconData;\n  final Color color;\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // Using theme extensions for consistent styling\n    final backgroundColor = color.badgeBackground();\n    final foregroundColor = color.badgeForeground;\n    final borderColor = color.badgeBorder();\n\n    return ShadBadge(\n      // ... implementation\n    );\n  }\n}\n```\n",
    "keyword": "flutter-con-widgets;"
  }
,
  {
    "name": "flutter-con-mixins",
    "text": "# Mixins\n\nMixins are used to share a piece of reusable code and functionality across multiple classes, most commonly `ViewModel`s.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/mixins/<mixin_name>.dart`\n-   **Naming**: Files are named in `snake_case`. The `mixin` name is `PascalCase`.\n\n**Example:** `lib/auth/mixins/logout_management.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `mixin` syntax is used.\n-   **Target Class**: Mixins often have an `on` clause to specify the type of class they can be used with (e.g., `mixin LogoutManagement on BaseViewModel`). This allows the mixin to access members of that class.\n-   **Functionality**: They encapsulate a specific, reusable piece of logic. For instance, `LogoutManagement` provides a ready-to-use `onLogoutPressed` method that can be called from any `ViewModel` that uses it.\n-   **Dependencies**: Mixins can locate and use services via `GetIt` just like `ViewModel`s or other classes, making them self-contained units of functionality.\n-   **Usage**: To use a mixin, a class includes it with the `with` keyword (e.g., `class SettingsViewModel extends BaseViewModel with LogoutManagement`).\n\n## 3. Example\n\n```dart\n// lib/auth/mixins/logout_management.dart\n\nimport 'dart:async';\nimport 'package:{project_name}/auth/services/auth_service.dart';\nimport 'package:flutter/material.dart';\nimport 'package:veto/data/models/base_view_model.dart';\n\nmixin LogoutManagement on BaseViewModel {\n  // 1. Locate dependencies\n  AuthService get _authService => AuthService.locate;\n  DialogService get _dialogService => DialogService.locate;\n\n  // 2. Provide a reusable method\n  Future<void> onLogoutPressed({required BuildContext context}) async {\n    try {\n      final shouldLogout = await _dialogService.showOkCancelDialog(\n        title: 'Logout',\n        message: 'Are you sure you want to logout?',\n        context: context,\n      );\n\n      if (shouldLogout == true) {\n        // ... logout logic using _authService\n      }\n    } catch (error, stackTrace) {\n      // ... error handling\n    }\n  }\n}\n```\n",
    "keyword": "flutter-con-mixins;"
  }
,
  {
    "name": "flutter-con-services",
    "text": "# Services\n\nServices encapsulate specific business logic, interact with external APIs (like Supabase), or manage a shared resource. They are the backbone of the application's logic layer.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib/<feature>/services/<service_name>_service.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_service.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib/auth/services/auth_service.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: Services are plain Dart classes. They often use mixins like `Loglytics` for structured logging.\n-   **Dependency Injection**:\n    -   Services are registered with `GetIt` as either lazy singletons or factories.\n    -   They must provide a static `locate` getter and a static registration method (`registerLazySingleton` or `registerFactory`).\n    ```dart\n    class AuthService with Loglytics {\n      static AuthService get locate => GetIt.I.get();\n      static void registerLazySingleton() => GetIt.I.registerLazySingleton(AuthService.new);\n      // ...\n    }\n    ```\n-   **Asynchronous Operations**:\n    -   Methods that perform asynchronous work (e.g., API calls) must return a `Future<TurboResponse<T>>`.\n    -   The `TurboResponse` wrapper provides a standardized way to handle success and failure cases, including user-friendly titles and messages.\n-   **Error Handling**:\n    -   Services are responsible for catching exceptions from external sources (e.g., `PostgrestException` from Supabase) and converting them into a `TurboResponse.fail`.\n    -   Mixins like `SupabaseAuthExceptionHandler` are used to centralize the handling of common API exceptions.\n-   **State Management**:\n    -   Services can manage application-wide state. For example, `AuthService` manages the authentication stream.\n    -   State that needs to be observed by the UI is typically exposed through a `Stream` or `ValueListenable`.\n\n## 3. Example\n\n```dart\n// lib/auth/services/email_service.dart\n\nimport 'package:{project_name}/auth/mixins/supabase_auth_exception_handler.dart';\nimport 'package:get_it/get_it.dart';\nimport 'package:loglytics/loglytics.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:turbo_response/turbo_response.dart';\n\nclass EmailService with Loglytics, SupabaseAuthExceptionHandler {\n  // 1. GetIt Locator and Registration\n  static EmailService get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(EmailService.new);\n\n  // 2. Dependencies\n  Supabase get _supabase => Supabase.instance;\n\n  // 3. Public Method with TurboResponse and Error Handling\n  Future<TurboResponse<AuthResponse>> login({\n    required String email,\n    required String password,\n  }) async {\n    try {\n      log.info('Logging in...');\n      final authResponse = await _supabase.client.auth.signInWithPassword(\n        email: email,\n        password: password,\n      );\n      return TurboResponse.success(result: authResponse);\n    } on AuthException catch (error) {\n      log.warning('Unable to login user! Reason: ${error.message}');\n      return tryHandleSupabaseAuthException(\n        supabaseAuthException: error,\n        log: log,\n      );\n    } catch (error, stackTrace) {\n      // ... handle generic error\n      return TurboResponse.fail(...);\n    }\n  }\n}\n```\n",
    "keyword": "flutter-con-services;"
  }
,
  {
    "name": "ins-issue-conventions",
    "text": "- Each project area (e.g., `issues/engineering`, `marketing`) has its own folder inside `issues`.\n- Each area folder has a `000-backlog/` folder where initial issues are saved.\n- Each area folder has `{3-digit-number}-{issue-title}` issue folders (e.g., 001-user-auth).\n- Each issue folder has `{AREA-CODE}-{ISSUE-NR}-{ISSUE-TITLE}-{ISSUE-TYPE}` issue documents.\n   - `{AREA-CODE}` is a 2 to 4 letter uppercase code representing the project area.\n   - Story document example: AUTH-001-oauth-integration-story.md.\n   - Issue document example: AUTH-001-oauth-integration-issue.md.\n   - PR document example: AUTH-001-oauth-integration-pr.md.\n   - [...]\n- All documents related to a specific issue share the same prefix (e.g., AUTH-001-oauth-integration) and belong to the same issue folder.\n- The same issue number can have multiple document types (e.g., story, plan, bug, pr).\n",
    "keyword": "ins-issue-conventions;"
  }
,
  {
    "name": "never-try-different-approach",
    "text": "- ALWAYS stick to the original plan at all costs, NEVER try a different approach.\n",
    "keyword": "never-try-different-approach;"
  }
,
  {
    "name": "always-read-full-files",
    "text": "- When reading files ALWAYS read the FULL content. NEVER skim or skip parts.\n",
    "keyword": "always-read-full-files;"
  }
,
  {
    "name": "ins-development-principles",
    "text": "- Build reusable UI components; research existing ones before creating new\n- Keep widgets stateless and use primitive parameters for Storybook/Widgetbook\n- Place state only in services/view models (except for animations)\n- Apply Single Responsibility Principle (small classes, files, methods; one public class per file)\n- Maintain clear separation of concerns: UI, business logic, data\n- Use feature/concept-based folder structure\n- Centralize constants and strings (ARB for user-facing, constants for keys/values)\n- Use enums to represent types/variants\n- Avoid inline comments inside methods; write self-documenting code\n- Prefer reusability and consistency over ad-hoc solutions\n- Follow project conventions and industry best practices\n- Write unit tests only for business logic (no UI/integration tests, no mocks)\n- Keep project warning- and error-free\n- Validate work with tools (MCP, build commands, linting, analysis, Puppeteer, etc.)\n- Consider performance (algorithmic complexity, rendering, memory)\n- Apply security best practices in all features\n",
    "keyword": "ins-development-principles;"
  }
,
  {
    "name": "ins-scope-integrity",
    "text": "- Maintain absolute fidelity to the request without making assumptions\n- Avoid adding unrequested features\n- Avoid applying \"improvements\" that weren't explicitly asked for\n- Prevent AI over-engineering by forcing strong adherence to the actual scope of work\n- Do not assume, reinterpret, or improve anything unless explicitly told to.\n- No \u201cbetter\u201d solutions, no alternatives, no creative liberties, no unsolicited changes.\n",
    "keyword": "ins-scope-integrity;"
  }
,
  {
    "name": "ins-context-rot-awareness",
    "text": "- Apply context rot awareness.\n- Ensure every part of a document directly adds value to the end_goal. Avoid anything that doesn\u2019t.\n- Avoid using adverbs that don\u2019t add value.\n- Avoid repetition of concepts; do not restate them in the negative or duplicate wording.\n- Keep all information lean, relevant, and free of wasted tokens.\n",
    "keyword": "ins-context-rot-awareness;"
  }
,
  {
    "name": "note-taking-mode",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source} and {end_goal}.\n2. Await incoming information or updates from the user.\n3. Capture this information in {source}, keeping it clear, structured, and consistent with project conventions.\n4. Refine, reorganize, or expand {source} if needed to align with {end_goal}.\n5. Confirm alignment between {source} and {end_goal} after each update.\n6. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n   </mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n  </acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each new piece of information.\n- ALWAYS reassess and refine {source} to ensure it aligns with {end_goal}.\n- ALWAYS keep the last state of {source} and {end_goal} as the guiding point for all refinements.\n  </operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask questions.\n  </operating_constraints>\n\nrole: Strategic Note-Taking Expert\nexpertise: systematically capturing, refining, and structuring information to ensure alignment with goals\noperating_mode: Note-Taking Mode\n",
    "keyword": "note-taking-mode;"
  }
,
  {
    "name": "question-mode",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source} and {end_goal}.\n2. Determine next best set of {question_count} questions where the answers will provide the most value toward achieving the {end_goal}.\n3. Present the questions following {output_format} in {output_target}.\n4. Await the user's feedback and answers.\n5. Analyze, evaluate and understand the feedback and answers to the questions.\n6. Update {source} with the new information.\n7. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n   </mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n  </acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each answer.\n- ALWAYS reassess and adapt the next most valuable question set of {question_types} based on {source} and {end_goal}.\n- ALWAYS ask low-cognitive yes/no/multiple-choice questions only.\n- ALWAYS keep last state of {source} and the {end_goal} as the guiding point for all questions.\n- ALWAYS ask {question_count} question(s) at a time.\n- ALWAYS format your questions following {output_format}.\n- ALWAYS output your questions to {output_target}.\n  </operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask open-ended questions.\n  </operating_constraints>\n\n<question_types>\n- \ud83d\udd04 Simplify (remove complexity)\n- \u2753 Clarify (confirm meaning/assumptions)\n- \ud83d\udd27 Improve (optimize/enhance)\n- \u2795 Expand (add missing cases/features)\n- \u2796 Reduce (scope/MVP focus)\n- \u2696\ufe0f Prioritize (decide what matters most)\n- \ud83d\udea8 Risk (identify risks/edge cases)\n- \u2705 Validate (check feasibility/requirements met)\n  </question_types>\n\n<output_format>\n- [Question Number]. [Question Text]\n    - [Letter]. [Answer Option]\n    - [More options as needed]\n    - [...]\n    - [Letter]. Research the project\n    - [Letter]. Research the web\n    - [Letter]. Skip\n- [...]\n  </output_format>\n\nrole: Strategic Questioning Expert\nexpertise: systematically refining understanding and direction through structured questioning frameworks\noperating_mode: Most Valuable Question (MVQ) Mode\noutput_target: chat\n",
    "keyword": "question-mode;"
  }
,
  {
    "name": "ref-project-tree-map",
    "text": "# WARNING: This is a flutter example file, ask the user to update it to match their project\n---\n\u251c\u2500\u2500 analysis_options.yaml # Dart analysis rules and linter settings\n\u251c\u2500\u2500 android # Android-specific project files and configurations\n\u251c\u2500\u2500 assets # Project assets like images, fonts, and audio files\n\u251c\u2500\u2500 CHANGELOG.md # Project changelog documenting changes and updates\n\u251c\u2500\u2500 CLAUDE.md # Instructions for using Claude AI in the project\n\u251c\u2500\u2500 flutter-packages # Local packages used in the project exposed via symlinks\n    \u251c\u2500\u2500 flutter_native_splash # Package for native splash screens\n    \u251c\u2500\u2500 informers -> # Package for enhanced ValueNotifier state management\n    \u251c\u2500\u2500 shadcn_ui -> # Package for shadcn UI components\n    \u251c\u2500\u2500 supabase_flutter -> # Package for supabase integration with Flutter\n    \u251c\u2500\u2500 turbo_response -> # Package for handling API responses\n    \u2514\u2500\u2500 veto -> # Package for MVVM architecture and state management\n\u251c\u2500\u2500 ios # iOS-specific project files and configurations\n\u251c\u2500\u2500 issues # Local project issues and tasks\n\u251c\u2500\u2500 lib # Flutter application code\n\u251c\u2500\u2500 linux # Linux-specific project files and configurations\n\u251c\u2500\u2500 macos # macOS-specific project files and configurations\n\u251c\u2500\u2500 pubspec.lock # Locked versions of dependencies\n\u251c\u2500\u2500 pubspec.yaml # Project metadata and dependencies\n\u251c\u2500\u2500 README.md # Project overview and instructions\n\u251c\u2500\u2500 scripts # Automation and utility scripts\n\u251c\u2500\u2500 supabase # Supabase configuration and migration files\n\u251c\u2500\u2500 test # Tests for the application\n\u251c\u2500\u2500 web # Web-specific project files and configurations\n\u2514\u2500\u2500 windows # Windows-specific project files and configurations\n",
    "keyword": "ref-project-tree-map;"
  }
,
  {
    "name": "feedback-id",
    "text": "// TODO(GPT-AGENT):\n",
    "keyword": "feedback-id;"
  }
,
  {
    "name": "doc-front-matter",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n",
    "keyword": "doc-front-matter;"
  }
,
  {
    "name": "today-is-date",
    "text": "Today is {date}.\n",
    "keyword": "today-is-date;"
  }
,
  {
    "name": "read-feedback",
    "text": "I've added some {feedback_identifier} as feedback.\n- Use grep to find them all and process them.\n- After processing the feedback, scan the {instructions_folders} for any relevant files that may be missing or need updating regarding the files you just updated.\n- Create and/or update them with these project conventions based on the feedback you received to avoid making the same mistakes next time.\n\n---\n<feedback_identifier>\n{snippet name=\"feedback-id\"}\n</feedback_identifier>\n\ninstructions_folders: {argument name=\"instructions_folders\"}\n",
    "keyword": "read-feedback;"
  }
,
  {
    "name": "read-project-info",
    "text": "Get familiar with this project.\n- Understand the general project structure via @README.md\n- Understand where to find what via {project_tree_map}\n- Understand the different types of files via {project_crud_types}\n\n<project_tree_map>\n{snippet name=\"ref-project-tree-map\"}\n</project_tree_map>\n\n<project_crud_types>\n{snippet name=\"all-project-crud-types\">\n<project_crud_types>\n",
    "keyword": "read-project-info;"
  }
,
  {
    "name": "develop",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1.  Thoroughly analyze the {dev_plan} to understand all requirements, components, and the suggested approach.\n2.  Implement the required features by creating or modifying files.\n3.  Strictly follow all project conventions, principles, and architectural patterns.\n4.  For any UI work, use the project's design system and reusable components.\n5.  Ensure all code is clean, self-documenting, and free of warnings or errors.\n6.  After implementing a deliverable, confirm that all its acceptance criteria are met.\n7.  Continue until all deliverables in the {dev_plan} are completed and the {end_goal} is achieved.\n</mode_procedure>\n\n<acceptance_criteria>\n- All deliverables outlined in the {dev_plan} are fully implemented.\n- All acceptance criteria are met.\n- The final code adheres to all project conventions and principles.\n- {end_goal} is fully achieved.\n</acceptance_criteria>\n\n<operating_rules>\n{snippet name=\"ins-project-deep-research\"}\n{snippet name=\"ins-development-principles\"}\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"always-read-full-files\"}\n</operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {dev_plan}.\n- NEVER introduce new architectural patterns without explicit instruction.\n- NEVER write code that violates project conventions.\n</operating_constraints>\n\n<project_conventions>\n{snippet name=\"all-flutter-concepts\"}\n{snippet name=\"all-flutter-instructions\"}\n</project_conventions>\n\nrole: Senior Full-Stack Engineer\nexpertise: building high-quality, maintainable, and scalable applications by strictly following established conventions and development plans\noperating_mode: Development Mode\n\n---\ndev_plan: {argument name=\"dev_plan\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request: {argument name=\"user_request\"}\n",
    "keyword": "develop;"
  }
,
  {
    "name": "start-note-taking-mode",
    "text": "{snippet name=\"note-taking-mode\"}\n---\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "start-note-taking-mode;"
  }
,
  {
    "name": "start-question-mode",
    "text": "{snippet name=\"question-mode\"}\n---\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source\"} \nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "start-question-mode;"
  }
,
  {
    "name": "add-project-conventions",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Determine parts that can benefit from refinement based on project conventions.\n3. Present a numbered list of identified parts in the chat and ask the user to select and confirm which ones to refine by typing the numbers and (optionally) a path where to find the convention.\n4. Research the selected parts and conventions.\n5. Update {source} with the refined parts following {output_format}.\n6. Ask the user for feedback and repeat the steps until {end_goal} is satisfied.\n</mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n</acceptance_criteria>\n\n<operating_rules>\n{snippet name=\"ins-context-rot-awareness\"}\n{snippet name=\"ins-project-deep-research\"}\n{snippet name=\"ins-scope-integrity\"}\n</operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n</operating_constraints>\n\nrole: Convention Orchestration Specialist\nexpertise: systematically analyzing, refining, and enforcing document structures to ensure strict adherence to established conventions\noperating_mode: Convention Adherence Mode\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "add-project-conventions;"
  }
,
  {
    "name": "add-mermaid-diagram",
    "text": "Add a fitting mermaid diagram to {target} based on {source} to illustrate {end_goal}.\n- Analyze and understand the structure and relationships in {source}.\n- Reach 100% certainty about the perfect implementation.\n- Ask clarifying questions if needed to increase certainty.\n- Ensure the diagram is clear, accurate, and adheres to best practices for readability and maintainability.\n---\nsource: {argument name=\"source\"}\ntarget: {argument name=\"target\"}\nend_goal: {argument name=\"end_goal\"}\n",
    "keyword": "add-mermaid-diagram;"
  }
,
  {
    "name": "commit",
    "text": "Commit the current work following project conventions.  \nAlways show the exact commands being executed and their results.  \nFollow these steps in order:\n\n1. Run `git status` to review staged, modified, and untracked files.\n2. Run `git log --oneline -5` to check recent commit patterns.\n3. Prepare the commit message using the format:\n   - Start with `[PROJECTKEY{-ISSUENR (if applicable)}]` prefix\n   - Use imperative mood (e.g., \"Add\" not \"Added\")\n   - Keep first line under 50 characters\n   - No forbidden terms, signatures, or extra lines\n4. Update relevant {project_docs} before committing.\n5. Update relevant {release_docs} before committing.\n   - Do not use emojis\n   - Use simple english non-technical terms\n6. Stage files:\n   - If user specified: `git add <files>`\n   - If not specified: `git add -A`\n7. Commit with `git commit -m \"[PROJECTKEY{-ISSUENR (if applicable)}] Commit message\"`.\n8. Verify remote with `git remote -v` and branch with `git branch --show-current`.\n9. Push changes:\n   - If branch exists remotely: `git push`\n   - If new branch: `git push -u origin <branch>`\n10. Confirm push success. If on a feature branch, suggest creating a PR.\n11. If any step fails, show the exact error message, explain the issue, suggest a fix, and provide recovery steps.\n---\n<relevant_project_docs>\n{snippet name=\"all-living-docs\"}\n</relevant_project_docs>\n\n<relevant_release_docs>\n{snippet name=\"all-release-docs\"}\n</relevant_release_docs>\n",
    "keyword": "commit;"
  }
,
  {
    "name": "refine-essential-conditions",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"essential-conditions-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-essential-conditions;"
  }
,
  {
    "name": "refine-suggested-approach",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"suggested-approach-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-suggested-approach;"
  }
,
  {
    "name": "refine-acceptance-criteria",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"acceptance-criteria-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-acceptance-criteria;"
  }
,
  {
    "name": "refine-deliverables",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"deliverables-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-deliverables;"
  }
,
  {
    "name": "refine-states",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"state-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-states;"
  }
,
  {
    "name": "refine-initial-requirements",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"initial-requirements-block\"}\n</block>\n---\nuser_request:\n",
    "keyword": "refine-initial-requirements;"
  }
,
  {
    "name": "refine-components",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"components-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-components;"
  }
,
  {
    "name": "refine-effort-breakdown-estimates",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"effort-breakdown-estimates-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-effort-breakdown-estimates;"
  }
,
  {
    "name": "refine-ui-ux-specifications",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"ui-ux-specifications-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-ui-ux-specifications;"
  }
,
  {
    "name": "refine-security-rules",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"security-rules-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-security-rules;"
  }
,
  {
    "name": "refine-relevant-context",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"relevant-context-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-relevant-context;"
  }
,
  {
    "name": "refine-checkpoints",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"checkpoints-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-checkpoints;"
  }
,
  {
    "name": "refine-behaviours",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"behaviours-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-behaviours;"
  }
,
  {
    "name": "refine-requirement-flows",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"requirement-flows-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-requirement-flows;"
  }
,
  {
    "name": "refine-properties",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"properties-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-properties;"
  }
,
  {
    "name": "refine-block",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source_block\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "refine-block;"
  }
,
  {
    "name": "refine-analytics",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"analytics-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-analytics;"
  }
,
  {
    "name": "refine-issue",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source_doc\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "refine-issue;"
  }
,
  {
    "name": "refine-interactions",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"interactions-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-interactions;"
  }
,
  {
    "name": "refine-user-stories",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"user-stories-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-user-stories;"
  }
,
  {
    "name": "refine-title",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"title-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-title;"
  }
,
  {
    "name": "refine-end-goal",
    "text": "{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"end-goal-block\"}\n</block>\n---\nuser_request:",
    "keyword": "refine-end-goal;"
  }
,
  {
    "name": "create-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\ndoc_location: {argument name=\"doc_location\"}\nuser_request: {argument name=\"user_request\"}\n",
    "keyword": "create-doc;"
  }
,
  {
    "name": "create-meeting-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"meeting-template\"}\n</template>\n",
    "keyword": "create-meeting-doc;"
  }
,
  {
    "name": "create-questions-doc",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}, {questions_doc} and {end_goal}.\n2. Determine next best set of 5 questions where the answers will provide the most value toward achieving the {end_goal}.\n3. Present the questions following {output_format} in {questions_doc}.\n4. Await the user's feedback and answers.\n5. Analyze, evaluate and understand the feedback and answers to the questions.\n6. Update {source} with the new information.\n7. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n</mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n</acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each answer.\n- ALWAYS reassess and adapt the next most valuable question set of {question_types} based on {source} and {end_goal}.\n- ALWAYS ask low-cognitive yes/no/multiple-choice questions only.\n- ALWAYS keep last state of {source} and the {end_goal} as the guiding point for all questions.\n- ALWAYS ask {question_count} question(s) at a time.\n- ALWAYS format your questions following {output_format}.\n- ALWAYS output your questions to {questions_doc}.\n</operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask open-ended questions.\n</operating_constraints>\n\n<question_types>\n- \ud83d\udd04 Simplify (remove complexity)\n- \u2753 Clarify (confirm meaning/assumptions)\n- \ud83d\udd27 Improve (optimize/enhance)\n- \u2795 Expand (add missing cases/features)\n- \u2796 Reduce (scope/MVP focus)\n- \u2696\ufe0f Prioritize (decide what matters most)\n- \ud83d\udea8 Risk (identify risks/edge cases)\n- \u2705 Validate (check feasibility/requirements met)\n</question_types>\n\n<output_format>\n- [Question Number]. [Question Text]\n  - [ ] [Answer Option]\n  - [More options as needed]\n  - [...]\n  - [ ]. Research the project\n  - [ ]. Research the web\n  - [ ]. Skip\n- [...]\n</output_format>\n\nrole: Strategic Questioning Expert\nexpertise: systematically refining understanding and direction through structured questioning frameworks\noperating_mode: Most Valuable Question (MVQ) Mode\nquestion_count: {argument name=\"question_count\"}\nquestions_doc: living question document (ask path if unclear)\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request: \n",
    "keyword": "create-questions-doc;"
  }
,
  {
    "name": "create-research-doc",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Identify parts that can benefit from external research regarding best practices, approach and/or missing documentation.\n3. Create request prompts for each part where you ask an advanced AI agent for help using deep research methods to find the missing information.\n4. Create the {research_document} with all the prompts, including space for the answers and relevant metadata regarding the {source}.\n5. Ask the user to execute the prompts and update the document.\n6. Await the user's feedback and answers.\n7. Update {source} with the new information.\n</mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n</acceptance_criteria>\n\nrole: Research Orchestration Specialist\nexpertise: identifying knowledge gaps, generating precise research prompts, and integrating external findings into documents with strict adherence to conventions\noperating_mode: Convention Adherence Mode\nresearch_document: living research document (ask path if unclear)\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n",
    "keyword": "create-research-doc;"
  }
,
  {
    "name": "create-feedback",
    "text": "I have feedback about {subject}.\n- Create a highly detailed feedback document in {doc_location} based on {my_feedback}.\n- Aim the feedback at other agents to improve {subject}.\n- Make sure it is clear, actionable, and easy to understand.\n- Add context about our conversation if relevant.\n- Add a suggested solution if relevant.\n{snippet name=\"scope-integrity\"}\n---\nafter registering the feedback continue our conversation where we left off.\n---\nsubject: {argument name=\"subject\"}\ndoc_location: [PROJECT_ROOT]/{argument name=\"doc_location\"}\nmy_feedback: {argument name=\"my_feedback\"}\n",
    "keyword": "create-feedback;"
  }
,
  {
    "name": "create-event-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"event-template\"}\n</template>\n",
    "keyword": "create-event-doc;"
  }
,
  {
    "name": "create-sliced-issue",
    "text": "Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Determine a slice of work that can be developed within a single conversation, respecting token context window limitations.\n3. Create a detailed development plan for this slice of work in {plan_doc_location}. This plan should be actionable for another development agent.\n4. Update {source} to reference the new development plan, indicating which part of the work is now being addressed.\n5. Await user confirmation to proceed with the development as per the new plan.\n</mode_procedure>\n\n<acceptance_criteria>\n- A feasible slice of work is identified from {source}.\n- A comprehensive development plan is created at {plan_doc_location}.\n- {source} is updated to link to the new development plan.\n- {end_goal} is fully achieved.\n</acceptance_criteria>\n\nrole: Issue Slicing & Planning Specialist\nexpertise: analyzing requirements, breaking down complex tasks into manageable development slices, and creating actionable development plans\noperating_mode: Slice & Plan Mode\n\nsource: {argument name=\"source\"}\nplan_doc_location: {argument name=\"plan_doc_location\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:",
    "keyword": "create-sliced-issue;"
  }
,
  {
    "name": "create-issue-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"issue-template\"}\n</template>\n",
    "keyword": "create-issue-doc;"
  }
,
  {
    "name": "create-roadmap-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"roadmap-template\"}\n</template>\n",
    "keyword": "create-roadmap-doc;"
  }
,
  {
    "name": "create-milestone-doc",
    "text": "Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"milestone-template\"}\n</template>\n",
    "keyword": "create-milestone-doc;"
  }
,
  {
    "name": "issue-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> \ud83d\udca1 *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## \ud83c\udfaf End Goal\n> \ud83d\udca1 *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## \ud83d\udcdd Initial Requirements\n*What should the system/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## \ud83d\udcca Analytics\n> \ud83d\udca1 *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n    - [Event]\n        - Id: [event_id]\n        - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n        - Properties:\n            - [Property Name]: [Data Type] - [Description of the property]\n            - [More properties as needed]\n            - [...]\n    - [More events as needed]\n    - [...]\n\n## \ud83c\udfd7\ufe0f Components\n> \ud83d\udca1 *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## \ud83d\udea6 States\n> \ud83d\udca1 *What are the possible conditions or data a component can hold at any given time?*\n\n[A breakdown of a component's various states, categorized by where that state is stored or how it manifests.]\n\n- [Component]\n    - [State category e.g. UI, Memory, Local Device, Remote]\n        - [State]\n        - [More states as needed]\n        - [...]\n    - [More state categories as needed]\n    - [...]\n\n- [More components as needed]\n- [...]\n\n## \u26a1\ufe0f Interactions\n> \ud83d\udca1 *What triggers changes in a component, and how does data flow as a result?*\n\n[A mapping of interactions from actors, events, or parent components that affect a component, detailing the action, the resulting data flow, and any state changes it triggers.]\n\n- [Component]\n    - Interaction from [Actor: User | Event: System Notification | Parent: ContainerView]\n        - When [a specific action occurs, e.g., \"user taps the save button\"]\n            - Data Flow: [Description of what data is sent where, e.g., \"Form data is sent to the API client\"]\n            - Triggers State Change: [Description of the resulting state, e.g., \"Component's UI state becomes 'saving'\"]\n        - [More actions from this source]\n        - [...]\n    - [More interaction sources for this component]\n    - [...]\n\n- [More components]\n- [...]\n\n# \ud83d\udee0\ufe0f Behaviours\n> \ud83d\udca1 *Which states or events should the component act upon? How should it behave when nothing happens?*\n\n[How a component should act when a state is, or an event happens]\n\n- [Component]\n    - [State or event]\n        - Should [Behaviour]\n        - [More behaviours if needed]\n        - [...]\n    - [More states or events if needed]\n    - [...]\n        - [Sub-component]\n            - [More states or events if needed]\n            - [...]\n        - [More sub-components if needed]\n        - [...]\n\n- [More components if needed]\n- [...]\n\n## \ud83d\udee1\ufe0f Essential Conditions\n> \ud83d\udca1 *What should always go right? What can never go wrong? What should always be? What should never be?*\n\n[A set of fundamental measurable conditions that must always be met. These serve as direct input for unit and end-to-end tests.]\n\n- [Parent Item]\n    - [Essential condition]\n    - [More essential conditions if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n\n## \ud83d\udce6 Deliverables\n> \ud83d\udca1 *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## \ud83d\ude80 Checkpoints\n> \ud83d\udca1 *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n",
    "keyword": "issue-template;"
  }
,
  {
    "name": "event-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# \ud83d\udccb Event: [Event Title/Topic]\n> \ud83d\udca1 *What happened? What was it? Who participated?*\n\n[Describe / show the event]\n",
    "keyword": "event-template;"
  }
,
  {
    "name": "roadmap-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> \ud83d\udca1 *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## \ud83c\udfaf End Goal\n> \ud83d\udca1 *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## \ud83d\udcdd Initial Requirements\n*What should the system/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## \ud83c\udfd7\ufe0f Components\n> \ud83d\udca1 *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## \ud83d\ude80 Checkpoints\n> \ud83d\udca1 *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n",
    "keyword": "roadmap-template;"
  }
,
  {
    "name": "meeting-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# \ud83d\udccb Meeting Notes: [Title]\n> \ud83d\udca1 *What is this all about?*\n\n[One short paragraph describing the purpose of the meeting]\n\n## \ud83d\udc65 Attendees\n> \ud83d\udca1 *Who was there?*\n\n- [Name] (Role)\n- [More names if needed]\n- [...]\n\n## \ud83d\udd16 Summary\n> \ud83d\udca1 *What happened?*\n\n[One short paragraph with key outcomes, decisions, and next steps]\n\n## \u2705 Decisions\n> \ud83d\udca1 *What was decided?*\n\n- [Decision] \u2014 [Rationale] (Owner: [Name])\n- [More decisions if needed]\n- [...]\n\n## \u2753 Open Questions\n> \ud83d\udca1 *What needs to be answered?*\n\n- [Question] \u2014 [Context] (Owner: [Name], Due: [Date])\n- [More questions if needed]\n- [...]\n\n## \ud83d\udcdd Action Items\n> \ud83d\udca1 *What needs to be done?*\n- \n- [ ] [Task] (Owner: [Name], Due: [Date])\n- [More tasks if needed]\n- [...]\n\n## \u2795 Notes\n> \ud83d\udca1 *Anything else worth noting?*\n\n- [Additional context, technical/process/external factors]\n- [More notes if needed]\n- [...]\n",
    "keyword": "meeting-template;"
  }
,
  {
    "name": "dev-plan-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji and Descriptive Title]\n> \ud83d\udca1 *[Brief description of what this template is for and its primary purpose]*\n\n## \ud83c\udfaf End Goal\n> \ud83d\udca1 *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## \ud83d\udc64 User Stories\n> \ud83d\udca1 *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## \ud83d\udc64 User Stories\n> \ud83d\udca1 *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## \ud83d\udc64 User Stories\n> \ud83d\udca1 *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## \ud83d\udcdd Initial Requirements\n*What should the system/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## \ud83d\udcca Analytics\n> \ud83d\udca1 *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n    - [Event]\n        - Id: [event_id]\n        - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n        - Properties:\n            - [Property Name]: [Data Type] - [Description of the property]\n            - [More properties as needed]\n            - [...]\n    - [More events as needed]\n    - [...]\n\n## \ud83d\udd12 Security Rules\n> \ud83d\udca1 *What are the access control rules for data and infrastructure?*\n\n[A definition of security rules, policies, and configurations for different parts of the system, such as database access, API permissions, or infrastructure settings.]\n\n- [Parent Item]\n    - [Rule or Policy]\n        - [Condition or rule, e.g., \"Allowed if auth.uid == userId\"].\n    - [More rules or policies as needed]\n    - [...]\n- [More parent items as needed]\n- [...]\n\n## \ud83d\udce6 Deliverables\n> \ud83d\udca1 *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## \ud83d\udce6 Deliverables\n> \ud83d\udca1 *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## \u2705 Acceptance Criteria\n> \ud83d\udca1 *How do we confirm that an item is complete and correct?*\n\n[A list of specific, verifiable conditions that must be met for a requirement, component, or deliverable to be considered complete and accepted.]\n\n- [Parent Item]\n    - [Acceptance criterion]\n    - [More acceptance criteria if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n\n## \ud83c\udfa8 UI/UX Specifications\n> \ud83d\udca1 *How should something look, feel, and behave?*\n\n[Detailed visual and interactive specifications for components, especially where prototypes are insufficient. This includes notes on spacing, animations, and other nuanced UI/UX behaviors.]\n\n- [Parent Item]\n    - [UI/UX Behaviour]\n    - [More UI/UX Behaviours if needed]\n\n- [More items if needed]\n- [...]\n\n## \u270d\ufe0f Suggested Approach\n> \ud83d\udca1 *How should this be implemented?*\n\n[A high-level implementation plan presented as pseudo-code or a step-by-step guide. This should be based on existing project conventions and patterns, detailing class names, objects, and structures to guide the developer. It should be adaptable into actual code.]\n\n- [Plan Phase]\n    - [Details or pseudo-code as a step]\n    - [More details, steps or pseudo-code as needed]\n    - [...]\n\n- [More phases if needed]\n- [...]\n",
    "keyword": "dev-plan-template;"
  }
,
  {
    "name": "milestone-template",
    "text": "---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> \ud83d\udca1 *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## \ud83c\udfaf End Goal\n> \ud83d\udca1 *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## \ud83d\udcdd Initial Requirements\n*What should the system/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## \u27a1\ufe0f Requirements Flows\n> \ud83d\udca1 *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## \ud83c\udfd7\ufe0f Components\n> \ud83d\udca1 *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## \ud83d\udce6 Deliverables\n> \ud83d\udca1 *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## \ud83d\ude80 Checkpoints\n> \ud83d\udca1 *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\nqsqsq   read -r \"?Deploy to dev? [y/N] \" response\nif [[ \"$response\" =~ ^([yY][eE][sS]|[yY])$ ]]\nthen\n    firebase use dev\n    firebase deploy --only firestore:rules\nfis\n- [More checkpoints if needed]\n\n- [...]\n",
    "keyword": "milestone-template;"
  }
,
  {
    "name": "all-living-docs",
    "text": "- @README.md\n- @CHANGELOG.md\n",
    "keyword": "all-living-docs;"
  }
,
  {
    "name": "all-project-crud-types",
    "text": "- Views, ViewModels, Methods\n- Stateless Widgets, Stateful Widgets, ViewModel Widgets\n- UI States, In Memory States, Local Data States, Remote Data States\n- Routes, Routers\n- Fields, Constants, Enums, DTOs, Models\n- Forms, Form Fields\n- Extensions, Typedefs, Mixins, Abstract Classes\n- Services, APIs, Security Rules, RLS Policies\n- Edge Functions, Cloud Functions, API Calls\n- Analytics\n- Error Handling, Crash Reporting\n- Environment Variables, Configurations\n- Haptic Feedback, Animations, Notifications\n- User facing ARB UI text, User facing ARB messages\n- Themes, Fonts, Colors, Sizes, Assets\n",
    "keyword": "all-project-crud-types;"
  }
,
  {
    "name": "all-flutter-concepts",
    "text": "{snippet name=\"flutter-con-abstracts.md\"}\n{snippet name=\"flutter-con-annotations.md\"}\n{snippet name=\"flutter-con-constants.md\"}\n{snippet name=\"flutter-con-dtos.md\"}\n{snippet name=\"flutter-con-enums.md\"}\n{snippet name=\"flutter-con-exceptions.md\"}\n{snippet name=\"flutter-con-extensions.md\"}\n{snippet name=\"flutter-con-forms.md\"}\n{snippet name=\"flutter-con-globals.md\"}\n{snippet name=\"flutter-con-mixins.md\"}\n{snippet name=\"flutter-con-models.md\"}\n{snippet name=\"flutter-con-routers.md\"}\n{snippet name=\"flutter-con-services.md\"}\n{snippet name=\"flutter-con-typedefs.md\"}\n{snippet name=\"flutter-con-utils.md\"}\n{snippet name=\"flutter-con-view_arguments.md\"}\n{snippet name=\"flutter-con-view_models.md\"}\n{snippet name=\"flutter-con-views.md\"}\n",
    "keyword": "all-flutter-concepts;"
  }
,
  {
    "name": "all-flutter-instructions",
    "text": "- {snippet name=\"flutter-ins-crash-report-analytics.md\"}\n- {snippet name=\"flutter-ins-edge-functions-dtos.md\"}\n- {snippet name=\"flutter-ins-error-handling.md\"}\n- {snippet name=\"flutter-ins-flutter-busy-state.md\"}\n- {snippet name=\"flutter-ins-informer-box.md\"}\n- {snippet name=\"flutter-ins-informer-state.md\"}\n- {snippet name=\"flutter-ins-localization-pattern.md\"}\n- {snippet name=\"flutter-ins-mvvm-architecture.md\"}\n- {snippet name=\"flutter-ins-service-locator.md\"}\n- {snippet name=\"flutter-ins-service-state.md\"}\n- {snippet name=\"flutter-ins-supabase-comms.md\"}\n- {snippet name=\"flutter-ins-supabase-tables.md\"}\n- {snippet name=\"flutter-ins-turbo-response.md\"}\n- {snippet name=\"flutter-ins-utilities.md\"}\n",
    "keyword": "all-flutter-instructions;"
  }
,
  {
    "name": "all-release-docs",
    "text": "- @release_notes.json\n- @assets/md/changelog_nl.md\n- @assets/md/changelog_en.md\n",
    "keyword": "all-release-docs;"
  }

]
