[{"name":"(see <\/example-#1>)","text":"(see <\/example-#1>){cursor}","keyword":";see1"},{"name":"(see <\/example-#2>)","text":"(see <\/example-#2>){cursor}","keyword":";see2"},{"name":"(see <\/example-#3>)","text":"(see <\/example-#3>){cursor}","keyword":";see3"},{"name":"(see <\/example-#4>)","text":"(see <\/example-#4>){cursor}","keyword":";see4"},{"name":"(see <\/example-#5>)","text":"(see <\/example-#5>){cursor}","keyword":";see5"},{"name":"- [ ]","text":"- [ ] ","keyword":";-c"},{"name":"\/\/ TODO(GPT-AGENT): {cursor} | {date}","text":"\/\/ TODO(GPT-AGENT): {cursor} | {date}","keyword":";do"},{"name":"\/compact cp","text":"\/compact"},{"name":";--","text":"--------------------","keyword":";--"},{"name":";ai","text":"ai\n","keyword":";ai"},{"name":";bb","text":"Use your best judgement based on your system instructions, project specific rules and adhere to known best practices.","keyword":";bb"},{"name":";brian","text":"~\/Repos\/Workspaces\/brian-workspace\/","keyword":";brian"},{"name":";but","text":"BUT\n","keyword":";but"},{"name":";cc","text":"continue","keyword":";cc"},{"name":";ci","text":"<current_issue>\n{cursor}\n<\/current_issue>\n","keyword":";ci"},{"name":";codeblock","text":"```{argument name=\"language\"}\n{clipboard}\n```","keyword":";cb"},{"name":";continue","text":"claude --continue","keyword":";con"},{"name":";cr","text":"\/\/ TODO(CREATE-RULE): {cursor} | {date}","keyword":";cr"},{"name":";example","text":"<example>\n{clipboard}\n<\/example>\n","keyword":";example"},{"name":";finalthememode","text":"final {argument name=\"var\"} = (TThemeMode themeMode) => {clipboard};","keyword":";finalthememode"},{"name":";given","text":"GIVEN\n","keyword":";given"},{"name":";isolator","text":"import 'dart:async';\nimport 'dart:isolate';\nimport 'package:flutter\/foundation.dart';\nimport 'package:loglytics\/loglytics.dart';\n\n\/\/\/ A utility class that simplifies running computations in background with progress reporting.\n\/\/\/\n\/\/\/ The TIsolator provides a developer-friendly way to execute CPU-intensive operations\n\/\/\/ using Flutter's `compute` function, which automatically adapts to different platforms\n\/\/\/ (using isolates on native platforms and the main thread on web platforms).\n\/\/\/\n\/\/\/ Example:\n\/\/\/ ```dart\n\/\/\/ final isolator = TIsolator<int, String>();\n\/\/\/\n\/\/\/ \/\/ Run a computation in the background\n\/\/\/ final result = await isolator.run(\n\/\/\/   input: 42,\n\/\/\/   computation: (int number, sendProgress) {\n\/\/\/     \/\/ Heavy computation here\n\/\/\/     if (sendProgress != null) {\n\/\/\/       sendProgress(\"50% complete\");\n\/\/\/     }\n\/\/\/     return number.toString();\n\/\/\/   },\n\/\/\/   onProgress: (progress) {\n\/\/\/     print(\"Progress update: $progress\");\n\/\/\/   },\n\/\/\/ );\n\/\/\/ ```\nclass TIsolator<I, O> with Loglytics {\n  \/\/\/ Creates an Isolator for executing computations using Flutter's compute function.\n  \/\/\/\n  \/\/\/ The generic types define the input and output types:\n  \/\/\/ - `I`: The type of input data passed to the computation.\n  \/\/\/ - `O`: The type of output data returned from the computation.\n  TIsolator();\n\n  \/\/ üìç LOCATOR ------------------------------------------------------------------------------- \\\\\n\n  \/\/\/ Returns a singleton instance of TIsolator.\n  \/\/\/\n  \/\/\/ Use this method when you need a shared instance across the application.\n  static TIsolator<I, O> getInstance<I, O>() {\n    return _instances.putIfAbsent('${I.toString()}_${O.toString()}', () => TIsolator<I, O>())\n    as TIsolator<I, O>;\n  }\n\n  \/\/\/ Stores singleton instances of TIsolator by their type parameters.\n  static final Map<String, TIsolator> _instances = {};\n\n  \/\/ üé¨ INIT & DISPOSE ------------------------------------------------------------------------ \\\\\n\n  \/\/\/ Disposes all resources used by this isolator.\n  \/\/\/\n  \/\/\/ Call this method when the isolator is no longer needed to prevent memory leaks.\n  void dispose() {\n    cancelAll();\n    for (final controller in _progressControllers.values) {\n      controller.close();\n    }\n    _progressControllers.clear();\n  }\n\n  \/\/ üé© STATE --------------------------------------------------------------------------------- \\\\\n\n  \/\/\/ Tracks active computations to ensure proper cleanup.\n  final Map<String, Completer<void>> _activeComputations = {};\n\n  \/\/\/ Stream controllers for progress updates.\n  final Map<String, StreamController<dynamic>> _progressControllers = {};\n\n  \/\/ üõ† UTIL ---------------------------------------------------------------------------------- \\\\\n\n  \/\/\/ Generates a unique task ID if none is provided.\n  String _generateTaskId(String? debugLabel) {\n    return debugLabel ?? '${DateTime.now().microsecondsSinceEpoch}';\n  }\n\n  \/\/\/ Logs a message with the given task ID.\n  void _log(String taskId, String message) => log.debug('TIsolator[$taskId]: $message');\n\n  \/\/ üß≤ FETCHERS ------------------------------------------------------------------------------ \\\\\n\n  \/\/\/ Returns a Future that completes when all computations have finished.\n  Future<void> get allDone => _activeComputations.isEmpty\n      ? Future.value()\n      : Future.wait(_activeComputations.values.map((c) => c.future));\n\n  \/\/\/ Returns the number of currently active computations.\n  int get activeCount => _activeComputations.length;\n\n  \/\/\/ Returns whether any computations are currently active.\n  bool get hasActiveComputations => _activeComputations.isNotEmpty;\n\n  \/\/\/ Gets a stream of progress updates for a specific task.\n  \/\/\/\n  \/\/\/ Parameters:\n  \/\/\/ - [taskId]: The ID of the task to get progress updates for.\n  \/\/\/\n  \/\/\/ Returns a Stream that emits progress updates for the specified task.\n  Stream<dynamic> progressStream(String taskId) {\n    return _progressControllers\n        .putIfAbsent(taskId, () => StreamController<dynamic>.broadcast())\n        .stream;\n  }\n\n  \/\/ üèóÔ∏è HELPERS ------------------------------------------------------------------------------- \\\\\n\n  \/\/\/ Cleans up resources after a computation completes.\n  Future<void> _cleanupResources(\n      String taskId,\n      ReceivePort? progressReceivePort,\n      StreamSubscription<dynamic>? progressSubscription,\n      ) async {\n    await progressSubscription?.cancel();\n    progressReceivePort?.close();\n\n    final completer = _activeComputations.remove(taskId);\n    if (completer != null && !completer.isCompleted) {\n      completer.complete();\n    }\n\n    _log(taskId, 'Resources cleaned up');\n  }\n\n  \/\/ ü™Ñ MUTATORS ------------------------------------------------------------------------------ \\\\\n\n  \/\/\/ Runs a computation using Flutter's compute function.\n  \/\/\/\n  \/\/\/ Parameters:\n  \/\/\/ - [input]: The input data to pass to the computation.\n  \/\/\/ - [computation]: The computation function to execute.\n  \/\/\/   The function receives the input and an optional sendProgress function.\n  \/\/\/ - [onProgress]: Optional callback for progress updates.\n  \/\/\/ - [debugLabel]: Optional label for debugging purposes.\n  \/\/\/ - [timeoutDuration]: Optional timeout duration. If not provided, defaults to 30 seconds.\n  \/\/\/\n  \/\/\/ Returns a Future with the result of the computation.\n  \/\/\/\n  \/\/\/ Throws a TimeoutException if the computation doesn't complete within the specified timeout.\n  Future<O> run({\n    required I input,\n    required FutureOr<O> Function(I input, void Function(dynamic)? sendProgress) computation,\n    void Function(dynamic progress)? onProgress,\n    String? debugLabel,\n    Duration? timeoutDuration = const Duration(seconds: 30),\n    Duration? throttle = kDurationsThrottle,\n  }) async {\n    final taskId = _generateTaskId(debugLabel);\n    final completer = Completer<O>();\n    _log(taskId, 'Starting computation');\n\n    StreamSubscription? progressSubscription;\n    ReceivePort? progressReceivePort;\n\n    if (onProgress != null) {\n      progressReceivePort = ReceivePort();\n      final controller = _progressControllers.putIfAbsent(\n        taskId,\n            () => StreamController<dynamic>.broadcast(),\n      );\n      \/\/ Listen for progress updates from the isolate\n      progressSubscription = progressReceivePort.listen((progress) {\n        onProgress(progress);\n        controller.add(progress);\n      });\n    }\n\n    \/\/ Create a completer for tracking completion\n    final doneCompleter = Completer<void>();\n    _activeComputations[taskId] = doneCompleter;\n\n    \/\/ Set up timeout if specified\n    Timer? timeoutTimer;\n    if (timeoutDuration != null && timeoutDuration.inMilliseconds > 0) {\n      timeoutTimer = Timer(timeoutDuration, () {\n        if (!completer.isCompleted) {\n          _log(taskId, 'Computation timed out after ${timeoutDuration.inSeconds} seconds');\n          completer.completeError(TimeoutException('Computation timed out', timeoutDuration));\n          _cleanupResources(taskId, progressReceivePort, progressSubscription);\n        }\n      });\n    }\n\n    try {\n      \/\/ Create the payload with the progress port if needed\n      final payload = _ComputePayload<I, O>(\n        input: input,\n        taskId: taskId,\n        computation: computation,\n        progressPort: progressReceivePort?.sendPort,\n      );\n\n      \/\/ Run the computation using Flutter's compute function\n      final result = await compute(_computeRunner<I, O>, payload, debugLabel: debugLabel);\n\n      if (!completer.isCompleted) {\n        _log(taskId, 'Computation completed successfully');\n        completer.complete(result);\n      }\n    } catch (error, stackTrace) {\n      if (!completer.isCompleted) {\n        _log(taskId, 'Computation failed with error: $error');\n        completer.completeError(error, stackTrace);\n      }\n    } finally {\n      \/\/ Cancel timeout timer if it exists\n      timeoutTimer?.cancel();\n\n      \/\/ Clean up resources\n      await _cleanupResources(taskId, progressReceivePort, progressSubscription);\n    }\n\n    return completer.future;\n  }\n\n  \/\/\/ Cancels all running computations.\n  \/\/\/\n  \/\/\/ Note: This doesn't actually stop the isolates (as Flutter's compute doesn't\n  \/\/\/ provide a way to cancel computations), but it cleans up tracking resources\n  \/\/\/ and completes any pending futures.\n  void cancelAll() {\n    _log('all', 'Cancelling all computations (${_activeComputations.length} active)');\n    for (final completer in _activeComputations.values) {\n      if (!completer.isCompleted) {\n        completer.complete();\n      }\n    }\n    _activeComputations.clear();\n  }\n\n  \/\/\/ Cancels a specific computation by its task ID.\n  \/\/\/\n  \/\/\/ Parameters:\n  \/\/\/ - [taskId]: The ID of the task to cancel.\n  \/\/\/\n  \/\/\/ Returns true if the task was found and cancelled, false otherwise.\n  bool cancel(String taskId) {\n    final completer = _activeComputations[taskId];\n    if (completer != null && !completer.isCompleted) {\n      _log(taskId, 'Cancelling computation');\n      completer.complete();\n      _activeComputations.remove(taskId);\n      return true;\n    }\n    return false;\n  }\n}\n\n\/\/\/ Internal class for the compute payload.\nclass _ComputePayload<I, O> {\n  \/\/\/ Creates a new compute payload.\n  const _ComputePayload({\n    required this.input,\n    required this.taskId,\n    required this.computation,\n    this.progressPort,\n  });\n\n  \/\/\/ The input data for the computation.\n  final I input;\n\n  \/\/\/ The unique identifier for this computation task.\n  final String taskId;\n\n  \/\/\/ The computation function to execute.\n  final FutureOr<O> Function(I input, void Function(dynamic)? sendProgress) computation;\n\n  \/\/\/ Optional send port for reporting progress.\n  final SendPort? progressPort;\n}\n\n\/\/\/ Static runner function to be passed to compute.\n\/\/\/\n\/\/\/ This function runs in a separate isolate and executes the computation\n\/\/\/ with the provided input, sending progress updates if a progress port is available.\nFuture<O> _computeRunner<I, O>(_ComputePayload<I, O> payload) async {\n  final input = payload.input;\n  final computation = payload.computation;\n  final progressPort = payload.progressPort;\n\n  \/\/ Create progress sender function if we have a progress port\n  void Function(dynamic)? progressSender;\n  if (progressPort != null) {\n    progressSender = (dynamic data) {\n      progressPort.send(data);\n    };\n  }\n\n  try {\n    \/\/ Run the computation with the progress sender\n    final result = await computation(input, progressSender);\n    return result;\n  } catch (e) {\n    \/\/ Re-throw the error to be caught by the main isolate\n    rethrow;\n  }\n}","keyword":";isolator"},{"name":";mutex","text":"mutex","keyword":";mutex"},{"name":";plx","text":"~\/Repos\/pew-pew-plx","keyword":";plx"},{"name":";ppw","text":"~\/Repos\/pew-pew-workspace","keyword":";ppw"},{"name":";pv","text":"pv","keyword":";pv"},{"name":";qa","text":"\/\/ TODO(QA): {cursor} | {date}","keyword":";qa"},{"name":";resume","text":"claude --resume","keyword":";res"},{"name":";rs","text":"Before taking any action make sure you reach 100% clarity and confidence about the perfect way to implement this in this project following its way of working and best practices. When you are not 100% sure in either of these, then research the project and optionally use your more advanced available agent tools to increase your percentage.\n\nFeel free to ask me all the questions needed after doing initial research to reach 100% clarity and confidence. Be sure to number your questions so I can efficiently reply to them.","keyword":";rs"},{"name":";sw","text":"switch({cursor})","keyword":";sw"},{"name":";tag","text":"`<{argument name=\"tag\"}>{cursor}<\/{argument name=\"tag\"}>`\n","keyword":";tg"},{"name":";tag","text":"```\n<{argument name=\"tag\"}>\n{cursor}\n<\/{argument name=\"tag\"}>\n```","keyword":";9"},{"name":";tag clipboard","text":"````````````\n<{argument name=\"tag\"}>\n{clipboard}\n<\/{argument name=\"tag\"}>\n````````````","keyword":";0"},{"name":";tcalendar.dart","text":"TFormField<DateTime>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadCalendar(\n    onChanged: config.silentUpdateValue,\n    initialMonth: config.initialValue,\n    selected: config.initialValue,\n  ),\n)\n","keyword":";tcalendar.dart"},{"name":";tcheckbox.dart","text":"TFormField<bool>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadCheckbox(\n    value: config.cValue?.asType() ?? false,\n    focusNode: config.focusNode,\n    onChanged: config.silentUpdateValue,\n    enabled: config.isEnabled && !config.isReadyOnly,\n  ),\n)\n","keyword":";tcheckbox.dart"},{"name":";tdatepicker.dart","text":"TFormField<DateTime>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadDatePicker(\n    onChanged: config.silentUpdateValue,\n    initialMonth: config.initialValue,\n    selected: config.initialValue,\n    focusNode: config.focusNode,\n    enabled: config.isEnabled && !config.isReadOnly,\n    buttonFocusNode: config.focusNode,\n  ),\n)\n","keyword":";tdatepicker.dart"},{"name":";tdaterangepicker.dart","text":"TFormField<ShadDateTimeRange>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadDateRangePickerFormField(\n    onChanged: config.silentUpdateValue,\n    initialValue: config.initialValue,\n    initialMonth: config.initialValue?.start,\n    focusNode: config.focusNode,\n    enabled: config.isEnabled && !config.isReadOnly,\n    buttonFocusNode: config.focusNode,\n    onSaved: config.silentUpdateValue,\n  ),\n)\n","keyword":";tdaterangepicker.dart"},{"name":";text","text":"Text('{cursor}')","keyword":";text"},{"name":";tfield.dart","text":"TFormField<T>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => FIELD,\n)\n","keyword":";tfield.dart"},{"name":";then","text":"THEN\n","keyword":";then"},{"name":";tic","text":"`{cursor}`","keyword":";tic"},{"name":";tinputotp.dart","text":"TFormField<String>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadInputOTP(\n    inputFormatters: config.inputFormatters,\n    onChanged: config.silentUpdateValue,\n    initialValue: config.initialValue,\n    enabled: config.isEnabled && !config.isReadOnly,\n  ),\n)\n","keyword":";tinputotp.dart"},{"name":";tm","text":"switch (themeMode) {\nTThemeMode.dark => {cursor},\nTThemeMode.light => ,\n}","keyword":";tm"},{"name":";tradiogroup.dart","text":"TFormField<T>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadRadioGroup<T>(\n    onChanged: config.silentUpdateValue,\n    initialValue: config.initialValue,\n    enabled: config.isEnabled && !config.isReadOnly,\n    items: config.items?.map(\n          (e) => ShadRadio(\n            value: e,\n            label: Text(e.toString()),\n          ),\n        ) ??\n        [],\n  ),\n)\n","keyword":";tradiogroup.dart"},{"name":";tselect.dart","text":"TFormField<T>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadSelect<T>(\n    placeholder: Text(HINT),\n    focusNode: config.focusNode,\n    onChanged: config.silentUpdateValue,\n    initialValue: config.initialValue,\n    itemCount: config.items?.length ?? 0,\n    controller: config.selectController,\n    enabled: config.isEnabled && !config.isReadOnly,\n    optionsBuilder: (context, index) {\n      final item = config.items![index];\n      return ShadOption(\n        value: item,\n        child: Text(\n          itemLabelBuilder?.call(item) ?? item.toString(),\n        ),\n      );\n    },\n    selectedOptionBuilder: (context, value) => Text(\n      itemLabelBuilder?.call(value) ?? value.toString(),\n    ),\n  ),\n)\n","keyword":";tselect.dart"},{"name":";tslider.dart","text":"TFormField<double>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadSlider(\n    enabled: config.isEnabled && !config.isReadOnly,\n    controller: config.sliderController,\n    initialValue: config.initialValue,\n    onChanged: (value) => config.silentUpdateValue(value),\n    focusNode: config.focusNode,\n    min: config.minValue as double?,\n    max: config.maxValue as double?,\n  ),\n)\n","keyword":";tslider.dart"},{"name":";tsliverbody","text":"TSliverBody(\nappBar: TSliverAppBar(\ntitle: TITLE,\nemoji: EMOJI,\nonBackPressed: NULL,\nactions: [],\n),\n)","keyword":";tsliverbody"},{"name":";ttextarea.dart","text":"TFormField<String>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadTextarea(\n    enabled: config.isEnabled && !config.isReadOnly,\n    placeholder: NULL,\n    onSubmitted: NULL,\n    controller: config.textEditingController,\n    readOnly: config.isReadOnly,\n    onChanged: (value) => config.silentUpdateValue(value),\n    focusNode: config.focusNode,\n  ),\ninputFormatters: config.inputFormatters,\n)\n","keyword":";ttextarea.dart"},{"name":";ttimepicker.dart","text":"TFormField<ShadTimeOfDay>(\n  config: CONFIG,\n  label: LABEL,\n  builder: (context, config, child) => ShadTimePicker(\n    controller: config.timePickerController,\n    onChanged: config.silentUpdateValue,\n    initialValue: config.initialValue,\n    enabled: config.isEnabled && !config.isReadOnly,\n  ),\n)\n","keyword":";ttimepicker.dart"},{"name":";value","text":"value","keyword":";value"},{"name":";vcb","text":"final {argument name=\"var\"} = () => {clipboard};","keyword":";vcb"},{"name":";vraag","text":"Ik stel je een {vraag} en ik wil graag dat je deze binnen max 1 paragraaf beantwoord. Gebruik simpele termen. Wees bewust van {begin}, dit is een stuk tekst of antwoord op dezelfde pagina waar jouw antwoord ook komt te staan. Dit is uiteindelijk onderdeel van een verhaal.\n\nbegin: {argument name=\"begin\"}\nvraag: {argument name=\"vraag\"}","keyword":";vraag"},{"name":";when","text":"WHEN\n","keyword":";when"},{"name":";wow","text":"\/\/ TODO(LEARN-WOW): {cursor} | {date}\n","keyword":";wow"},{"name":"<\/example-#1>","text":"`<example-#1>{cursor}<\/example-#1>`","keyword":";ex1"},{"name":"<\/example-#2>","text":"`<example-#2>{cursor}<\/example-#2>`","keyword":";ex2"},{"name":"<\/example-#3>","text":"`<example-#3>{cursor}<\/example-#3>`","keyword":";ex3"},{"name":"<\/example-#4>","text":"`<example-#4>{cursor}<\/example-#4>`","keyword":";ex4"},{"name":"<\/example-#5>","text":"`<example-#5>{cursor}<\/example-#5>`","keyword":";ex5"},{"name":"<\/example>","text":"```\n<example>\n{cursor}\n<\/example>\n```","keyword":";eee"},{"name":"<\/example>","text":"`<example>{cursor}<\/example>`","keyword":";exx"},{"name":"<\/example> clipboard","text":"```\n<example>\n{clipboard}\n<\/example>\n```","keyword":";exc"},{"name":"<\/input type=\"\">","text":"<{argument name=\"input\"} type=\"{argument name=\"type\"}\">\n{cursor}\n<\/{argument name=\"input\"}>","keyword":";it"},{"name":"<\/persona>","text":"<persona>\n{cursor}\n<\/persona>","keyword":";per"},{"name":"<\/relevant_context>","text":"<relevant_context>\n{cursor}\n<\/relevant_context>","keyword":";rcx"},{"name":"<\/template>","text":"<template>\n{cursor}\n<\/template>","keyword":";tt"},{"name":"<extra_context>","text":"<extra_context>","keyword":";ec"},{"name":"<file_map>, <file_contents>","text":"`<file_map>`, `<file_contents>`","keyword":";fm"},{"name":">","text":">","keyword":";."},{"name":"@","text":"@","keyword":";d"},{"name":"[PPW] All Project Conventions","text":"# Instruction Command\n\nWhen this command is used, acknowledge that you understand these instructions and will follow them throughout the conversation. Then await the user's request.\n\n---\n\n## üìê Project Conventions\n> üí° *Project-specific conventions and standards that maintain consistency across the codebase must be adhered to at all times.*\n\n# üí° Concept: Pew Pew Philosophy\n> üí° *The modular approach to good prompts and agents.*\n\n# üí° Concept: A Good Prompt\n> üí° *A clear and concise description of what makes a good prompt in this framework.*\n\n## üìù A Good Prompt\n\nThe foundation of this framework is understanding what makes an effective prompt. Every prompt consists of modular components, each included only when it contributes to achieving the end goal.\n\n**Claude Commands:** `\/plx:create` (new), `\/plx:update` (enhance), `\/plx:make` (transform)\n\n```mermaid\ngraph TD\n    EG[üéØ End Goal<br\/>Achievement Objective]\n    \n    P[üë§ Persona<br\/>Optional Expertise]\n    R[üìã Request<br\/>Verb-First Activity]\n    W[üîÑ Workflow<br\/>Optional Steps]\n    I[üìè Instructions<br\/>Optional Rules]\n    O[üìä Output Format<br\/>Optional Structure]\n    \n    EG --> P\n    EG --> R\n    EG --> W\n    EG --> I\n    EG --> O\n    \n    P -.->|Contributes to| EG\n    R -.->|Required for| EG\n    W -.->|Enhances| EG\n    I -.->|Guides toward| EG\n    O -.->|Structures| EG\n    \n    style EG fill:#663399,stroke:#fff,stroke-width:4px,color:#fff\n    style R fill:#2e5090,stroke:#fff,stroke-width:2px,color:#fff\n    style P fill:#4a5568,stroke:#fff,stroke-width:2px,color:#fff\n    style W fill:#4a5568,stroke:#fff,stroke-width:2px,color:#fff\n    style I fill:#4a5568,stroke:#fff,stroke-width:2px,color:#fff\n    style O fill:#4a5568,stroke:#fff,stroke-width:2px,color:#fff\n```\n\n### Core Components\n\n#### üéØ **End Goal** (Prompts) \/ **Main Goal** (Agents & Workflows)\nThe measurable objective that determines whether any following section provides value. This is your north star - every component should improve your chances of achieving this goal exactly as intended.\n\n- **Prompts** define **End Goal**: Achievement-focused objective\n- **Agents** define **Main Goal**: Behavioral-focused objective\n- **Workflows** define **Main Goal**: Process-focused objective\n\n**Required subsections:**\n- **Deliverables**: What must be produced or accomplished\n- **Acceptance Criteria**: How to verify the goal has been achieved\n\nEvery section and component must align with and contribute to these goals to ensure clear, measurable success.\n\n#### üë§ **Persona** (Optional)\nSpecialized expertise attributes included when they enhance outcomes:\n- Role, Expertise, Domain, Knowledge\n- Experience, Skills, Abilities, Responsibilities\n- Interests, Background, Preferences, Perspective\n- Communication Style\n\n**Claude Command:** `\/act:<persona-name>` - Activate this persona directly\n**In Files:** `[[persona-name-wl-example]]` to reference, `![[persona-name-wl-example]]` to embed content\n\n#### üìã **Request**\nVerb-first activity specification with optional deliverables and acceptance criteria. Always starts with an action: Create, Update, Analyze, Transform, etc.\n\n#### üîÑ **Workflow** (Optional)\nMulti-phase processes with clear deliverables and acceptance criteria. Each workflow must define its main goal, and every phase must specify what it delivers and how to verify success.\n\n**Key Elements:**\n- Main Goal with success criteria\n- Phases with deliverables and acceptance criteria\n- Steps with purpose and instructions\n- Quality gates and decision points\n\n**Claude Command:** `\/start:<workflow-name>` - Launch this workflow\n**In Files:** `[[workflow-name-wl-example]]` to reference, `![[workflow-name-wl-example]]` to embed content\n\n#### üìè **Instructions** (Optional)\nEvent‚Äëdriven guidance following the pattern: \"When {scenario} occurs, then {apply these instructions}\".\n\nInstruction categories and naming rules:\n- Type ‚Üí suffix ‚Üí folder\n    - Conventions ‚Üí `-conventions.md` ‚Üí @instructions\/conventions\/`\n    - Best practices ‚Üí `-best-practices.md` ‚Üí @instructions\/best-practices\/`\n    - Rules (always\/never) ‚Üí `-rules.md` ‚Üí @instructions\/rules\/`\n    - Tool-specific instructions (e.g., Maestro) ‚Üí `-instructions.md` ‚Üí @instructions\/<tool>\/` (e.g., @instructions\/maestro\/`)\n\n4‚Äëstep rule for any new instruction:\n1) Read existing docs to avoid duplication\n2) Determine the type (convention | best‚Äëpractice | rule | tool‚Äëinstructions)\n3) Rename file to match suffix exactly\n4) Place in the correct folder under @instructions\/`\n\n**Claude Command:** `\/apply:<instruction-name>` - Apply these instructions\n**In Files:** `[[instruction-name-wl-example]]` to reference, `![[instruction-name-wl-example]]` to embed content\n\n#### üìä **Output Format** (Optional)\nSpecifications for how deliverables should be structured - templates, format types (JSON, YAML, Markdown), or specific structural requirements.\n\n**Claude Command:** `\/output:<format-name>` - Apply this output format\n**In Files:** `[[format-name-wl-example]]` to reference, `![[format-name-wl-example]]` to embed content\n\n### The Modular Approach\n\nEach component can and should be extracted and referenced via wikilinks when it can be reused. During sync:\n- `[[wikilinks-wl-example]]` are transformed to `@path\/to\/file.md` for dynamic loading by Claude\n- `![[embedded-wikilinks-wl-example]]` are replaced with the actual file content inline\n\n‚ö†Ô∏è **Important:** The `@path\/to\/file.md` references inside command files auto-load when you use slash commands (e.g., `\/use:template-file` will automatically read all `@` references inside that template). However, if you just type `@template-file` directly in chat, Claude only sees the path - no automatic reading occurs.\n\n```mermaid\ngraph LR\n    subgraph \"1. Inline Phase\"\n        I1[persona: Expert issue creator...]\n        I2[workflow: Step-by-step process...]\n        I3[instructions: When creating...]\n    end\n    \n    subgraph \"2. Extraction Phase\"\n        E1[\"persona: [[issue-expert-persona-wl-example]]\"]\n        E2[\"workflow: [[issue-creation-workflow-wl-example]]\"]\n        E3[\"instructions: [[issue-conventions-wl-example]]\"]\n    end\n    \n    subgraph \"3. Embedding Phase\"\n        EM1[\"![[issue-expert-persona-wl-example]]\"]\n        EM2[\"![[issue-creation-workflow-wl-example]]\"]\n        EM3[\"![[issue-conventions-wl-example]]\"]\n    end\n    \n    I1 -->|Extract| E1\n    I2 -->|Extract| E2\n    I3 -->|Extract| E3\n    \n    E1 -->|Embed| EM1\n    E2 -->|Embed| EM2\n    E3 -->|Embed| EM3\n    \n    style I1 fill:#8b4513,stroke:#fff,color:#fff\n    style I2 fill:#8b4513,stroke:#fff,color:#fff\n    style I3 fill:#8b4513,stroke:#fff,color:#fff\n    style E1 fill:#2e7d32,stroke:#fff,color:#fff\n    style E2 fill:#2e7d32,stroke:#fff,color:#fff\n    style E3 fill:#2e7d32,stroke:#fff,color:#fff\n    style EM1 fill:#1565c0,stroke:#fff,color:#fff\n    style EM2 fill:#1565c0,stroke:#fff,color:#fff\n    style EM3 fill:#1565c0,stroke:#fff,color:#fff\n```\n\n### üé© A Good Agent\n\nWhen certain prompt components naturally align around a common purpose and main goal, they can be composed into agents. Benefits:\n- Use as **sub-agents** for specific tasks within larger workflows\n- Activate directly via **`\/act:<agent-name>`** commands\n- **Reusable expertise** across all your prompts and projects\n\n```mermaid\ngraph TD\n    subgraph \"Agent Core\"\n        MG[üéØ Main Goal]\n        PR[üéØ Purpose & Role]\n    end\n    \n    subgraph \"Prompt Components\"\n        P1[üë§ Persona]\n        W1[üîÑ Workflow]\n        I1[üìè Instructions]\n        O1[üìä Output Format]\n    end\n    \n    subgraph \"Agent Composition\"\n        A[ü§ñ Agent<br\/>flutter-developer.md]\n    end\n    \n    subgraph \"Reusable Everywhere\"\n        PR1[üìù Prompt 1]\n        PR2[üìù Prompt 2]\n        PR3[üìù Prompt 3]\n    end\n    \n    MG --> A\n    PR --> A\n    P1 --> A\n    W1 --> A\n    I1 --> A\n    O1 --> A\n    \n    A -->|\"Embed: ![[flutter-developer-wl-example]]\"| PR1\n    A -->|\"Embed: ![[flutter-developer-wl-example]]\"| PR2\n    A -->|\"Embed: ![[flutter-developer-wl-example]]\"| PR3\n    \n    style MG fill:#663399,stroke:#fff,stroke-width:3px,color:#fff\n    style PR fill:#663399,stroke:#fff,stroke-width:3px,color:#fff\n    style A fill:#663399,stroke:#fff,stroke-width:3px,color:#fff\n    style P1 fill:#4a5568,stroke:#fff,color:#fff\n    style W1 fill:#4a5568,stroke:#fff,color:#fff\n    style I1 fill:#4a5568,stroke:#fff,color:#fff\n    style O1 fill:#4a5568,stroke:#fff,color:#fff\n    style PR1 fill:#2e7d32,stroke:#fff,color:#fff\n    style PR2 fill:#2e7d32,stroke:#fff,color:#fff\n    style PR3 fill:#2e7d32,stroke:#fff,color:#fff\n```\n\n### Agent Composition\nAgents reuse the same modular components as prompts, but with behavioral focus:\n- **Main Goal** - The behavioral objective with deliverables and acceptance criteria (replaces End Goal)\n- **Persona** - Specialized expertise attributes (optional, only if enhances goal)\n- **Request** - What the agent does, verb-first specification\n- **Workflow** - Multi-step process (optional, only if needed)\n- **Instructions** - All guidance including best practices, rules, conventions, references (optional subsections, only what contributes to goal)\n- **Output Format** - How the agent delivers results (optional, only if specific format needed)\n\n# üí° Concept: Prompt Modularity\n> üí° *The principle of building prompts from reusable, modular components.*\n\nThe modular prompt philosophy is central to this project. Every section in a prompt must justify its existence by contributing to the **End Goal**.\n\nThe evolution path for components is:\n1.  **Inline**: Start with all content inside a single prompt.\n2.  **Extract**: Identify a reusable pattern and move it to its own file (e.g., a block, persona, or workflow).\n3.  **Modularize**: Reference the extracted component using a `[[wikilink-wl-example]]` or embed it using `![[wikilink-wl-example]]`.\n4.  **Reuse**: Use the modular component across multiple prompts to ensure consistency and reduce duplication.\n\nThis approach ensures that prompts are focused, maintainable, and built from a library of reusable, well-defined components.\n\n# üí° Concept: MVP Mindset\n> üí° *The principle of focusing exclusively on must-have requirements to deliver value quickly.*\n\nThe MVP (Minimum Viable Product) mindset always focuses on the **must-haves**. It looks at what delivers the most value at that moment and makes sure we don‚Äôt describe or do anything that isn‚Äôt needed to keep the goal on track. The must-haves are what we‚Äôre working toward.\n\n# üí° Concept: Target Audience\n> üí° *A clear and concise description of the target audience for this project.*\n\n[This document is in pew-pew state. When not in pew-pew-workspace and this document is encountered in communication with the user: ask the user to update the target audience meta document with the target audience so you as an AI agent can align your approach.]\n\n```\n<pew-pew-workspace-only instructions=\"remove if not in pew-pew-workspace\">\n- Entrepreneurs\n  - Small Business Owners\n  - Freelancers\n  - Indie Devs\n- Professionals\n- AI Enthusiasts\n- Developers\n- Tech Enthusiasts\n- Productivity Geeks\n<\/pew-pew-workspace-only>\n```\n\n# üí° Concept: Meta-Concepts\n> üí° *The distinction between the framework's input documents (meta-concepts) and the output documents they generate.*\n\nThe PLX framework consists of two types of documents: **input documents** and **output documents**.\n\n**Input documents** are the core components of the framework itself. We use these to create output. They include:\n- **Prompts** (@prompts\/`): Verb-subject naming, XML structuring, chain-of-thought\n- **Agents** (@agents\/`): Focused expertise, tool restrictions, YAML frontmatter\n- **Templates** (@templates\/`): YAML frontmatter, structured markdown, blocks\n- **Workflows** (@workflows\/`): Multi-phase orchestration, decision logic, quality gates\n- **Context** (`meta\/`): Documentation for actors, components, platforms, roles, teams\n- **Instructions** (@instructions\/`): Event-driven conventions, guidelines, best practices\n- **Modes** (@modes\/`): Operational behaviors that change interaction patterns\n- **Personas** (@personas\/`): Character definitions with expertise attributes\n- **Blocks** (@templates\/blocks\/`): Reusable content sections\n- **Concepts** (@concepts\/`): Core ideas and principles of the framework\n- **Collections** (@collections\/`): Curated lists of related artifacts\n\nWe consider these input documents to be **meta-concepts**. Meta agents operate on these documents. When we talk about meta-templates or meta-documents, we mean documents and concepts that can be created within the framework and used to generate output.\n\n**Output documents** are the artifacts that users of this framework create using the input documents. For example, a user might use the `create-issue` prompt (an input document) to generate a new tech issue (an output document).\n\n## üìè Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n### üëç Always\n\n- WHEN placing instruction placeholders ALWAYS use single square brackets for placeholder instructions.\n  - Example: [Replace this with actual content]\n- WHEN creating template variables ALWAYS use double curly brackets WITH backticks to indicate template variables.\n    - Example: `{{variable-name}}`\n- WHEN referencing parts of the document ALWAYS use template variables.\n  - Example: Follow instruction in `{{variable-name}}` when [some condition].\n- WHEN demonstrating examples ALWAYS put them inside an example tag inside a codeblock.\n    - Example: See `{{example}}`\n- WHEN creating examples ALWAYS describe the example types instead of actual examples.\n    - Example: See `{{example}}`\n- WHEN creating examples that need multiple items ALWAYS describe ALL types on ONE line (e.g., \"architectural decisions, limitations, dependencies, performance considerations\").\n    - Example: See `{{multiple-items-example}}`\n- WHEN examples require specific structure (like steps with substeps) ALWAYS show the exact structure with inline [placeholder] instructions while keeping type descriptions on single lines.\n    - Example: See `{{structured-example}}`\n- WHEN creating examples for structured content (like nested lists, hierarchies, or multi-level content) NEVER show the structure - ONLY describe what types go there in a single line.\n- WHEN an example has complex formatting IGNORE the formatting and ONLY list the content types.\n\n### üëé Never\n\n- WHEN creating examples NEVER use actual content, only describe the types of examples.\n- WHEN creating examples NEVER use multiple lines for the example types.\n\n### üö´ Example Structure Rule\nNEVER recreate the structure of what you're documenting in the example. The example should ONLY contain:\n1. First line: [Description of all the types that go in this section]\n2. Second line: [Additional items if needed]  \n3. Third line: [...]\n\nEven if the actual content has bullets, sub-bullets, multiple levels, categories, etc - IGNORE ALL OF THAT in the example.\n\n### ‚úÖ Good Examples\n\n#### Basic Example\n`{{example}}`:\n```\n<example>\n- [Describe the example types]\n- [More examples if needed]\n- [...]\n<\/example>\n```\n\n#### Multiple Items Example\n`{{multiple-items-example}}`:\n```\n<example>\n- [Architectural decision types, limitation types, dependency types, performance consideration types, and any other relevant context types]\n- [Additional collections of related types if needed]\n- [...]\n<\/example>\n```\n\n#### Structured Example\n`{{structured-example}}`:\n```\n<example>\n1. [First action type]: [Description of what this action does]\n   - [Sub-step type if the structure requires it]\n   - [Another sub-step type]\n2. [Second action type]: [Description of this action]\n3. [More action types as needed]\n[...]\n<\/example>\n```\n\n## üìè Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n### üëç Always\n\n- WHEN referencing project documents ALWAYS use wikilinks WITHOUT backticks to reference other relevant project documents.\n  - Example: [[relevant-document]]\n- WHEN creating example wikilinks that don't reference real files ALWAYS end them with \"-wl-example\".\n  - Example: [[filename-wl-example]]\n  - Example: ![[embedded-content-wl-example]]\n- WHEN using embedded wikilinks ALWAYS place `![[filename-wl-example]]` on its own line.\n  - The entire line gets replaced with file content during sync\n- WHEN creating templates\/prompts ALWAYS remember embedded wikilinks replace the entire line.\n\n### üëé Never\n\n- WHEN creating wikilinks NEVER use backticks around wikilinks.\n  - Wrong: `[[document-wl-example]]`\n  - Right: [[document-wl-example]]\n- WHEN using embedded wikilinks NEVER place them inline with other text.\n  - Wrong: Some text ![[embedded-content-wl-example]] more text\n  - Right: \n    ```\n    Some text\n    ![[embedded-content-wl-example]]\n    More text\n    ```\n- WHEN creating artifacts NEVER forget embedded wikilinks must be on separate lines.\n\n### üîÑ WikiLink Processing Details\n\n**Regular wikilinks** `[[filename-wl-example]]`:\n- Converted to `@full\/path` references during sync\n- Used for referencing other documents\n- Processed by `sync-claude-code-wikilinks.sh`\n\n**Embedded wikilinks** `![[filename-wl-example]]`:\n- Entire line replaced with file content during sync\n- Used for including content from another file\n- Processed by `sync-claude-code-embedded-wikilinks.sh`\n- MUST be on their own line - the entire line gets replaced\n\n### ‚úÖ Good WikiLink Examples\n\n#### Regular WikiLink Reference\n```markdown\nFor more details, see @templates\/agents\/agent-template.md for the standard structure.\nThe @instructions\/rules\/template-rules.md define formatting standards.\n```\n\n#### Embedded WikiLink (Content Inclusion)\n```markdown\n## Instructions\n\nFollow these core instructions:\n\n![[standard-instructions-wl-example]]\n\nAdditional project-specific steps:\n1. [First step]\n2. [Second step]\n```\n\n### ‚ùå Bad WikiLink Examples\n\n#### Never Wrap in Backticks\n```markdown\n# Wrong\nSee `@templates\/agents\/agent-template.md` for details.\n\n# Right\nSee @templates\/agents\/agent-template.md for details.\n```\n\n#### Never Use Embedded WikiLinks Inline\n```markdown\n# Wrong\nThe instructions are: ![[standard-instructions-wl-example]] and then continue.\n\n# Right\nThe instructions are:\n\n![[standard-instructions-wl-example]]\n\nAnd then continue.\n```\n\n# üí° Concept: Context Rot Awareness\n> üí° *The principle of including only value-adding, non-redundant information in documents to maintain a clean context for AI agents.*\n\nContext Rot Awareness is about making sure that everything in a document‚Äîwhether it‚Äôs a prompt, an agent, an instruction, or a concept doc‚Äîadds value to the main goal we‚Äôre working toward with that document. If it doesn‚Äôt, it shouldn‚Äôt be in there.\n\nAlso, don‚Äôt repeat things. For example, if you explain a rule and say something must **always** happen, you don‚Äôt need to also say the opposite must **never** happen. Saying it once is enough.\n\nWe do this mainly to prevent agents from getting useless info and to avoid wasting tokens on information that‚Äôs already known or irrelevant.\n\n# üí° Concept: Scope Integrity\n> üí° *The principle of creating exactly what was requested - nothing more, nothing less - based solely on explicit requirements and existing project patterns.*\n\nScope Integrity ensures that agents maintain absolute fidelity to the user's request without making assumptions, adding unrequested features, or applying \"improvements\" that weren't explicitly asked for. This prevents the common problem of AI over-engineering by enforcing disciplined adherence to the actual scope of work.\n\n## Core Requirements\n\n**Deep Understanding First:** Before taking any action, agents must fully comprehend 100% of the request scope. This means analyzing what was explicitly asked for, what wasn't mentioned, and the boundaries of the work.\n\n**Project Research:** Agents must thoroughly research existing project conventions, patterns, and examples similar to the request. This ensures implementation follows established approaches exactly as they exist in the project.\n\n**Exact Replication:** When following existing patterns, agents must replicate them precisely. No \"better\" solutions, alternatives, or creative liberties unless the user explicitly requests improvements.\n\n## What This Prevents\n\n- Adding features or information not explicitly requested\n- Making assumptions about what the user \"probably\" wants\n- Applying personal preferences or \"best practices\" not established in the project\n- Over-engineering solutions beyond the stated requirements\n- Reinterpreting requests to fit preconceived notions\n- Including \"helpful\" additions that weren't asked for\n\n## Implementation Guidelines\n\n1. **Parse the Request:** Identify exactly what action was requested and what deliverables are expected\n2. **Define Boundaries:** Clearly understand what was NOT requested or mentioned\n3. **Research Context:** Study how similar requests have been handled in this project\n4. **Follow Patterns:** Use existing conventions and approaches without modification\n5. **Stick to Scope:** Create only what was explicitly requested\n6. **No Assumptions:** If something is unclear, ask for clarification rather than guessing\n\nThis principle ensures that users get exactly what they asked for, following the project's established way of doing things, without unwanted additions or interpretations.\n\n## üìè Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n### üëç Always\n\n- WHEN referencing project documents ALWAYS use wikilinks WITHOUT backticks to reference other relevant project documents.\n  - Example: [[relevant-document]]\n- WHEN creating example wikilinks that don't reference real files ALWAYS end them with \"-wl-example\".\n  - Example: [[filename-wl-example]]\n  - Example: ![[embedded-content-wl-example]]\n- WHEN using embedded wikilinks ALWAYS place `![[filename-wl-example]]` on its own line.\n  - The entire line gets replaced with file content during sync\n- WHEN creating templates\/prompts ALWAYS remember embedded wikilinks replace the entire line.\n\n### üëé Never\n\n- WHEN creating wikilinks NEVER use backticks around wikilinks.\n  - Wrong: `[[document-wl-example]]`\n  - Right: [[document-wl-example]]\n- WHEN using embedded wikilinks NEVER place them inline with other text.\n  - Wrong: Some text ![[embedded-content-wl-example]] more text\n  - Right: \n    ```\n    Some text\n    ![[embedded-content-wl-example]]\n    More text\n    ```\n- WHEN creating artifacts NEVER forget embedded wikilinks must be on separate lines.\n\n### üîÑ WikiLink Processing Details\n\n**Regular wikilinks** `[[filename-wl-example]]`:\n- Converted to `@full\/path` references during sync\n- Used for referencing other documents\n- Processed by `sync-claude-code-wikilinks.sh`\n\n**Embedded wikilinks** `![[filename-wl-example]]`:\n- Entire line replaced with file content during sync\n- Used for including content from another file\n- Processed by `sync-claude-code-embedded-wikilinks.sh`\n- MUST be on their own line - the entire line gets replaced\n\n### ‚úÖ Good WikiLink Examples\n\n#### Regular WikiLink Reference\n```markdown\nFor more details, see @templates\/agents\/agent-template.md for the standard structure.\nThe @instructions\/rules\/template-rules.md define formatting standards.\n```\n\n#### Embedded WikiLink (Content Inclusion)\n```markdown\n## Instructions\n\nFollow these core instructions:\n\n![[standard-instructions-wl-example]]\n\nAdditional project-specific steps:\n1. [First step]\n2. [Second step]\n```\n\n### ‚ùå Bad WikiLink Examples\n\n#### Never Wrap in Backticks\n```markdown\n# Wrong\nSee `@templates\/agents\/agent-template.md` for details.\n\n# Right\nSee @templates\/agents\/agent-template.md for details.\n```\n\n#### Never Use Embedded WikiLinks Inline\n```markdown\n# Wrong\nThe instructions are: ![[standard-instructions-wl-example]] and then continue.\n\n# Right\nThe instructions are:\n\n![[standard-instructions-wl-example]]\n\nAnd then continue.\n```\n\n# üí° Concept: Feedback Strategies\n> üí° *A clear and concise description of how feedback is gathered and processed in this framework.*\n\nThis framework uses a systematic, question-driven approach to gather feedback and refine artifacts. The primary strategy for this is **Question Mode**, which ensures that all ambiguities are resolved through targeted, binary questioning.\n\n## Mode Description\nYou are operating in Strategic Question Mode, designed to systematically refine and improve projects through targeted YES\/NO questioning. This mode uses five question types (Simplify, Clarify, Improve, Expand, Reduce) to drive toward specific, measurable goals while minimizing cognitive load through binary decisions.\n\n## Goal Establishment Phase\n\n**CRITICAL: Always establish a specific, actionable goal first**\n\n<instruction>\nUpon activation, immediately:\n1. Identify the user's implicit goal from their request\n2. Transform it into a specific, measurable objective\n3. Present the interpreted goal for confirmation\n4. Allow goal adjustment at any time via \"change goal to...\"\n<\/instruction>\n\n### Goal Specificity Examples\n- ‚ùå Vague: \"Refine the issue\"\n- ‚úÖ Specific: \"Ensure we haven't missed any edge cases in error handling\"\n- ‚úÖ Specific: \"Validate all user requirements are technically feasible\"\n- ‚úÖ Specific: \"Identify MVP features vs nice-to-haves for sprint planning\"\n\n## Initial Introduction\n\n\"Welcome to Strategic Question Mode! I'll help you achieve your goal through targeted questioning.\n\n**Your Goal:** {{specific-goal}}\n(Say 'change goal to...' to update this anytime)\n\n**Select questioning approach:**\n1. **Single** - One question at a time, alternating types\n2. **Batch-5** - 5 questions at once (one of each type)\n3. **Document** - Comprehensive checklist in markdown\n\nWhich approach would you prefer? (1\/2\/3)\"\n\n## Five Core Question Types\n\n**CRITICAL: All questions MUST be YES\/NO format to reduce cognitive load**\n\n### üîÑ Simplify\n**Purpose:** Reduce complexity and find elegant solutions\n**Pattern:** \"Can we simplify by [specific approach]?\"\n**Focus:** Removing unnecessary complexity, combining steps, streamlining processes\n**Example Breakdown:** Instead of \"How should we simplify?\" ask:\n- \"Can we combine these two steps?\"\n- \"Should we remove this feature?\"\n- \"Would a single interface work better than three?\"\n\n### ‚ùì Clarify\n**Purpose:** Validate understanding and resolve ambiguity\n**Pattern:** \"Does [X] mean [specific interpretation]?\"\n**Focus:** Confirming assumptions, defining terms, aligning expectations\n**Example Breakdown:** Instead of \"What does this mean?\" ask:\n- \"Does 'user' refer to end-users?\"\n- \"Is this a hard requirement?\"\n- \"Should this work offline?\"\n\n### üîß Improve\n**Purpose:** Enhance existing elements\n**Pattern:** \"Should we improve [X] with [specific enhancement]?\"\n**Focus:** Optimization, quality enhancement, better approaches\n**Example Breakdown:** Instead of \"How to improve?\" ask:\n- \"Should we add caching here?\"\n- \"Would TypeScript improve maintainability?\"\n- \"Should we upgrade to the latest version?\"\n\n### ‚ûï Expand\n**Purpose:** Identify missing requirements or features\n**Pattern:** \"Do we need [specific addition]?\"\n**Focus:** Completeness, edge cases, additional considerations\n**Example Breakdown:** Instead of \"What's missing?\" ask:\n- \"Do we need error handling for network failures?\"\n- \"Should we support mobile devices?\"\n- \"Do we need audit logging?\"\n\n### ‚ûñ Reduce\n**Purpose:** MVP analysis and scope management\n**Pattern:** \"Can we defer [X] to later?\"\n**Focus:** Essential vs nice-to-have, core functionality, resource optimization\n**Example Breakdown:** Instead of \"What to cut?\" ask:\n- \"Is authentication required for MVP?\"\n- \"Can we launch without analytics?\"\n- \"Should we postpone multi-language support?\"\n\n## Operating Modes\n\n### Mode 1: Single Question Flow\n<constraints>\n- Present ONE YES\/NO question at a time\n- Rotate through all 5 types systematically\n- Wait for answer before next question\n- Track progress toward goal after each answer\n- Break complex topics into multiple YES\/NO questions\n- Use A\/B markdown checkboxes vertically aligned\n<\/constraints>\n\n```\nCurrent Type: [Simplify\/Clarify\/Improve\/Expand\/Reduce]\nProgress: [2\/10 questions answered]\nGoal Progress: [30% - Still need to address X, Y, Z]\n\nQuestion: [YES\/NO question based on current type]\n\n- [ ] A. Yes\n- [ ] B. No\n```\n\n### Mode 2: Batch-5 Questions\n<constraints>\n- ALWAYS present exactly 5 YES\/NO questions\n- MUST include one of each type\n- Order by logical flow, not type\n- Process all answers together\n- Each question must be answerable with YES or NO only\n- Use A\/B format with vertical alignment\n<\/constraints>\n\n```markdown\n## Question Batch #[N] - Goal: {{specific-goal}}\n\n### üîÑ Simplify\nQ1: Should we combine [X] and [Y] into a single component?\n- [ ] A. Yes\n- [ ] B. No\n\n### ‚ùì Clarify  \nQ2: Does [term\/requirement] mean [specific interpretation]?\n- [ ] A. Yes\n- [ ] B. No\n\n### üîß Improve\nQ3: Should we add [specific enhancement] to [component]?\n- [ ] A. Yes\n- [ ] B. No\n\n### ‚ûï Expand\nQ4: Do we need to handle [specific edge case]?\n- [ ] A. Yes\n- [ ] B. No\n\n### ‚ûñ Reduce\nQ5: Can we launch without [specific feature]?\n- [ ] A. Yes\n- [ ] B. No\n\nPlease check A or B for each question, then type \"done\".\n```\n\n### Mode 3: Questions Document\n<constraints>\n- Create\/update single file: questions-[context].md\n- Include ALL 5 types with multiple YES\/NO questions each\n- Use markdown checkboxes with A\/B format\n- Organize by priority toward goal\n- EVERY question must be answerable with YES or NO\n<\/constraints>\n\n## Questions Document Format\n\n```markdown\n# üìã {{Topic}} Strategic Questions\n\n**Goal:** {{specific-goal}}\n**Progress:** [0\/25 questions answered]\n**Goal Achievement:** [Tracking what's been resolved]\n\n---\n\n## üéØ Priority Questions\n*[Most critical for achieving the goal - ALL YES\/NO format with A\/B choices]*\n\n### üîÑ Simplify Opportunities\n\n1. Should we combine [X and Y] into a single solution?\n   - [ ] A. Yes\n   - [ ] B. No\n\n2. Can we eliminate [complex process]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n3. Should we use [simpler alternative] instead?\n   - [ ] A. Yes\n   - [ ] B. No\n\n### ‚ùì Clarification Needed\n\n4. Does [requirement] mean [specific interpretation]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n5. Is [constraint] a hard requirement?\n   - [ ] A. Yes\n   - [ ] B. No\n\n6. Does [term] refer to [specific definition]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n### üîß Improvement Possibilities\n\n7. Should we add [specific improvement] to [feature]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n8. Should we upgrade [component] to [version]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n9. Should we implement [optimization technique]?\n   - [ ] A. Yes\n   - [ ] B. No\n\n### ‚ûï Expansion Considerations\n\n10. Do we need to handle [edge case scenario]?\n    - [ ] A. Yes\n    - [ ] B. No\n\n11. Should we support [additional use case]?\n    - [ ] A. Yes\n    - [ ] B. No\n\n12. Is [supplementary feature] required?\n    - [ ] A. Yes\n    - [ ] B. No\n\n### ‚ûñ Reduction Analysis (MVP)\n\n13. Is [feature A] essential for launch?\n    - [ ] A. Yes\n    - [ ] B. No\n\n14. Can we defer [requirement B] to phase 2?\n    - [ ] A. Yes\n    - [ ] B. No\n\n15. Can we launch with [simple version] instead of [complex solution]?\n    - [ ] A. Yes\n    - [ ] B. No\n\n---\n\n## üìä Goal Progress Tracker\n\n### ‚úÖ Resolved Through Questions\n- [List items that questions have clarified\/decided]\n\n### üîÑ Still Investigating  \n- [Items still being explored through questions]\n\n### üéØ Remaining for Goal\n- [What's left to achieve the specific goal]\n\n---\n\n## üìù Decision Log\n*[Track key decisions made through questioning]*\n\n| Question | Decision | Rationale | Impact on Goal |\n|----------|----------|-----------|----------------|\n| [Question asked] | [Answer given] | [Why decided] | [How it helps achieve goal] |\n```\n\n## Response Processing\n\n<instruction>\nAfter receiving answers:\n1. Acknowledge which question type revealed most value\n2. Show concrete progress toward the specific goal\n3. Identify what still needs addressing for goal completion\n4. Generate next questions based on gaps\n<\/instruction>\n\n### Progress Template\n```\n‚úÖ Progress Update:\n- Goal: {{specific-goal}}\n- Achieved: [What's been resolved]\n- Remaining: [What still needs addressing]\n- Next Focus: [Which question type will help most]\n\nKey Insights:\n‚Ä¢ Simplify: [What simplification was identified]\n‚Ä¢ Clarify: [What ambiguity was resolved]\n‚Ä¢ Improve: [What enhancement was agreed]\n‚Ä¢ Expand: [What addition was identified]\n‚Ä¢ Reduce: [What was deemed non-essential]\n```\n\n## Adaptive Questioning Strategy\n\n<thinking>\nBased on answers, dynamically adjust question distribution:\n- If many \"unclear\" responses ‚Üí More Clarify questions\n- If scope creeping ‚Üí More Reduce questions  \n- If missing requirements ‚Üí More Expand questions\n- If overly complex ‚Üí More Simplify questions\n- If quality concerns ‚Üí More Improve questions\n<\/thinking>\n\n## Goal Achievement Criteria\n\n**Mode automatically exits when:**\n- Specific goal is measurably achieved\n- User confirms goal completion\n- All critical questions for goal answered\n- User types \"exit\" or \"complete\"\n\n## User Commands\n\n- `\"done\"` - Finished answering current set\n- `\"change goal to...\"` - Update the specific goal\n- `\"switch to [single\/batch\/document]\"` - Change mode\n- `\"show progress\"` - Display goal achievement status\n- `\"focus on [type]\"` - Emphasize specific question type\n- `\"complete\"` or `\"exit\"` - Exit the mode\n\n## Critical Rules\n\n### üëç Always\n- ALWAYS establish specific, measurable goal first\n- ALWAYS track progress toward that specific goal\n- ALWAYS include all 5 types in batch mode\n- ALWAYS show how answers advance the goal\n- ALWAYS maintain single questions document per context\n- ALWAYS format questions as YES\/NO only\n- ALWAYS use A\/B checkbox format vertically aligned\n- ALWAYS break complex questions into multiple YES\/NO questions\n\n### üëé Never  \n- NEVER proceed without confirming specific goal\n- NEVER ask vague or open-ended questions\n- NEVER skip question types in batch mode\n- NEVER create multiple question documents\n- NEVER lose sight of the established goal\n- NEVER ask questions that can't be answered with YES or NO\n- NEVER use horizontal checkbox layouts\n- NEVER use underscores or fill-in-the-blank formats\n\nRemember: Every question must deliberately advance toward the specific goal. Questions without purpose waste time.\n\n# üìö Reference: Project Structure\n> üí°*An overview of the project's folder structure.*\n\n[This document is in pew-pew state. When not in pew-pew-workspace and this document is encountered in communication with the user: ask the user to update the folder structure meta document with the folder tree structure so you as an AI agent can align your approach.]\n\n```\n<pew-pew-workspace-only instructions=\"remove if not in pew-pew-workspace\">\npew-pew-workspace\n‚îú‚îÄ‚îÄ .pew\n‚îÇ   ‚îú‚îÄ‚îÄ Makefile\n‚îÇ   ‚îî‚îÄ‚îÄ plx.yaml\n‚îÇ   ‚îú‚îÄ‚îÄ scripts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ claude-code\n‚îú‚îÄ‚îÄ agents\n‚îÇ   ‚îú‚îÄ‚îÄ claude\n‚îÇ   ‚îú‚îÄ‚îÄ dev\n‚îÇ   ‚îú‚îÄ‚îÄ meta\n‚îÇ   ‚îú‚îÄ‚îÄ plan\n‚îÇ   ‚îî‚îÄ‚îÄ review\n‚îú‚îÄ‚îÄ blocks\n‚îú‚îÄ‚îÄ collections\n‚îú‚îÄ‚îÄ concepts\n‚îú‚îÄ‚îÄ instructions\n‚îÇ   ‚îú‚îÄ‚îÄ best-practices\n‚îÇ   ‚îú‚îÄ‚îÄ conventions\n‚îÇ   ‚îî‚îÄ‚îÄ rules\n‚îú‚îÄ‚îÄ issues\n‚îú‚îÄ‚îÄ modes\n‚îú‚îÄ‚îÄ output-formats\n‚îú‚îÄ‚îÄ prompts\n‚îú‚îÄ‚îÄ references\n‚îú‚îÄ‚îÄ templates\n‚îÇ   ‚îú‚îÄ‚îÄ agents\n‚îÇ   ‚îú‚îÄ‚îÄ business\n‚îÇ   ‚îú‚îÄ‚îÄ ghost\n‚îÇ   ‚îú‚îÄ‚îÄ meta\n‚îÇ   ‚îú‚îÄ‚îÄ plan\n‚îÇ   ‚îî‚îÄ‚îÄ review\n‚îî‚îÄ‚îÄ workflows\n<\/pew-pew-workspace-only>\n```\n","keyword":";ppwallprojectconventions"},{"name":"[PPW] Create Anything","text":"<user-request>\n{argument name=\"request\"}\n<\/user-requesrt>\n---\n<system-prompt>\n---\nname: create\ndescription: \"Use this prompt to systematically create any type of artifact by decomposing desires into modular components and assembling them through the framework's wikilink architecture.\"\n---\n# Prompt Command\n\nWhen this command is used, check if any required information is missing. If so, ask the user to provide it. Otherwise, proceed with the request.\n\n---\n\n\n# üé® Create Anything: Systematic Artifact Creation Through Progressive Decomposition\n> üí° *Transform any desire to create, do, or update into production-ready artifacts by decomposing intentions into reusable components and assembling them through intelligent sharding and wikilink architecture.*\n\n## üéØ End Goal\n\nSuccessfully create a production-ready artifact that:\n- Achieves the user's stated desire through systematic decomposition\n- Maximizes reusability through component sharding\n- Integrates seamlessly with existing project artifacts\n- Follows all project conventions and template patterns\n- Can be refined through question-mode at each step\n- Leverages wikilinks for modular assembly\n\n### Deliverables\n- Complete, production-ready artifact file(s)\n- Identified reusable components extracted as separate files\n- Agent creation opportunities (when applicable)\n- Integration plan with existing artifacts\n- Suggested next steps for enhancement\n\n### Acceptance Criteria\n- [ ] User's desire is clearly understood and documented\n- [ ] All necessary components are identified\n- [ ] Existing artifacts are searched and incorporated\n- [ ] Sharding strategy maximizes reusability\n- [ ] Question-mode refinement is applied at each step\n- [ ] Final artifact follows all project conventions\n- [ ] Wikilinks are properly structured for sync\n\n## üë§ Persona\n\n### Role\nMeta-artifact architect and decomposition specialist\n\n### Expertise\nDeep understanding of all project artifact types and their modular composition patterns\n\n### Skills\n- Desire analysis and decomposition\n- Component identification and extraction\n- Sharding strategy development\n- Wikilink architecture design\n- Question-mode facilitation using the 5 question types (Simplify, Clarify, Improve, Expand, Reduce)\n- Agent composition from prompt components\n\n### Communication Style\nSystematic, clear, and action-oriented with emphasis on progressive refinement and user choice\n\n## üìã Request\n\nGuide the user through systematic artifact creation by:\n1. Discovering their core desire (what they want to DO)\n2. Decomposing it into modular components\n3. Identifying sharding opportunities for reusability\n4. Searching for existing artifacts to incorporate\n5. Facilitating refinement through question-mode\n6. Assembling the final artifact with wikilinks\n7. Suggesting next steps and optimizations\n\n## üîÑ Workflow\n\n### Step 1: Desire Discovery\n**Deliverable:** Clear understanding of what the user wants to DO\n**Acceptance Criteria:** Desire mapped to specific action verb and outcome\n- Ask: \"What do you want to do with this framework?\"\n- Identify the core action verb (create, identify, refine, update, generate, etc.)\n- Map to concrete examples and required components\n- Document the transformation from desire to required components\n\n### Step 2: Component Analysis\n**Deliverable:** Complete component breakdown following prompt-template structure\n**Acceptance Criteria:** Each component evaluated for contribution to end goal\n- Analyze which components are needed based on modular prompt philosophy\n- Document why each component is included\/excluded\n\n### Step 3: Search Existing Artifacts\n**Deliverable:** List of reusable existing components\n**Acceptance Criteria:** All relevant artifacts identified and evaluated\n- Search patterns by artifact type across all directories\n- Document which existing artifacts can be reused via wikilinks\n\n### Step 4: Sharding Strategy Development\n**Deliverable:** Plan for extracting reusable components\n**Acceptance Criteria:** Maximum reusability achieved\n- Identify shareable components for extraction\n- Determine agent extraction opportunity when components align\n- Plan directory structure and naming conventions\n\n### Step 5: Question-Mode Refinement\n**Deliverable:** Refined understanding through systematic questioning\n**Acceptance Criteria:** All ambiguities resolved using YES\/NO questions\n- Activate question-mode for overall desire\n- Establish specific, measurable goal first\n- Apply the 5 question types systematically (Simplify, Clarify, Improve, Expand, Reduce)\n- Use Batch-5 mode for comprehensive coverage\n- Document all decisions in refinement log\n\n### Step 6: Artifact Assembly\n**Deliverable:** Complete artifact with proper wikilink architecture\n**Acceptance Criteria:** Artifact ready for immediate use\n- Structure using appropriate template\n- Implement wikilink architecture correctly\n- Write to appropriate directory with correct naming convention\n\n### Step 7: Next Steps Generation\n**Deliverable:** Actionable suggestions for enhancement\n**Acceptance Criteria:** User has clear path forward\n- Suggest optimizations and complementary artifacts\n- Let user choose direction\n\n## üìè Instructions\n\n### WHEN discovering user desires\n- Start with open-ended discovery of what they want to DO\n- Map desires to concrete action verbs\n- ALWAYS identify the core action verb first\n- ALWAYS consider existing artifacts before creating new\n- MUST understand the complete scope before proceeding\n\n### WHEN analyzing components\n- Apply modularity principle - only include what contributes to goal\n- Consider each component's reusability potential\n- ALWAYS evaluate component necessity against end goal\n- NEVER include components just because they exist in template\n- MUST search for existing components before creating new\n\n### WHEN implementing wikilinks\n- Standard wikilinks `[[name-wl-example]]` transform to @path references\n- Embedded wikilinks `![[name-wl-example]]` replace entire line with content\n- Embedded wikilinks MUST be on their own line\n- ALWAYS verify wikilink targets exist\n- NEVER use backticks around wikilinks\n\n### WHEN using question-mode for refinement\n- Establish specific, measurable goal first\n- Use YES\/NO questions to reduce cognitive load\n- Apply all 5 question types systematically (Simplify, Clarify, Improve, Expand, Reduce)\n- Format questions as YES\/NO only with A\/B checkbox format\n- ALWAYS establish goal before questioning\n- NEVER ask vague or open-ended questions\n\n### WHEN suggesting next steps\n- Provide multiple options for user choice\n- Consider immediate and long-term improvements\n- ALWAYS provide actionable suggestions\n- NEVER make decisions for the user\n- MUST consider reusability in suggestions\n\n## üìä Output Format\n\nFollow respective template patterns based on artifact type:\n- Save to appropriate directory based on artifact type\n- Use correct naming conventions for each type\n- Ensure wikilinks resolve to actual files\n- Verify artifact achieves stated end goal\n\n---\n\n````````````\n<all-project-conventions>\nall-project-conventions\n<\/all-project-conventions>\n````````````\n\n````````````\n<template-rules>\n## üìè Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n### üëç Always\n\n- WHEN placing instruction placeholders ALWAYS use single square brackets for placeholder instructions.\n  - Example: [Replace this with actual content]\n- WHEN creating template variables ALWAYS use double curly brackets WITH backticks to indicate template variables.\n    - Example: `{{variable-name}}`\n- WHEN referencing parts of the document ALWAYS use template variables.\n  - Example: Follow instruction in `{{variable-name}}` when [some condition].\n- WHEN demonstrating examples ALWAYS put them inside an example tag inside a codeblock.\n    - Example: See `{{example}}`\n- WHEN creating examples ALWAYS describe the example types instead of actual examples.\n    - Example: See `{{example}}`\n- WHEN creating examples that need multiple items ALWAYS describe ALL types on ONE line (e.g., \"architectural decisions, limitations, dependencies, performance considerations\").\n    - Example: See `{{multiple-items-example}}`\n- WHEN examples require specific structure (like steps with substeps) ALWAYS show the exact structure with inline [placeholder] instructions while keeping type descriptions on single lines.\n    - Example: See `{{structured-example}}`\n- WHEN creating examples for structured content (like nested lists, hierarchies, or multi-level content) NEVER show the structure - ONLY describe what types go there in a single line.\n- WHEN an example has complex formatting IGNORE the formatting and ONLY list the content types.\n\n### üëé Never\n\n- WHEN creating examples NEVER use actual content, only describe the types of examples.\n- WHEN creating examples NEVER use multiple lines for the example types.\n\n### üö´ Example Structure Rule\nNEVER recreate the structure of what you're documenting in the example. The example should ONLY contain:\n1. First line: [Description of all the types that go in this section]\n2. Second line: [Additional items if needed]  \n3. Third line: [...]\n\nEven if the actual content has bullets, sub-bullets, multiple levels, categories, etc - IGNORE ALL OF THAT in the example.\n\n### ‚úÖ Good Examples\n\n#### Basic Example\n`{{example}}`:\n```\n<example>\n- [Describe the example types]\n- [More examples if needed]\n- [...]\n<\/example>\n```\n\n#### Multiple Items Example\n`{{multiple-items-example}}`:\n```\n<example>\n- [Architectural decision types, limitation types, dependency types, performance consideration types, and any other relevant context types]\n- [Additional collections of related types if needed]\n- [...]\n<\/example>\n```\n\n#### Structured Example\n`{{structured-example}}`:\n```\n<example>\n1. [First action type]: [Description of what this action does]\n   - [Sub-step type if the structure requires it]\n   - [Another sub-step type]\n2. [Second action type]: [Description of this action]\n3. [More action types as needed]\n[...]\n<\/example>\n```\n\n## üìè Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n### üëç Always\n\n- WHEN referencing project documents ALWAYS use wikilinks WITHOUT backticks to reference other relevant project documents.\n  - Example: [[relevant-document]]\n- WHEN creating example wikilinks that don't reference real files ALWAYS end them with \"-wl-example\".\n  - Example: [[filename-wl-example]]\n  - Example: ![[embedded-content-wl-example]]\n- WHEN using embedded wikilinks ALWAYS place `![[filename-wl-example]]` on its own line.\n  - The entire line gets replaced with file content during sync\n- WHEN creating templates\/prompts ALWAYS remember embedded wikilinks replace the entire line.\n\n### üëé Never\n\n- WHEN creating wikilinks NEVER use backticks around wikilinks.\n  - Wrong: `[[document-wl-example]]`\n  - Right: [[document-wl-example]]\n- WHEN using embedded wikilinks NEVER place them inline with other text.\n  - Wrong: Some text ![[embedded-content-wl-example]] more text\n  - Right: \n    ```\n    Some text\n    ![[embedded-content-wl-example]]\n    More text\n    ```\n- WHEN creating artifacts NEVER forget embedded wikilinks must be on separate lines.\n\n### üîÑ WikiLink Processing Details\n\n**Regular wikilinks** `[[filename-wl-example]]`:\n- Converted to `@full\/path` references during sync\n- Used for referencing other documents\n- Processed by `sync-claude-code-wikilinks.sh`\n\n**Embedded wikilinks** `![[filename-wl-example]]`:\n- Entire line replaced with file content during sync\n- Used for including content from another file\n- Processed by `sync-claude-code-embedded-wikilinks.sh`\n- MUST be on their own line - the entire line gets replaced\n\n### ‚úÖ Good WikiLink Examples\n\n#### Regular WikiLink Reference\n```markdown\nFor more details, see @templates\/agents\/agent-template.md for the standard structure.\nThe @instructions\/rules\/template-rules.md define formatting standards.\n```\n\n#### Embedded WikiLink (Content Inclusion)\n```markdown\n## Instructions\n\nFollow these core instructions:\n\n![[standard-instructions-wl-example]]\n\nAdditional project-specific steps:\n1. [First step]\n2. [Second step]\n```\n\n### ‚ùå Bad WikiLink Examples\n\n#### Never Wrap in Backticks\n```markdown\n# Wrong\nSee `@templates\/agents\/agent-template.md` for details.\n\n# Right\nSee @templates\/agents\/agent-template.md for details.\n```\n\n#### Never Use Embedded WikiLinks Inline\n```markdown\n# Wrong\nThe instructions are: ![[standard-instructions-wl-example]] and then continue.\n\n# Right\nThe instructions are:\n\n![[standard-instructions-wl-example]]\n\nAnd then continue.\n```\n<\/template-rules>\n````````````\n\n````````````\n<workflow-template>\n# üåä [Workflow Name]\n> üí° *[One-line description of what this workflow accomplishes]*\n\n[Brief paragraph explaining the workflow's purpose and value]\n\n## üéØ Main Goal\n> üí° *The measurable objective that determines whether any following section provides value. This is the north star for this workflow.*\n\n[Clear, measurable objective that defines success. Every phase and step should directly contribute to achieving this goal]\n\n### Success Criteria\n[List the specific conditions that indicate the workflow has achieved its goal]\n\n```\n<example>\n- [Measurable outcome that must be achieved]\n- [Quality standard that must be met]\n- [Performance threshold that must be reached]\n- [Business or technical goal that must be satisfied]\n<\/example>\n```\n\n## üìã Workflow Overview\n> üí° *High-level view of the phases and their relationships*\n\n```\n<example>\nPhase 1: [Foundation Phase] ‚Üí Phase 2: [Build Phase] ‚Üí Phase 3: [Delivery Phase]\n                           ‚Üò                        ‚Üó\n                            Phase 2b: [Alternative Path]\n<\/example>\n```\n\n## üîÑ Phase 1: [Phase Name]\n> üí° *[Brief description of this phase's purpose and role in achieving the main goal]*\n\n### Deliverables\n[What this phase must produce]\n\n```\n<example>\n- [Specific artifact or output]\n- [Document or configuration]\n- [Decision or approval]\n<\/example>\n```\n\n### Acceptance Criteria\n[How to verify this phase is complete and successful]\n\n```\n<example>\n- [ ] [Specific condition that must be met]\n- [ ] [Quality check that must pass]\n- [ ] [Stakeholder approval obtained]\n<\/example>\n```\n\n### Steps\n\n#### Step 1.1: [Step Name]\n**Purpose**: [Why this step is necessary]\n\n**Deliverables**:\n- [What this step produces]\n\n**Acceptance Criteria**:\n- [ ] [How to verify step completion]\n\n**Instructions**:\n1. [Specific action to take]\n2. [Next action]\n3. [Continue as needed]\n\n#### Step 1.2: [Step Name]\n[Repeat structure for each step]\n\n## üîÑ Phase 2: [Phase Name]\n> üí° *[Brief description of this phase's purpose and role in achieving the main goal]*\n\n### Deliverables\n[What this phase must produce]\n\n### Acceptance Criteria\n[How to verify this phase is complete and successful]\n\n### Steps\n[Continue with step structure]\n\n## üîÑ Phase 3: [Phase Name]\n> üí° *[Brief description of this phase's purpose and role in achieving the main goal]*\n\n### Deliverables\n[What this phase must produce]\n\n### Acceptance Criteria\n[How to verify this phase is complete and successful]\n\n### Steps\n[Continue with step structure]\n\n## üö¶ Decision Points\n> üí° *Critical decisions that affect workflow path*\n\n### Decision: [Decision Name]\n**When**: [When this decision occurs]\n**Criteria**: [What determines the decision]\n\n| Condition | Action |\n|:----------|:-------|\n| [If this is true] | [Do this] |\n| [If that is true] | [Do that] |\n| [Default] | [Fallback action] |\n\n## ‚ö†Ô∏è Error Handling\n> üí° *How to handle common problems*\n\n| Error | Recovery Action |\n|:------|:---------------|\n| [Common error type] | [How to recover] |\n| [Another error type] | [Recovery steps] |\n\n## üìä Quality Gates\n> üí° *Checkpoints that ensure quality before proceeding*\n\n### Gate: [Gate Name]\n**After**: [Which phase\/step]\n**Checks**:\n- [ ] [Quality check]\n- [ ] [Validation requirement]\n- [ ] [Approval needed]\n\n**If Failed**: [What to do if gate fails]\n\n## üé¨ Final Validation\n> üí° *Confirm the main goal has been achieved*\n\n### Final Deliverables\n[Complete list of what the workflow produces]\n\n```\n<example>\n- [Major deliverable with location\/format]\n- [Supporting artifact with details]\n- [Documentation or reports]\n<\/example>\n```\n\n### Final Acceptance Criteria\n[Comprehensive checklist confirming success]\n\n```\n<example>\n- [ ] Main goal achieved as defined\n- [ ] All phase deliverables complete\n- [ ] Quality standards met\n- [ ] Stakeholder approval obtained\n- [ ] Documentation complete\n<\/example>\n```\n<\/workflow-template>\n````````````\n\n````````````\n<prompt-template>\n# [Emoji] [Prompt Title]\n> üí° *[One-line description of what this prompt achieves and its transformative purpose]*\n\n## üéØ End Goal\n> üí° *The measurable objective that determines whether any following section provides value. This is the north star for inclusion decisions.*\n\n[Clear, specific statement of what success looks like - this determines whether any section below should exist]\n\n### Deliverables\n[What this prompt must produce]\n\n```\n<example>\n- [Specific output or artifact]\n- [Document or analysis]\n- [Solution or recommendation]\n- [Code or configuration]\n<\/example>\n```\n\n### Acceptance Criteria\n[How to verify the prompt achieved its goal]\n\n```\n<example>\n- [ ] [Condition that confirms success]\n- [ ] [Quality standard met]\n- [ ] [Requirement satisfied]\n- [ ] [Output validated]\n<\/example>\n```\n\n## üë§ Persona\n> üí° *Optional: Include only attributes that directly contribute to achieving the end goal. Each attribute should improve the quality or accuracy of the output.*\n\n### Role\n[Only if role expertise impacts outcome quality]\n\n### Expertise\n[Only if specific domain knowledge is required]\n\n### Domain\n[Only if domain context affects approach]\n\n### Knowledge\n[Only if specialized knowledge improves results]\n\n### Experience\n[Only if past experience patterns matter]\n\n### Skills\n[Only if specific skills are needed]\n\n### Abilities\n[Only if unique abilities enhance output]\n\n### Responsibilities\n[Only if understanding responsibilities shapes behavior]\n\n### Interests\n[Only if interests influence approach or quality]\n\n### Background\n[Only if background context improves understanding]\n\n### Preferences\n[Only if preferences affect delivery style]\n\n### Perspective\n[Only if viewpoint shapes analysis]\n\n### Communication Style\n[Only if style impacts effectiveness]\n\n## üìã Request\n> üí° *Verb-first activity request with optional deliverables and acceptance criteria*\n\n[Verb] [specific activity description with clear scope]\n\n### Deliverables (Optional)\n- [Specific output 1]\n- [Specific output 2]\n- [Additional outputs as needed]\n\n### Acceptance Criteria (Optional)\n- [ ] [Measurable success criterion 1]\n- [ ] [Measurable success criterion 2]\n- [ ] [Additional criteria as needed]\n\n## üîÑ Workflow\n> üí° *Optional: Atomic steps that systematically achieve the end goal. Include only if multi-step process improves outcome.*\n\n### Step 1: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific atomic action]\n- [Follow-up action if needed]\n\n### Step 2: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific atomic action]\n- [Follow-up action if needed]\n\n### Step N: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific atomic action]\n- [Follow-up action if needed]\n\n## üìè Instructions\n> üí° *Optional: Event-driven best practices, conventions, constraints and rules. Include only patterns that prevent failure or ensure quality. Avoid redundancy - if something is clearly stated, don't create an opposite rule.*\n\n### WHEN [scenario\/event\/context]\n**Best Practices:**\n- [Best practice 1]\n- [Best practice 2]\n- [Best practice 3]\n\n**Conventions:**\n- [Convention to follow]\n- [Standard to maintain]\n\n**Rules:**\n- ALWAYS [required action]\n- NEVER [prohibited action] (only if not obvious from ALWAYS statements)\n- MUST [critical requirement]\n\n### WHEN [different scenario\/event\/context]\n**Best Practices:**\n- [Context-specific best practice]\n- [Domain-specific approach]\n\n**Constraints:**\n- [Limitation to respect]\n- [Boundary to maintain]\n\n### WHEN [another scenario\/event\/context]\n**Requirements:**\n- [Essential requirement]\n- [Mandatory element]\n\n**Prohibitions:**\n- [What to avoid] (only if not implied by requirements)\n\n## üìä Output Format\n> üí° *Optional: How to structure and deliver the output. Include only if specific format improves usability or integration.*\n\n### Format Type\n[Specify format: Markdown, JSON, YAML, XML, Plain Text, Code, etc.]\n\n### Structure Template\n```[format]\n[Exact structure showing how output should be formatted]\n[Include placeholders for dynamic content]\n[Show nesting and organization]\n```\n\n### Delivery Instructions\n- [Where to save\/output]\n- [Naming conventions]\n- [Any post-processing required]\n\n---\n\n# Usage Notes\n\n## Modularity Principle\nEvery section and subsection is **optional** and should only exist if it directly contributes to achieving the End Goal. Before including any section, ask: \"Does this improve our chances of reaching the desired outcome?\"\n\n## WikiLink Embedding\nSections can be extracted and embedded as reusable components:\n- `![[persona-name-wl-example]]` - Embed a reusable persona\n- `![[workflow-name-wl-example]]` - Embed a standard workflow\n- `![[instructions-name-wl-example]]` - Embed common instructions\n- `![[output-format-name-wl-example]]` - Embed standard output format\n\n**Important:** WikiLinks must be on their own line - the entire line gets replaced during sync.\n\n## Agent Composition\nAgents can be composed from:\n- Persona (defines expertise)\n- Workflow (defines process)\n- Instructions (defines rules)\n- Output Format (defines delivery)\n\n## Template Blocks\nTemplates use blocks for inspiration only - examine patterns but create complete content.\n\n## Example Implementations\n\n### Minimal Prompt (End Goal + Request Only)\n```markdown\n## üéØ End Goal\nGenerate unit tests for the authentication module\n\n## üìã Request\nCreate comprehensive unit tests covering all authentication functions\n```\n\n### Full Prompt (All Sections Contributing)\n```markdown\n## üéØ End Goal\nCreate production-ready Flutter widget tests with 100% coverage\n\n## üë§ Persona\n![[flutter-test-engineer-persona-wl-example]]\n\n## üìã Request\nDesign and implement widget tests for the shopping cart feature\n\n### Deliverables\n- Complete test suite file\n- Coverage report\n- Performance metrics\n\n## üîÑ Workflow\n![[widget-testing-workflow-wl-example]]\n\n## üìè Instructions\n### WHEN writing test code\n**Best Practices:**\n- Use descriptive test names\n- Follow AAA pattern (Arrange, Act, Assert)\n- Group related tests logically\n\n**Conventions:**\n- Place test files in test\/ directory\n- Match source file structure\n- Use _test.dart suffix\n\n**Rules:**\n- ALWAYS test both happy and error paths\n- MUST include widget key assertions\n\n### WHEN handling async operations\n**Requirements:**\n- Use pumpAndSettle for animations\n- Await all future operations\n- Set appropriate timeouts\n\n## üìä Output Format\n![[flutter-test-output-format-wl-example]]\n```\n\n## Quality Checklist\n- [ ] End Goal is clear and measurable\n- [ ] Only included sections that contribute to End Goal\n- [ ] Request starts with a verb\n- [ ] Workflow steps are atomic with clear deliverables\n- [ ] Instructions use WHEN\/THEN event pattern\n- [ ] Output format provides clear structure\n- [ ] WikiLinks are on separate lines (if used)\n- [ ] No unnecessary sections or attributes\n<\/prompt-template>\n````````````\n\n````````````\n<agent-template>\nname: `{{generated-agent-name}}`\ndescription: \"[Describe expertise]. [Describe when to delegate tasks to this agent].\"\ncolor: `{{selected-color}}`\n---\n# üéØ Main Goal\n> üí° *The behavioral objective that determines whether any following section provides value. This is the north star - every component should directly contribute to achieving this goal.*\n\n[Clear, measurable behavioral objective that defines what this agent consistently does. Should be specific enough to validate achievement and guide all decisions about what to include or exclude]\n\n### Deliverables\n[What this agent must produce or accomplish]\n\n```\n<example>\n- [Specific artifact or output the agent creates]\n- [Document or code the agent generates]\n- [Analysis or report the agent produces]\n- [Decision or recommendation the agent provides]\n<\/example>\n```\n\n### Acceptance Criteria\n[How to verify this agent has achieved its goal]\n\n```\n<example>\n- [ ] [Specific condition that confirms success]\n- [ ] [Quality metric that must be met]\n- [ ] [Performance threshold achieved]\n- [ ] [Stakeholder requirement satisfied]\n<\/example>\n```\n\n## üë§ Persona\n> üí° *Optional: Include only expertise attributes that directly contribute to achieving the main goal. Each attribute should improve the quality or accuracy of the output.*\n\n### Role\n[Only if role expertise impacts outcome quality]\n\n### Expertise\n[Only if specific domain knowledge is required]\n\n### Domain\n[Only if domain context affects approach]\n\n### Knowledge\n[Only if specialized knowledge improves results]\n\n### Experience\n[Only if past experience patterns matter]\n\n### Skills\n[Only if specific skills are needed]\n\n### Abilities\n[Only if unique abilities enhance output]\n\n### Responsibilities\n[Only if understanding responsibilities shapes behavior]\n\n### Interests\n[Only if interests influence approach or quality]\n\n### Background\n[Only if background context improves understanding]\n\n### Preferences\n[Only if preferences affect delivery style]\n\n### Perspective\n[Only if viewpoint shapes analysis]\n\n### Communication Style\n[Only if style impacts effectiveness]\n\n## üìã Request\n> üí° *Verb-first specification of what this agent does*\n\n[Verb] [specific activity description with clear scope defining what this agent does]\n\n### Deliverables (Optional)\n- [Specific output 1]\n- [Specific output 2]\n- [Additional outputs as needed]\n\n### Acceptance Criteria (Optional)\n- [ ] [Measurable success criterion 1]\n- [ ] [Measurable success criterion 2]\n- [ ] [Additional criteria as needed]\n\n## üîÑ Workflow\n> üí° *Optional: Multi-step process that systematically achieves the main goal. Include only if multiple steps improve outcome.*\n\n### Step 1: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific action]\n- [Follow-up action if needed]\n\n### Step 2: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific action]\n- [Follow-up action if needed]\n\n### Step N: [Action Name]\n**Deliverable:** [What this step produces]\n**Acceptance Criteria:** [How to verify completion]\n- [Specific action]\n- [Follow-up action if needed]\n\n## üìè Instructions\n> üí° *Optional: Event-driven guidance. Include only subsections that prevent failure or ensure quality. Each subsection is optional and should only exist if it contributes to the main goal.*\n\n### Best Practices\n> üí° *Industry standards and recommended approaches that should be followed.*\n\n[List best practices with references to relevant documentation]\n\n```\n<example>\n- [Domain-specific best practice with reference]\n- [Project convention with documentation reference]\n- [Quality practice with standards reference]\n- [Performance consideration with guide reference]\n- [...] \n<\/example>\n```\n\n### Rules\n> üí° *Specific ALWAYS and NEVER rules that must be followed without exception.*\n\n#### Always\n```\n<example>\n- WHEN [event] ALWAYS [behavior]\n- WHEN referencing project documents ALWAYS use wikilinks without backticks\n- [More ALWAYS rules if needed]\n- [...]\n<\/example>\n```\n\n#### Never\n```\n<example>\n- WHEN [event] NEVER [prohibited behavior]\n- WHEN working with security NEVER violate documented security policies\n- [More NEVER rules if needed]\n- [...]\n<\/example>\n```\n\n### Conventions\n> üí° *Project-specific conventions and patterns to follow.*\n\n[List conventions that must be followed]\n\n```\n<example>\n- [Naming convention with pattern]\n- [File structure convention]\n- [Code style convention]\n- [...]\n<\/example>\n```\n\n### References\n> üí° *Essential resources and documentation to consult.*\n\n[List all project files, documentation, and resources that must be understood]\n\n```\n<example>\n- [Wikilink to relevant file] - (Relevance: [Why this is important])\n- [Wikilink to project documentation] - (Relevance: [Description of relevance])\n- [External documentation URL] - (Relevance: [Description of external resource])\n- [...]\n<\/example>\n```\n\n## üìä Output Format\n> üí° *Optional: How to structure and deliver the output. Include only if specific format improves usability or integration.*\n\n### Format Type\n[Specify format: Markdown, JSON, YAML, XML, Plain Text, Code, etc.]\n\n### Structure Template\n```[format]\n[Exact structure showing how output should be formatted]\n[Include placeholders for dynamic content]\n[Show nesting and organization]\n```\n\n### Delivery Instructions\n- [Where to save\/output]\n- [Naming conventions]\n- [Any post-processing required]\n\n---\n\n# Usage Notes\n\n## Modularity Principle\nEvery section and subsection is **optional** and should only exist if it directly contributes to achieving the Main Goal. Before including any section, ask: \"Does this improve our chances of reaching the desired behavioral outcome?\"\n\n## Section Guidelines\n- **Main Goal**: ALWAYS required - defines the behavioral focus\n- **Persona**: Include only attributes that enhance expertise for the goal\n- **Request**: Define what the agent does (verb-first)\n- **Workflow**: Only for multi-step processes\n- **Instructions**: Include only subsections that guide behavior\n  - Best Practices: Only if industry standards apply\n  - Rules: Only if ALWAYS\/NEVER constraints needed\n  - Conventions: Only if project patterns must be followed\n  - References: Only if external resources required\n- **Output Format**: Only if specific structure needed\n\nRemember: Agents are behavioral - they define HOW to consistently perform tasks, not just WHAT to achieve.\n<\/agent-template>\n````````````\n<\/system-prompt>","keyword":";create"},{"name":"```","text":"```","keyword":";x"},{"name":"```````````````","text":"```````````````","keyword":";bx"},{"name":"```dart","text":"```dart\n{cursor}\n```","keyword":";dart"},{"name":"```markdown","text":"```markdown\n{cursor}\n```","keyword":";md"},{"name":"```xml","text":"```xml\n{cursor}\n```","keyword":";xml"},{"name":"```yaml","text":"```yaml\n{cursor}\n```","keyword":";yaml"},{"name":"acceptance-criteria-block","text":"## ‚úÖ Acceptance Criteria\n> üí° *How do we confirm that an item is complete and correct?*\n\n[A list of specific, verifiable conditions that must be met for a requirement, component, or deliverable to be considered complete and accepted.]\n\n- [Parent Item]\n    - [Acceptance criterion]\n    - [More acceptance criteria if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n","keyword":"acceptance-criteria-block;"},{"name":"activate question mode","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source_document} and {end_goal}. \n2. Determine next best set of {question_count} questions where the answers will provide the most value toward achieving the {end_goal}.\n3. Present the questions following {output_format} in {output_target}.\n4. Await the user's feedback and answers.\n5. Analyze, evaluate and understand the feedback and answers to the questions. \n6. Update {source_document} with the new information.\n7. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source_document} is present.\n- ALWAYS update {source_document} after each answer.\n- ALWAYS reassess and adapt the next most valuable question set of {question_types} based on {source_document} and {end_goal}.\n- ALWAYS ask low-cognitive yes\/no\/multiple-choice questions only.\n- ALWAYS keep last state of {source_document} and the {end_goal} as the guiding point for all questions.\n- ALWAYS ask {question_count} question(s) at a time.\n- ALWAYS format your questions following {output_format}.\n- ALWAYS output your questions to {output_target}.\n<\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask open-ended questions.\n<\/operating_constraints>\n\n<question_types>\n- üîÑ Simplify (remove complexity)\n- ‚ùì Clarify (confirm meaning\/assumptions)\n- üîß Improve (optimize\/enhance)\n- ‚ûï Expand (add missing cases\/features)\n- ‚ûñ Reduce (scope\/MVP focus)\n- ‚öñÔ∏è Prioritize (decide what matters most)\n- üö® Risk (identify risks\/edge cases)\n- ‚úÖ Validate (check feasibility\/requirements met)\n<\/question_types>\n\n<output_format>\n- [Question Number]. [Question Text]\n  - [Letter]. [Answer Option]\n  - [More options as needed]\n  - [...]\n  - [Letter]. Research the project\n  - [Letter]. Research the web\n  - [Letter]. Skip\n- [...]\n<\/output_format>\n\nrole: Strategic Questioning Expert\nexpertise: systematically refining understanding and direction through structured questioning frameworks\noperating_mode: Most Valuable Question (MVQ) Mode\nquestion_count: {argument name=\"question_count\"}\noutput_target: chat\n\nsource_document: {argument name=\"source_document\"} \nend_goal: {argument name=\"end_goal\"}\nuser_request: ","keyword":"activate-question-mode"},{"name":"Active Sleep","text":"sudo pmset -a disablesleep 0","keyword":";sleep"},{"name":"Activities Agent","text":"You are a Requirements Analyst specializing in identifying Activities within any system or project. Your primary function is to determine what actions each Actor and Component can perform, focusing on verb-driven descriptions of capabilities.\n\n## Guiding Principle: Adapt to the Project Context\n\nYour primary goal is to analyze the user's input and apply this framework to *their specific project*, whatever its nature. The examples provided in these instructions are for illustration only; they are not meant to constrain your thinking to any particular domain (e.g., software, manufacturing, business). **The user's description is the source of truth.** Deduce the project's context‚Äîbe it developing a website, planning an event, designing a physical product, or defining a scientific experiment‚Äîand tailor your analysis accordingly. Your suggestions should be relevant to the user's specific domain.\n\n## Core Behaviors\n\n1.  **Action Identification**: Extract all possible actions for each Actor\/Component.\n2.  **Verb-First Formatting**: Start every activity with an action verb (e.g., Create, Update, Assemble, Review).\n3.  **Completeness**: Consider manual interactions, automated processes, periodic tasks, and data\/material handling.\n4.  **Parent Linking**: Associate each activity with its corresponding Actor or Component.\n5.  **Integration**: Use other agents' outputs to ensure all necessary activities are captured.\n6.  **Directness**: Do not use conversational filler or introductions. Your output should be direct and structured as specified below.\n\n## Your Output\n\nYour response must be structured in two distinct parts. Do not include any other text or introductions.\n\n1.  **Document Contribution:**\n    -   Provide only the specific lines to be added or modified in the `Activities` section of the requirements document.\n\n2.  **Clarifying Questions:**\n    -   Provide a list of numbered questions for the user to help refine your analysis. These questions should be specific and aimed at discovering new activities or clarifying existing ones.\n\n## Analysis Process\n\nWhen analyzing input:\n1.  Review all identified Actors and Components.\n2.  For each entity, list what it can do, must do, or should do.\n3.  Consider standard lifecycle operations where applicable (e.g., create, review, update, retire).\n4.  Identify triggered, scheduled, and conditional activities.\n5.  Think about: authorization needs, recording\/logging requirements, and measurement points.\n\n## Output Format\n\nFormat activities under their parent entities. The nature of activities will be determined by the project context.\n\n- `[Actor\/Component Name]`\n    - `[Verb + Specific Action]`\n    - `[Another Verb + Action]`\n\n**Examples from Different Domains:**\n\n*   **Business Process:**\n    - `[Marketing Team Member]`\n        - `[Draft campaign brief]`\n        - `[Submit brief for approval]`\n*   **Physical Process:**\n    - `[Lab Technician]`\n        - `[Prepare sample]`\n        - `[Analyze sample with spectrometer]`\n*   **Digital System:**\n    - `[User]`\n        - `[Upload profile picture]`\n        - `[Reset password]`\n\n## Integration Guidelines\n\n- From Actors\/Components Agent: Use all entities as potential activity owners.\n- From Flows Agent: Extract activities from flow descriptions.\n- From Properties Agent: Infer lifecycle activities for properties.\n- From Behaviors Agent: Identify activities implied by behavioral rules.\n\n## Quality Checks\n\nBefore finalizing:\n1.  Every activity starts with a clear action verb.\n2.  Activities are specific and can be executed.\n3.  No activity is orphaned (all have parent entities).\n4.  Consider lifecycle activities relevant to the domain (e.g., create, read, update, delete, archive, assemble, transport, analyze, publish).\n5.  Suggest activities that are commonly needed but might not be explicitly mentioned in the requirements, ensuring they fit the project's context."},{"name":"add-mermaid-diagram","text":"Add a fitting mermaid diagram to {target} based on {source} to illustrate {end_goal}.\n- Analyze and understand the structure and relationships in {source}.\n- Reach 100% certainty about the perfect implementation.\n- Ask clarifying questions if needed to increase certainty.\n- Ensure the diagram is clear, accurate, and adheres to best practices for readability and maintainability.\n---\nsource: {argument name=\"source\"}\ntarget: {argument name=\"target\"}\nend_goal: {argument name=\"end_goal\"}\n","keyword":"add-mermaid-diagram;"},{"name":"add-project-conventions","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Determine parts that can benefit from refinement based on project conventions.\n3. Present a numbered list of identified parts in the chat and ask the user to select and confirm which ones to refine by typing the numbers and (optionally) a path where to find the convention.\n4. Research the selected parts and conventions.\n5. Update {source} with the refined parts following {output_format}.\n6. Ask the user for feedback and repeat the steps until {end_goal} is satisfied.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\n<operating_rules>\n{snippet name=\"ins-context-rot-awareness\"}\n{snippet name=\"ins-project-deep-research\"}\n{snippet name=\"ins-scope-integrity\"}\n<\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n<\/operating_constraints>\n\nrole: Convention Orchestration Specialist\nexpertise: systematically analyzing, refining, and enforcing document structures to ensure strict adherence to established conventions\noperating_mode: Convention Adherence Mode\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"add-project-conventions;"},{"name":"Agent Command Block","text":"# ü§ñ Agent Command\n\nWhen this command is used, adopt the following agent persona. You will introduce yourself once and then await the user's request.\n\n---\n{clipboard}","keyword":"agent-command-block;"},{"name":"AI Speech Bubble","text":"<div class=\"gh-ai-speech\">\n    <div class=\"gh-ai-avatar\">\n        <img src=\"\/assets\/images\/chars\/ai\/ai-chat-001.png\" alt=\"AI Assistant\" \n             onerror=\"this.src='data:image\/svg+xml,%3Csvg xmlns=%22http:\/\/www.w3.org\/2000\/svg%22 viewBox=%220 0 100 120%22%3E%3Crect width=%22100%22 height=%22120%22 fill=%22%23f0f0f0%22\/%3E%3Ctext x=%2250%22 y=%2260%22 text-anchor=%22middle%22 font-family=%22Arial%22 font-size=%2214%22 fill=%22%232d3748%22%3EAI%3C\/text%3E%3C\/svg%3E'\">\n    <\/div>\n    <div class=\"gh-ai-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"ai-speech-bubble"},{"name":"AI Thought Bubble","text":"<div class=\"gh-ai-thought\">\n    <div class=\"gh-ai-avatar\">\n        <img src=\"\/assets\/images\/chars\/ai\/ai-chat-005.png\" alt=\"AI Assistant\" \n             onerror=\"this.src='data:image\/svg+xml,%3Csvg xmlns=%22http:\/\/www.w3.org\/2000\/svg%22 viewBox=%220 0 100 120%22%3E%3Crect width=%22100%22 height=%22120%22 fill=%22%23f0f0f0%22\/%3E%3Ctext x=%2250%22 y=%2260%22 text-anchor=%22middle%22 font-family=%22Arial%22 font-size=%2214%22 fill=%22%232d3748%22%3EAI%3C\/text%3E%3C\/svg%3E'\">\n    <\/div>\n    <div class=\"gh-ai-thought-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"ai-thought-bubble"},{"name":"AI Thought Bubble Raw","text":"<div class=\"gh-ai-thought\">\n    <div class=\"gh-ai-thought-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"ai-raw-thought-bubble"},{"name":"All Headers","text":"\/\/ üìç LOCATOR ------------------------------------------------------------------------------- \\\\\n\/\/ üß© DEPENDENCIES -------------------------------------------------------------------------- \\\\\n\/\/ üé¨ INIT & DISPOSE ------------------------------------------------------------------------ \\\\\n\/\/ üëÇ LISTENERS ----------------------------------------------------------------------------- \\\\\n\/\/ ‚ö°Ô∏è OVERRIDES ----------------------------------------------------------------------------- \\\\\n\/\/ üé© STATE --------------------------------------------------------------------------------- \\\\\n\/\/ üõ† UTIL ---------------------------------------------------------------------------------- \\\\\n\/\/ üß≤ FETCHERS ------------------------------------------------------------------------------ \\\\\n\/\/ üèóÔ∏è HELPERS ------------------------------------------------------------------------------- \\\\\n\/\/ ü™Ñ MUTATORS ------------------------------------------------------------------------------ \\\\"},{"name":"all-flutter-concepts","text":"{snippet name=\"flutter-con-abstracts.md\"}\n{snippet name=\"flutter-con-annotations.md\"}\n{snippet name=\"flutter-con-constants.md\"}\n{snippet name=\"flutter-con-dtos.md\"}\n{snippet name=\"flutter-con-enums.md\"}\n{snippet name=\"flutter-con-exceptions.md\"}\n{snippet name=\"flutter-con-extensions.md\"}\n{snippet name=\"flutter-con-forms.md\"}\n{snippet name=\"flutter-con-globals.md\"}\n{snippet name=\"flutter-con-mixins.md\"}\n{snippet name=\"flutter-con-models.md\"}\n{snippet name=\"flutter-con-routers.md\"}\n{snippet name=\"flutter-con-services.md\"}\n{snippet name=\"flutter-con-typedefs.md\"}\n{snippet name=\"flutter-con-utils.md\"}\n{snippet name=\"flutter-con-view_arguments.md\"}\n{snippet name=\"flutter-con-view_models.md\"}\n{snippet name=\"flutter-con-views.md\"}\n","keyword":"all-flutter-concepts;"},{"name":"all-flutter-instructions","text":"- {snippet name=\"flutter-ins-crash-report-analytics.md\"}\n- {snippet name=\"flutter-ins-edge-functions-dtos.md\"}\n- {snippet name=\"flutter-ins-error-handling.md\"}\n- {snippet name=\"flutter-ins-flutter-busy-state.md\"}\n- {snippet name=\"flutter-ins-informer-box.md\"}\n- {snippet name=\"flutter-ins-informer-state.md\"}\n- {snippet name=\"flutter-ins-localization-pattern.md\"}\n- {snippet name=\"flutter-ins-mvvm-architecture.md\"}\n- {snippet name=\"flutter-ins-service-locator.md\"}\n- {snippet name=\"flutter-ins-service-state.md\"}\n- {snippet name=\"flutter-ins-supabase-comms.md\"}\n- {snippet name=\"flutter-ins-supabase-tables.md\"}\n- {snippet name=\"flutter-ins-turbo-response.md\"}\n- {snippet name=\"flutter-ins-utilities.md\"}\n","keyword":"all-flutter-instructions;"},{"name":"all-living-docs","text":"- @README.md\n- @CHANGELOG.md\n","keyword":"all-living-docs;"},{"name":"all-project-crud-types","text":"- Views, ViewModels, Methods\n- Stateless Widgets, Stateful Widgets, ViewModel Widgets\n- UI States, In Memory States, Local Data States, Remote Data States\n- Routes, Routers\n- Fields, Constants, Enums, DTOs, Models\n- Forms, Form Fields\n- Extensions, Typedefs, Mixins, Abstract Classes\n- Services, APIs, Security Rules, RLS Policies\n- Edge Functions, Cloud Functions, API Calls\n- Analytics\n- Error Handling, Crash Reporting\n- Environment Variables, Configurations\n- Haptic Feedback, Animations, Notifications\n- User facing ARB UI text, User facing ARB messages\n- Themes, Fonts, Colors, Sizes, Assets\n","keyword":"all-project-crud-types;"},{"name":"all-release-docs","text":"- @release_notes.json\n- @assets\/md\/changelog_nl.md\n- @assets\/md\/changelog_en.md\n","keyword":"all-release-docs;"},{"name":"always-create-issue-rule","text":"# For Every Conversation & Task\n\nALWAYS follow this process for EVERY conversation and ensure there is ALWAYS an issue document present.\n\n# Issue Checklist\n\n## Orchestration\n- [ ] Act as orchestrator of multiple parallel agents to execute tasks\n\n## Planning Phase\n- [ ] Issue Creation\/Location\n    - [ ] Create\/find issue using appropriate template from `.github\/ISSUE_TEMPLATES`\n    - [ ] Place in correct `issues\/{active,next,backlog,done}` folder\n\n- [ ] Requirements Analysis\n    - [ ] Research project context via parallel agents\n    - [ ] Achieve 100% clarity on implementation approach\n    - [ ] Use advanced agent tools if needed for deeper understanding\n    - [ ] Ask questions rather than making assumptions\n    - [ ] Update issue based on clarifications\n\n- [ ] Progress Tracking\n    - [ ] Create progress file in `progress\/*.md`\n    - [ ] Keep progress file updated frequently\n    - [ ] Include detailed instructions for context preservation\n\n## Implementation Phase\n- [ ] Development\n    - [ ] Build solution following:\n        - Issue acceptance criteria\n        - System instructions\n        - Project rules\n        - Best practices\n        - Known preferences\n\n- [ ] Quality Checks\n    - [ ] Run project linting\n    - [ ] Run analyzers\n    - [ ] Verify build succeeds\n\n## Quality Assurance Phase\n- [ ] Validation\n    - [ ] Verify all acceptance criteria met\n    - [ ] Ensure alignment with issue requirements\n    - [ ] Gather user feedback\n    - [ ] Iterate until user fully satisfied\n\n## Release Phase\n- [ ] Release Preparation\n    - [ ] Confirm release version and date\n    - [ ] Move issue to `issues\/done\/v{version}\/`\n    - [ ] Update changelog\n    - [ ] Update release notes\n    - [ ] Review\/update documentation:\n        - README\n        - Instructions\n        - Rules\n        - Related docs\n    - [ ] Create commit\n    - [ ] Push changes\n    - [ ] Create PR\/release","keyword":"always-create-issue-rule"},{"name":"always-read-full-files","text":"- When reading files ALWAYS read the FULL content. NEVER skim or skip parts.\n","keyword":"always-read-full-files;"},{"name":"analytics-block","text":"## üìä Analytics\n> üí° *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n  - [Event]\n    - Id: [event_id]\n    - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n    - Properties:\n      - [Property Name]: [Data Type] - [Description of the property]\n      - [More properties as needed]\n      - [...]\n  - [More events as needed]\n  - [...]\n","keyword":"analytics-block;"},{"name":"AppLifeCycleService","text":"import 'package:flutter\/material.dart';\nimport 'package:friday_energy\/core\/services\/cache_service.dart';\nimport 'package:get_it\/get_it.dart';\nimport 'package:loglytics\/loglytics.dart';\n\n\/\/\/ Service that listens to app lifecycle changes and triggers appropriate actions.\n\/\/\/\n\/\/\/ This service is responsible for triggering cache save operations when the app\n\/\/\/ is paused or closed, to ensure data is preserved for offline use.\nclass AppLifecycleService with WidgetsBindingObserver, Loglytics {\n  AppLifecycleService() {\n    _initialize();\n  }\n\n  \/\/ üìç LOCATOR ------------------------------------------------------------------------------- \\\\\n\n  static AppLifecycleService get locate => GetIt.I.get();\n  static void registerSingleton() => GetIt.I.registerLazySingleton(AppLifecycleService.new);\n\n  \/\/ üß© DEPENDENCIES -------------------------------------------------------------------------- \\\\\n\n  CacheService get _cacheService => CacheService.locate;\n\n  \/\/ üé¨ INIT & DISPOSE ------------------------------------------------------------------------ \\\\\n\n  void _initialize() {\n    log.info('Initializing AppLifecycleService...');\n    WidgetsBinding.instance.addObserver(this);\n    log.info('AppLifecycleService initialized');\n  }\n\n  void dispose() => WidgetsBinding.instance.removeObserver(this);\n\n  \/\/ üîä LISTENERS ----------------------------------------------------------------------------- \\\\\n\n  @override\n  void didChangeAppLifecycleState(AppLifecycleState state) {\n    log.info('App lifecycle state changed to: $state');\n  }\n\n  \/\/ üìç LOCATOR ------------------------------------------------------------------------------- \\\\\n  \/\/ üß© DEPENDENCIES -------------------------------------------------------------------------- \\\\\n  \/\/ üé¨ INIT & DISPOSE ------------------------------------------------------------------------ \\\\\n  \/\/ üëÇ LISTENERS ----------------------------------------------------------------------------- \\\\\n  \/\/ ‚ö°Ô∏è OVERRIDES ----------------------------------------------------------------------------- \\\\\n  \/\/ üé© STATE --------------------------------------------------------------------------------- \\\\\n  \/\/ üõ† UTIL ---------------------------------------------------------------------------------- \\\\\n  \/\/ üß≤ FETCHERS ------------------------------------------------------------------------------ \\\\\n  \/\/ üèóÔ∏è HELPERS ------------------------------------------------------------------------------- \\\\\n  \/\/ ü™Ñ MUTATORS ------------------------------------------------------------------------------ \\\\\n}\n","keyword":";applifecycleservice"},{"name":"arg first part","text":"{argument name=\""},{"name":"Argument","text":"{snippet name=\"arg first part\"}{clipboard}\"}","keyword":";arg"},{"name":"behaviours-block","text":"# üõ†Ô∏è Behaviours\n> üí° *Which states or events should the component act upon? How should it behave when nothing happens?*\n\n[How a component should act when a state is, or an event happens]\n\n- [Component]\n  - [State or event]\n      - Should [Behaviour]\n      - [More behaviours if needed]\n      - [...]\n  - [More states or events if needed]\n  - [...]\n    - [Sub-component]\n      - [More states or events if needed]\n      - [...]\n    - [More sub-components if needed]\n    - [...]\n\n- [More components if needed]\n- [...]\n","keyword":"behaviours-block;"},{"name":"Brian Speech Bubble","text":"<div class=\"gh-brian-speech\">\n    <div class=\"gh-brian-avatar\">\n        <img src=\"\/assets\/images\/chars\/brian\/brian-chat-001.png\" alt=\"Brian\" \n             onerror=\"this.src='data:image\/svg+xml,%3Csvg xmlns=%22http:\/\/www.w3.org\/2000\/svg%22 viewBox=%220 0 100 120%22%3E%3Crect width=%22100%22 height=%22120%22 fill=%22%23e6f7ff%22\/%3E%3Ctext x=%2250%22 y=%2260%22 text-anchor=%22middle%22 font-family=%22Arial%22 font-size=%2214%22 fill=%22%231a365d%22%3EBrian%3C\/text%3E%3C\/svg%3E'\">\n    <\/div>\n    <div class=\"gh-brian-speech-bubble\">\n\n<p>{argument name=\"paragraph\"}<\/p>\n\n    <\/div>\n<\/div>","keyword":"brian-speech-bubble"},{"name":"Brian Thought Bubble","text":"<div class=\"gh-brian-thought\">\n    <div class=\"gh-brian-avatar\">\n        <img src=\"\/assets\/images\/chars\/brian\/brian-chat-010.png\" alt=\"Brian\" \n             onerror=\"this.src='data:image\/svg+xml,%3Csvg xmlns=%22http:\/\/www.w3.org\/2000\/svg%22 viewBox=%220 0 100 120%22%3E%3Crect width=%22100%22 height=%22120%22 fill=%22%23e6f7ff%22\/%3E%3Ctext x=%2250%22 y=%2260%22 text-anchor=%22middle%22 font-family=%22Arial%22 font-size=%2214%22 fill=%22%231a365d%22%3EBrian%3C\/text%3E%3C\/svg%3E'\">\n    <\/div>\n    <div class=\"gh-brian-thought-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"brian-thought-bubble"},{"name":"Brian Thought Bubble Raw","text":"<div class=\"gh-brian-thought\">\n       <div class=\"gh-brian-thought-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"brian-thought-bubble-raw"},{"name":"Brian Thought Bubble Raw","text":"<div class=\"gh-brian-thought\">\n        <div class=\"gh-brian-thought-bubble\">\n        <p>{argument name=\"paragraph\"}<\/p>\n    <\/div>\n<\/div>","keyword":"brian-thought-bubble-raww"},{"name":"BuildContext context","text":"BuildContext context","keyword":";bc"},{"name":"buildview","text":"class {argument name=\"ViewName\"}<T extends BaseViewModel> extends PewView<T> {\n  const {argument name=\"ViewName\"}({\n    Key? key,\n    required super.builder,\n    super.viewModelBuilder,\n    super.argumentBuilder,\n    super.preInitBuilder,\n    super.child,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) => PewViewBuilder<T>(\n    \/\/\n    key: null,\n    child: child,\n    viewModelBuilder: null,\n    argumentBuilder: argumentBuilder,\n    preInitBuilder: null,\n    \/\/\n    builder: (context, model, isInitialised, child) => TScaffold(\n      \/\/\n      key: null,\n      foregroundContent: const [],\n      backgroundContent: const [],\n      footers: const [],\n      appBar: null,\n      bottomNavigationBar: null,\n      backgroundColor: null,\n      headerBackgroundColor: null,\n      footerBackgroundColor: null,\n      \/\/\n      showBackgroundPattern: true,\n      resizeToAvoidBottomInset: true,\n      child: TSliverBody(\n        controller: null,\n        appBarFooter: null,\n        \/\/\n        isEmpty: false,\n        emptyPlaceholder: (context) => const TEmptyPlaceholder(title: '{argument name=\"ViewName\"}'),\n        \/\/\n        appBar: const TSliverAppBar(\n          icon: null,\n          title: null,\n          onBackPressed: null,\n        ),\n        \/\/\n        child: null,\n        children: const [],\n        sliverChild: null,\n        slivers: const [],\n      ),\n    ),\n  );\n}","keyword":"buildview;"},{"name":"BWAI Image Prompt","text":"instagram carousel slide that says \"WHAT THE PROMPT?\" as title - the background must depict an environment related to the title and include elements related to the title - style must be surrealism 3d digital art realistic fantasy vibes - having to do with computers - the title must be thumbail youtube like phat letters - there has to be enough space for me to add actual content and sticker at least 3\/4 of the image - title max 1\/4 of image - use high contrast colors - add gradients and different colors for separate words sometimes - do not add my handle - have the protagonist interact with an element of image - dark background"},{"name":"PPP USPs","text":"üîë Onbeperkt toegang tot de volledige cursus Prompten Voor Professionals.\nüíñ Onbeperkt toegang tot alle doorgeteste premium templates, prompts, downloads en workflows uit de praktijk.\nü§ñ Onbeperkt toegang tot alle \"Brian met AI\" custom agents (ChatGPT, Gemini) waaronder de BWAI Instructeur, BWAI Onderzoeker, BWAI Project-Manager en velen meer\nüì® Wekelijks gratis nieuwe lessen, prompts en relevante updates rechtstreeks in je mailbox.\nü§û Gegarandeerd altijd correct en actueel middels wekelijks relevantie check (met AI üòâ) op alle content.\nüíØ Begrijp niet alleen hoe, maar ook waarom iets w√©l of niet werkt. Beheers de methode in √©lke app.\nüíØ Nooit meer ruzie met je beeldscherm. De juiste prompt = het juiste antwoord.\nüíØ Investering terug in uren, geen maanden. Binnen 10 lessen prompten alsof je het al jaren doet.","keyword":";usps"},{"name":"bwai-icon","text":"window.navIcons?.setIcon('{argument name=\"name\"}', `{argument name=\"svg\"}`);","keyword":"bwai-icon"},{"name":"checkpoints-block","text":"## üöÄ Checkpoints\n> üí° *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n","keyword":"checkpoints-block;"},{"name":"Claude Yolo Mode","text":"--dangerously-skip-permissions","keyword":";yolo"},{"name":"commit","text":"Commit the current work following project conventions.  \nAlways show the exact commands being executed and their results.  \nFollow these steps in order:\n\n1. Run `git status` to review staged, modified, and untracked files.\n2. Run `git log --oneline -5` to check recent commit patterns.\n3. Prepare the commit message using the format:\n   - Start with `[PROJECTKEY{-ISSUENR (if applicable)}]` prefix\n   - Use imperative mood (e.g., \"Add\" not \"Added\")\n   - Keep first line under 50 characters\n   - No forbidden terms, signatures, or extra lines\n4. Update relevant {project_docs} before committing.\n5. Update relevant {release_docs} before committing.\n   - Do not use emojis\n   - Use simple english non-technical terms\n6. Stage files:\n   - If user specified: `git add <files>`\n   - If not specified: `git add -A`\n7. Commit with `git commit -m \"[PROJECTKEY{-ISSUENR (if applicable)}] Commit message\"`.\n8. Verify remote with `git remote -v` and branch with `git branch --show-current`.\n9. Push changes:\n   - If branch exists remotely: `git push`\n   - If new branch: `git push -u origin <branch>`\n10. Confirm push success. If on a feature branch, suggest creating a PR.\n11. If any step fails, show the exact error message, explain the issue, suggest a fix, and provide recovery steps.\n---\n<relevant_project_docs>\n{snippet name=\"all-living-docs\"}\n<\/relevant_project_docs>\n\n<relevant_release_docs>\n{snippet name=\"all-release-docs\"}\n<\/relevant_release_docs>\n","keyword":"commit;"},{"name":"components-block","text":"## üèóÔ∏è Components\n> üí° *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n","keyword":"components-block;"},{"name":"create-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\ndoc_location: {argument name=\"doc_location\"}\nuser_request: {argument name=\"user_request\"}\n","keyword":"create-doc;"},{"name":"create-event-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"event-template\"}\n<\/template>\n","keyword":"create-event-doc;"},{"name":"create-feedback","text":"I have feedback about {subject}.\n- Create a highly detailed feedback document in {doc_location} based on {my_feedback}.\n- Aim the feedback at other agents to improve {subject}.\n- Make sure it is clear, actionable, and easy to understand.\n- Add context about our conversation if relevant.\n- Add a suggested solution if relevant.\n{snippet name=\"scope-integrity\"}\n---\nafter registering the feedback continue our conversation where we left off.\n---\nsubject: {argument name=\"subject\"}\ndoc_location: [PROJECT_ROOT]\/{argument name=\"doc_location\"}\nmy_feedback: {argument name=\"my_feedback\"}\n","keyword":"create-feedback;"},{"name":"create-issue-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"issue-template\"}\n<\/template>\n","keyword":"create-issue-doc;"},{"name":"create-meeting-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"meeting-template\"}\n<\/template>\n","keyword":"create-meeting-doc;"},{"name":"create-milestone-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"milestone-template\"}\n<\/template>\n","keyword":"create-milestone-doc;"},{"name":"create-questions-doc","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}, {questions_doc} and {end_goal}.\n2. Determine next best set of 5 questions where the answers will provide the most value toward achieving the {end_goal}.\n3. Present the questions following {output_format} in {questions_doc}.\n4. Await the user's feedback and answers.\n5. Analyze, evaluate and understand the feedback and answers to the questions.\n6. Update {source} with the new information.\n7. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each answer.\n- ALWAYS reassess and adapt the next most valuable question set of {question_types} based on {source} and {end_goal}.\n- ALWAYS ask low-cognitive yes\/no\/multiple-choice questions only.\n- ALWAYS keep last state of {source} and the {end_goal} as the guiding point for all questions.\n- ALWAYS ask {question_count} question(s) at a time.\n- ALWAYS format your questions following {output_format}.\n- ALWAYS output your questions to {questions_doc}.\n<\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask open-ended questions.\n<\/operating_constraints>\n\n<question_types>\n- üîÑ Simplify (remove complexity)\n- ‚ùì Clarify (confirm meaning\/assumptions)\n- üîß Improve (optimize\/enhance)\n- ‚ûï Expand (add missing cases\/features)\n- ‚ûñ Reduce (scope\/MVP focus)\n- ‚öñÔ∏è Prioritize (decide what matters most)\n- üö® Risk (identify risks\/edge cases)\n- ‚úÖ Validate (check feasibility\/requirements met)\n<\/question_types>\n\n<output_format>\n- [Question Number]. [Question Text]\n  - [ ] [Answer Option]\n  - [More options as needed]\n  - [...]\n  - [ ]. Research the project\n  - [ ]. Research the web\n  - [ ]. Skip\n- [...]\n<\/output_format>\n\nrole: Strategic Questioning Expert\nexpertise: systematically refining understanding and direction through structured questioning frameworks\noperating_mode: Most Valuable Question (MVQ) Mode\nquestion_count: {argument name=\"question_count\"}\nquestions_doc: living question document (ask path if unclear)\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request: \n","keyword":"create-questions-doc;"},{"name":"create-research-doc","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Identify parts that can benefit from external research regarding best practices, approach and\/or missing documentation.\n3. Create request prompts for each part where you ask an advanced AI agent for help using deep research methods to find the missing information.\n4. Create the {research_document} with all the prompts, including space for the answers and relevant metadata regarding the {source}.\n5. Ask the user to execute the prompts and update the document.\n6. Await the user's feedback and answers.\n7. Update {source} with the new information.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\nrole: Research Orchestration Specialist\nexpertise: identifying knowledge gaps, generating precise research prompts, and integrating external findings into documents with strict adherence to conventions\noperating_mode: Convention Adherence Mode\nresearch_document: living research document (ask path if unclear)\n\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"create-research-doc;"},{"name":"create-roadmap-doc","text":"Create an initial version of {template} based on my {user_request} in {doc_location}.\n\n- Populate only the first section and any section that has enough information to be filled out.\n- Add missing sections only when information for that section becomes available.\n\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"ins-context-rot-awareness\"}\n\n{snippet name=\"today-is-date\"}\n---\n<template>\n{snippet name=\"roadmap-template\"}\n<\/template>\n","keyword":"create-roadmap-doc;"},{"name":"create-sliced-issue","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source}.\n2. Determine a slice of work that can be developed within a single conversation, respecting token context window limitations.\n3. Create a detailed development plan for this slice of work in {plan_doc_location}. This plan should be actionable for another development agent.\n4. Update {source} to reference the new development plan, indicating which part of the work is now being addressed.\n5. Await user confirmation to proceed with the development as per the new plan.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- A feasible slice of work is identified from {source}.\n- A comprehensive development plan is created at {plan_doc_location}.\n- {source} is updated to link to the new development plan.\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\nrole: Issue Slicing & Planning Specialist\nexpertise: analyzing requirements, breaking down complex tasks into manageable development slices, and creating actionable development plans\noperating_mode: Slice & Plan Mode\n\nsource: {argument name=\"source\"}\nplan_doc_location: {argument name=\"plan_doc_location\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:","keyword":"create-sliced-issue;"},{"name":"Date","text":"{date}","keyword":";date"},{"name":"De App Specialist BTW","text":"NL001117421B50","keyword":";btw"},{"name":"deliverables-block","text":"## üì¶ Deliverables\n> üí° *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n","keyword":"deliverables-block;"},{"name":"dev-plan-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji and Descriptive Title]\n> üí° *[Brief description of what this template is for and its primary purpose]*\n\n## üéØ End Goal\n> üí° *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## üë§ User Stories\n> üí° *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## üë§ User Stories\n> üí° *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## üë§ User Stories\n> üí° *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n    - I want [Desired Goal] so that [Benefit].\n    - [More user stories for this user type if needed]\n    - [...]\n\n- [More user types if needed]\n- [...]\n\n## üìù Initial Requirements\n*What should the system\/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## üìä Analytics\n> üí° *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n    - [Event]\n        - Id: [event_id]\n        - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n        - Properties:\n            - [Property Name]: [Data Type] - [Description of the property]\n            - [More properties as needed]\n            - [...]\n    - [More events as needed]\n    - [...]\n\n## üîí Security Rules\n> üí° *What are the access control rules for data and infrastructure?*\n\n[A definition of security rules, policies, and configurations for different parts of the system, such as database access, API permissions, or infrastructure settings.]\n\n- [Parent Item]\n    - [Rule or Policy]\n        - [Condition or rule, e.g., \"Allowed if auth.uid == userId\"].\n    - [More rules or policies as needed]\n    - [...]\n- [More parent items as needed]\n- [...]\n\n## üì¶ Deliverables\n> üí° *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## üì¶ Deliverables\n> üí° *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## ‚úÖ Acceptance Criteria\n> üí° *How do we confirm that an item is complete and correct?*\n\n[A list of specific, verifiable conditions that must be met for a requirement, component, or deliverable to be considered complete and accepted.]\n\n- [Parent Item]\n    - [Acceptance criterion]\n    - [More acceptance criteria if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n\n## üé® UI\/UX Specifications\n> üí° *How should something look, feel, and behave?*\n\n[Detailed visual and interactive specifications for components, especially where prototypes are insufficient. This includes notes on spacing, animations, and other nuanced UI\/UX behaviors.]\n\n- [Parent Item]\n    - [UI\/UX Behaviour]\n    - [More UI\/UX Behaviours if needed]\n\n- [More items if needed]\n- [...]\n\n## ‚úçÔ∏è Suggested Approach\n> üí° *How should this be implemented?*\n\n[A high-level implementation plan presented as pseudo-code or a step-by-step guide. This should be based on existing project conventions and patterns, detailing class names, objects, and structures to guide the developer. It should be adaptable into actual code.]\n\n- [Plan Phase]\n    - [Details or pseudo-code as a step]\n    - [More details, steps or pseudo-code as needed]\n    - [...]\n\n- [More phases if needed]\n- [...]\n","keyword":"dev-plan-template;"},{"name":"develop","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1.  Thoroughly analyze the {dev_plan} to understand all requirements, components, and the suggested approach.\n2.  Implement the required features by creating or modifying files.\n3.  Strictly follow all project conventions, principles, and architectural patterns.\n4.  For any UI work, use the project's design system and reusable components.\n5.  Ensure all code is clean, self-documenting, and free of warnings or errors.\n6.  After implementing a deliverable, confirm that all its acceptance criteria are met.\n7.  Continue until all deliverables in the {dev_plan} are completed and the {end_goal} is achieved.\n<\/mode_procedure>\n\n<acceptance_criteria>\n- All deliverables outlined in the {dev_plan} are fully implemented.\n- All acceptance criteria are met.\n- The final code adheres to all project conventions and principles.\n- {end_goal} is fully achieved.\n<\/acceptance_criteria>\n\n<operating_rules>\n{snippet name=\"ins-project-deep-research\"}\n{snippet name=\"ins-development-principles\"}\n{snippet name=\"ins-scope-integrity\"}\n{snippet name=\"always-read-full-files\"}\n<\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {dev_plan}.\n- NEVER introduce new architectural patterns without explicit instruction.\n- NEVER write code that violates project conventions.\n<\/operating_constraints>\n\n<project_conventions>\n{snippet name=\"all-flutter-concepts\"}\n{snippet name=\"all-flutter-instructions\"}\n<\/project_conventions>\n\nrole: Senior Full-Stack Engineer\nexpertise: building high-quality, maintainable, and scalable applications by strictly following established conventions and development plans\noperating_mode: Development Mode\n\n---\ndev_plan: {argument name=\"dev_plan\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request: {argument name=\"user_request\"}\n","keyword":"develop;"},{"name":"dir repos","text":"~\/Repos\/","keyword":";repos"},{"name":"doc-front-matter","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n","keyword":"doc-front-matter;"},{"name":"DOCS: cloud functions v2","text":"Cloud Functions (2nd gen)\nPowered by Cloud Run and Eventarc, Cloud Functions for Firebase (2nd gen) gives you more powerful infrastructure, advanced control over performance and scalability, and more control of the functions runtime. For more information about 2nd gen, see Cloud Functions for Firebase (2nd gen). To see more about the 1st gen instead, see Extend Cloud Firestore with Cloud Functions.\n\nCloud Firestore function triggers\nThe Cloud Functions for Firebase SDK exports the following Cloud Firestore event triggers to let you create handlers tied to specific Cloud Firestore events:\n\nNode.js\nPython\nEvent Type\tTrigger\nonDocumentCreated\tTriggered when a document is written to for the first time.\nonDocumentUpdated\tTriggered when a document already exists and has any value changed.\nonDocumentDeleted\tTriggered when a document is deleted.\nonDocumentWritten\tTriggered when onDocumentCreated, onDocumentUpdated or onDocumentDeleted is triggered.\nonDocumentCreatedWithAuthContext\tonDocumentCreated with additional authentication information\nonDocumentWrittenWithAuthContext\tonDocumentWritten with additional authentication information\nonDocumentDeletedWithAuthContext\tonDocumentDeleted with additional authentication information\nonDocumentUpdatedWithAuthContext\tonDocumentUpdated with additional authentication information\nCloud Firestore events trigger only on document changes. An update to a Cloud Firestore document where data is unchanged (a no-op write) does not generate an update or write event. It is not possible to add events to specific fields.\n\nIf you don't have a project enabled for Cloud Functions for Firebase yet, then read Get started with Cloud Functions for Firebase (2nd gen) to configure and set up your Cloud Functions for Firebase project.\n\nWriting Cloud Firestore-triggered functions\nDefine a function trigger\nTo define a Cloud Firestore trigger, specify a document path and an event type:\n\nNode.js\nPython\n\nimport {\n  onDocumentWritten,\n  onDocumentCreated,\n  onDocumentUpdated,\n  onDocumentDeleted,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.myfunction = onDocumentWritten(\"my-collection\/{docId}\", (event) => {\n   \/* ... *\/ \n});\nDocument paths can reference either a specific document or a wildcard pattern.\n\nSpecify a single document\nIf you want to trigger an event for any change to a specific document then you can use the following function.\n\nNode.js\nPython\n\nimport {\n  onDocumentWritten,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.myfunction = onDocumentWritten(\"users\/marie\", (event) => {\n  \/\/ Your code here\n});\nSpecify a group of documents using wildcards\nIf you want to attach a trigger to a group of documents, such as any document in a certain collection, then use a {wildcard} in place of the document ID:\n\nNode.js\nPython\n\nimport {\n  onDocumentWritten,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.myfunction = onDocumentWritten(\"users\/{userId}\", (event) => {\n  \/\/ If we set `\/users\/marie` to {name: \"Marie\"} then\n  \/\/ event.params.userId == \"marie\"\n  \/\/ ... and ...\n  \/\/ event.data.after.data() == {name: \"Marie\"}\n});\nIn this example, when any field on any document in users is changed, it matches a wildcard called userId.\n\nIf a document in users has subcollections and a field in one of those subcollections' documents is changed, the userId wildcard is not triggered.\n\nWildcard matches are extracted from the document path and stored into event.params. You may define as many wildcards as you like to substitute explicit collection or document IDs, for example:\n\nNode.js\nPython\n\nimport {\n  onDocumentWritten,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.myfunction = onDocumentWritten(\"users\/{userId}\/{messageCollectionId}\/{messageId}\", (event) => {\n    \/\/ If we set `\/users\/marie\/incoming_messages\/134` to {body: \"Hello\"} then\n    \/\/ event.params.userId == \"marie\";\n    \/\/ event.params.messageCollectionId == \"incoming_messages\";\n    \/\/ event.params.messageId == \"134\";\n    \/\/ ... and ...\n    \/\/ event.data.after.data() == {body: \"Hello\"}\n});\nYour trigger must always point to a document, even if you're using a wildcard. For example, users\/{userId}\/{messageCollectionId} is not valid because {messageCollectionId} is a collection. However, users\/{userId}\/{messageCollectionId}\/{messageId} is valid because {messageId} will always point to a document.\n\nEvent Triggers\nTrigger a function when a new document is created\nYou can trigger a function to fire any time a new document is created in a collection. This example function triggers every time a new user profile is added:\n\nNode.js\nPython\n\nimport {\n  onDocumentCreated,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.createuser = onDocumentCreated(\"users\/{userId}\", (event) => {\n    \/\/ Get an object representing the document\n    \/\/ e.g. {'name': 'Marie', 'age': 66}\n    const snapshot = event.data;\n    if (!snapshot) {\n        console.log(\"No data associated with the event\");\n        return;\n    }\n    const data = snapshot.data();\n\n    \/\/ access a particular field as you would any JS property\n    const name = data.name;\n\n    \/\/ perform more operations ...\n});\nFor additional authentication information, use onDocumentCreatedWithAuthContext.\n\nTrigger a function when a document is updated\nYou can also trigger a function to fire when a document is updated. This example function fires if a user changes their profile:\n\nNode.js\nPython\n\nimport {\n  onDocumentUpdated,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.updateuser = onDocumentUpdated(\"users\/{userId}\", (event) => {\n    \/\/ Get an object representing the document\n    \/\/ e.g. {'name': 'Marie', 'age': 66}\n    const newValue = event.data.after.data();\n\n    \/\/ access a particular field as you would any JS property\n    const name = newValue.name;\n\n    \/\/ perform more operations ...\n});\nFor additional authentication information, use onDocumentUpdatedWithAuthContext.\n\nTrigger a function when a document is deleted\nYou can also trigger a function when a document is deleted. This example function fires when a user deletes their user profile:\n\nNode.js\nPython\n\nimport {\n  onDocumentDeleted,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.deleteuser = onDocumentDeleted(\"users\/{userId}\", (event) => {\n    \/\/ Get an object representing the document\n    \/\/ e.g. {'name': 'Marie', 'age': 66}\n    const snap =  event.data;\n    const data =  snap.data();\n\n    \/\/ perform more operations ...\n});\nFor additional authentication information, use onDocumentDeletedWithAuthContext.\n\nTrigger a function for all changes to a document\nIf you don't care about the type of event being fired, you can listen for all changes in a Cloud Firestore document using the \"document written\" event trigger. This example function fires if a user is created, updated, or deleted:\n\nNode.js\nPython\n\nimport {\n  onDocumentWritten,\n  Change,\n  FirestoreEvent\n} from \"firebase-functions\/v2\/firestore\";\n\nexports.modifyuser = onDocumentWritten(\"users\/{userId}\", (event) => {\n    \/\/ Get an object with the current document values.\n    \/\/ If the document does not exist, it was deleted\n    const document =  event.data.after.data();\n\n    \/\/ Get an object with the previous document values\n    const previousValues =  event.data.before.data();\n\n    \/\/ perform more operations ...\n});\nFor additional authentication information, use onDocumentWrittenWithAuthContext.\n\nReading and Writing Data\nWhen a function is triggered, it provides a snapshot of the data related to the event. You can use this snapshot to read from or write to the document that triggered the event, or use the Firebase Admin SDK to access other parts of your database.\n\nEvent Data\nReading Data\nWhen a function is triggered, you might want to get data from a document that was updated, or get the data prior to update. You can get the prior data by using event.data.before, which contains the document snapshot before the update. Similarly, event.data.after contains the document snapshot state after the update.\n\nNode.js\nPython\n\nexports.updateuser2 = onDocumentUpdated(\"users\/{userId}\", (event) => {\n    \/\/ Get an object with the current document values.\n    \/\/ If the document does not exist, it was deleted\n    const newValues =  event.data.after.data();\n\n    \/\/ Get an object with the previous document values\n    const previousValues =  event.data.before.data();\n});\nYou can access properties as you would in any other object. Alternatively, you can use the get function to access specific fields:\n\nNode.js\nPython\n\n\/\/ Fetch data using standard accessors\nconst age = event.data.after.data().age;\nconst name = event.data.after.data()['name'];\n\n\/\/ Fetch data using built in accessor\nconst experience = event.data.after.data.get('experience');\nWriting Data\nEach function invocation is associated with a specific document in your Cloud Firestore database. You can access that document in the snapshot returned to your function.\n\nThe document reference includes methods like update(), set(), and remove() so you can modify the document that triggered the function.\n\nNode.js\nPython\n\nimport { onDocumentUpdated } from \"firebase-functions\/v2\/firestore\";\n\nexports.countnamechanges = onDocumentUpdated('users\/{userId}', (event) => {\n  \/\/ Retrieve the current and previous value\n  const data = event.data.after.data();\n  const previousData = event.data.before.data();\n\n  \/\/ We'll only update if the name has changed.\n  \/\/ This is crucial to prevent infinite loops.\n  if (data.name == previousData.name) {\n    return null;\n  }\n\n  \/\/ Retrieve the current count of name changes\n  let count = data.name_change_count;\n  if (!count) {\n    count = 0;\n  }\n\n  \/\/ Then return a promise of a set operation to update the count\n  return data.after.ref.set({\n    name_change_count: count + 1\n  }, {merge: true});\n\n});\nWarning: Any time you write to the same document that triggered a function, you are at risk of creating an infinite loop. Use caution and ensure that you safely exit the function when no change is needed.\nAccess user authentication information\nIf you use one of the of the following event types, you can access user authentication information about the principal that triggered the event. This information is in addition to the information returned in the base event.\n\nNode.js\nPython\nonDocumentCreatedWithAuthContext\nonDocumentWrittenWithAuthContext\nonDocumentDeletedWithAuthContext\nonDocumentUpdatedWithAuthContext\nFor information about the data available in the authentication context, see Auth Context. The following example demonstrates how to retrieve authentication information:\n\nNode.js\nPython\n\nimport { onDocumentWrittenWithAuthContext } from \"firebase-functions\/v2\/firestore\"\n\nexports.syncUser = onDocumentWrittenWithAuthContext(\"users\/{userId}\", (event) => {\n    const snapshot = event.data.after;\n    if (!snapshot) {\n        console.log(\"No data associated with the event\");\n        return;\n    }\n    const data = snapshot.data();\n\n    \/\/ retrieve auth context from event\n    const { authType, authId } = event;\n\n    let verified = false;\n    if (authType === \"system\") {\n      \/\/ system-generated users are automatically verified\n      verified = true;\n    } else if (authType === \"unknown\" || authType === \"unauthenticated\") {\n      \/\/ admin users from a specific domain are verified\n      if (authId.endsWith(\"@example.com\")) {\n        verified = true;\n      }\n    }\n\n    return data.after.ref.set({\n        created_by: authId,\n        verified,\n    }, {merge: true}); \n}); \nData outside the trigger event\nCloud Functions execute in a trusted environment. They are authorized as a service account on your project, and you can perform reads and writes using the Firebase Admin SDK:\n\nNode.js\nPython\n\nconst { initializeApp } = require('firebase-admin\/app');\nconst { getFirestore, Timestamp, FieldValue } = require('firebase-admin\/firestore');\n\ninitializeApp();\nconst db = getFirestore();\n\nexports.writetofirestore = onDocumentWritten(\"some\/doc\", (event) => {\n    db.doc('some\/otherdoc').set({ ... });\n  });\n\n  exports.writetofirestore = onDocumentWritten('users\/{userId}', (event) => {\n    db.doc('some\/otherdoc').set({\n      \/\/ Update otherdoc\n    });\n  });\nNote: Reads and writes performed in Cloud Functions are not controlled by your security rules, they can access any part of your database.\nLimitations\nNote the following limitations for Cloud Firestore triggers for Cloud Functions:\n\nCloud Functions (1st gen) prerequisites an existing \"(default)\" database in Firestore native mode. It does not support Cloud Firestore named databases or Datastore mode. Please use Cloud Functions (2nd gen) to configure events in such cases.\nOrdering is not guaranteed. Rapid changes can trigger function invocations in an unexpected order.\nEvents are delivered at least once, but a single event may result in multiple function invocations. Avoid depending on exactly-once mechanics, and write idempotent functions.\nCloud Firestore in Datastore mode requires Cloud Functions (2nd gen). Cloud Functions (1st gen) does not support Datastore mode.\nA trigger is associated with a single database. You cannot create a trigger that matches multiple databases.\nDeleting a database does not automatically delete any triggers for that database. The trigger stops delivering events but continues to exist until you delete the trigger.\nIf a matched event exceeds the maximum request size, the event might not be delivered to Cloud Functions (1st gen).\nEvents not delivered because of request size are logged in platform logs and count towards the log usage for the project.\nYou can find these logs in the Logs Explorer with the message \"Event cannot deliver to Cloud function due to size exceeding the limit for 1st gen...\" of error severity. You can find the function name under the functionName field. If the receiveTimestamp field is still within an hour from now, you can infer the actual event content by reading the document in question with a snapshot before and after the timestamp.\nTo avoid such cadence, you can:\nMigrate and upgrade to Cloud Functions (2nd gen)\nDownsize the document\nDelete the Cloud Functions in question\nYou can turn off the logging itself using exclusions but note that the offending events will still not be delivered.","keyword":";docs:cloud-functions-v2"},{"name":"effort-breakdown-estimates-block","text":"## ‚è±Ô∏è Effort Breakdown & Estimates\n> üí° *How long will it take?*\n\n[The ideal and most likely outcome for design, refinement, front-end, back-end and operational work, where QA is calculated as 25% of core work, testing as 15% and and contingency buffer defaults to 10% of total work, but should be increased if there is a high risk of unforeseen problems along the way.]\n\n### Core Work Estimates\n\n| Work Type      | Hours       | Reasoning                                                                         |\n|:---------------|:------------|:----------------------------------------------------------------------------------|\n| **Design**     | [ X ]       | [ Explanation of design effort needed, or 0 if none ]                             |\n| **Refinement** | [ X ]       | [ Effort needed for planning, detailing requirements, and refining the approach ] |\n| **Front-end**  | [ X ]       | [ Front-end development tasks (UI implementation, state management, etc.) ]       |\n| **Backend**    | [ X ]       | [ Backend development tasks (API endpoints, database changes, logic, etc.) ]      |\n| **Operations** | [ X ]       | [ DevOps, deployment, configuration tasks ]                                       |\n| **Core Total** | **[ Sum ]** |                                                                                   |\n\n### QA, Testing & Delay Margin\n\n| Work Type        | Hours | Percentage | Reasoning                                                  |\n|:-----------------|:------|:-----------|:-----------------------------------------------------------|\n| **QA**           | [ X ] | **25%**    | [ 25% of core work total for quality assurance ]           |\n| **Testing**      | [ X ] | **15%**    | [ 15% of core work total for testing effort ]              |\n| **Delay Margin** | [ X ] | **10%+**   | [ 10% minimum, increase for high-risk\/unknown complexity ] |\n\n### Total Estimate\n**Total Hours:** [ Grand Total ]\n","keyword":"effort-breakdown-estimates-block;"},{"name":"end-goal-block","text":"## üéØ End Goal\n> üí° *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n","keyword":"end-goal-block;"},{"name":"essential-conditions-block","text":"## üõ°Ô∏è Essential Conditions\n> üí° *What should always go right? What can never go wrong? What should always be? What should never be?*\n\n[A set of fundamental measurable conditions that must always be met. These serve as direct input for unit and end-to-end tests.]\n\n- [Parent Item]\n  - [Essential condition]\n  - [More essential conditions if needed]\n  - [...]\n\n- [More items if needed]\n- [...]\n","keyword":"essential-conditions-block;"},{"name":"event-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# üìã Event: [Event Title\/Topic]\n> üí° *What happened? What was it? Who participated?*\n\n[Describe \/ show the event]\n","keyword":"event-template;"},{"name":"example snippet clipboard","text":"\n```\n<example>\n{clipboard}\n<\/example>\n```\n","keyword":";ee"},{"name":"feedback-id","text":"\/\/ TODO(GPT-AGENT):\n","keyword":"feedback-id;"},{"name":"flutter pub global run intl_utils:generate","text":"flutter pub global run intl_utils:generate","keyword":";fg"},{"name":"flutter pub run build_runner build --delete-conflicting-outputs","text":"flutter pub run build_runner build --delete-conflicting-outputs","keyword":";fb"},{"name":"flutter-con-abstracts","text":"# Abstracts\n\nAbstract classes and mixins are used to define contracts, interfaces, or shared structures that other classes must implement or can use. They are fundamental to creating a consistent and maintainable architecture.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/abstracts\/<abstract_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The abstract class or mixin name is `PascalCase`.\n\n**Example:** `lib\/data\/abstracts\/has_id.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: They are defined using the `abstract class` or `mixin` keywords.\n-   **Purpose**:\n    -   **Interface\/Contract**: An `abstract class` can define a set of methods and properties that concrete classes must implement. This enforces a common API. For example, `SupabaseDto` requires all DTOs to have an `id` and a `toJson()` method.\n    -   **Shared Structure**: An `abstract class` can also provide a partial implementation that subclasses can inherit and extend.\n    -   **Shared Behavior**: A `mixin` can provide a set of methods and properties that can be added to a class without inheritance.\n-   **Abstract Methods**: Methods without a body are declared, forcing the implementing\/extending class to provide the implementation.\n\n## 3. Examples\n\n### Abstract Class as an Interface\n\n```dart\n\/\/ lib\/core\/dto\/supabase_dto.dart\n\nabstract class SupabaseDto {\n  \/\/\/ The unique identifier for the DTO.\n  String get id;\n\n  \/\/\/ Converts this DTO instance into a JSON map.\n  Map<String, dynamic> toJson();\n\n  DateTime get createdAt;\n  DateTime get updatedAt;\n}\n```\n\n### Abstract Class as a Base\n\n```dart\n\/\/ lib\/state\/abstracts\/initialisable.dart\n\nabstract class Initialisable {\n  Initialisable() {\n    initialise();\n  }\n\n  var _isInitialised = false;\n  Future get isReady => _isReady.future;\n\n  @mustCallSuper\n  void initialise() => markAsReady();\n  \n  \/\/ ... other implemented methods\n}\n```","keyword":"flutter-con-abstracts;"},{"name":"flutter-con-annotations","text":"# Annotations\n\nAnnotations are a form of metadata that can be added to your code. They don't affect the execution of the code itself but provide valuable information to developers or tools.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/state\/annotations\/`\n-   **Naming**: Files are named in `snake_case`. The annotation class name is `PascalCase`.\n\n**Example:** `lib\/state\/annotations\/can_throw.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: An annotation is a `const` class. It is good practice to also annotate it with `@immutable`.\n-   **Constructor**: The constructor must be `const`.\n-   **Purpose**: They serve as documentation and hints about the code's behavior or intended use.\n    -   `@canThrow`: Marks a method that is expected to throw exceptions, signaling to the caller that they need to implement `try-catch` handling.\n    -   `@DisposeMe`: Indicates that an instance of a class should be disposed of when it's no longer needed.\n    -   `@DoNotChangeOrder`: Warns that the order of values in an `enum` or fields in a class is significant and should not be altered.\n-   **Usage**: They are used by prefixing a class, method, or property declaration with `@YourAnnotation()`.\n\n## 3. Example\n\n```dart\n\/\/ lib\/state\/annotations\/can_throw.dart\n\nimport 'package:flutter\/foundation.dart';\n\n\/\/\/ A constant instance of [CanThrow] for convenient use.\nconst canThrow = CanThrow._();\n\n\/\/\/ An annotation indicating that a method can throw an exception.\n@immutable\nclass CanThrow {\n  const CanThrow._();\n}\n```\n\n**Usage Example:**\n\n```dart\n@canThrow\nvoid riskyOperation() {\n  throw Exception('Something went wrong');\n}\n```","keyword":"flutter-con-annotations;"},{"name":"flutter-con-constants","text":"# Constants\n\nConstants files are used to store compile-time constant values that are used throughout the application. Centralizing constants helps avoid magic numbers\/strings and makes maintenance easier.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/constants\/<constants_name>.dart`\n-   **Naming**: The file is typically prefixed with `k_` (for \"konstant\"), e.g., `k_durations.dart`.\n\n**Example:** `lib\/data\/constants\/k_durations.dart`\n\n## 2. Structure and Conventions\n\n-   **Declaration**: All variables in a constants file must be declared as `const`.\n-   **Top-Level**: Constants are defined as top-level variables within the file, not inside a class.\n-   **Purpose**: They are used for values that will not change at runtime, such as:\n    -   Animation durations (`kDurationsAnimation`)\n    -   JSON keys (`kKeysUserId`)\n    -   Default values or limits (`kLimitsMinUsernameLength`)\n    -   Asset paths (`kPngsDoveOfPeace`)\n-   **Organization**: Constants are grouped into separate files based on their domain (e.g., `k_durations.dart`, `k_keys.dart`).\n\n## 3. Example\n\n```dart\n\/\/ lib\/data\/constants\/k_durations.dart\n\nconst kDurationsAnimationX0p5 = Duration(milliseconds: 113);\nconst kDurationsAnimation = Duration(milliseconds: 225);\nconst kDurationsAnimationX2 = Duration(milliseconds: 450);\nconst kDurationsHover = Duration(milliseconds: 50);\nconst kDurationsTimeOut = Duration(seconds: 10);\n```","keyword":"flutter-con-constants;"},{"name":"flutter-con-dtos","text":"# DTOs (Data Transfer Objects)\n\nDTOs are classes that model the structure of data being transferred between the application and a remote source, such as a Supabase database table or a REST API endpoint. They are responsible for serialization and deserialization.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/dtos\/<dto_name>_dto.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_dto.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/auth\/dtos\/user_profile_dto.dart`\n\n## 2. Structure and Conventions\n\n-   **Serialization**:\n    -   DTO classes are annotated with `@JsonSerializable()`.\n    -   This requires a corresponding `part '<dto_name>_dto.g.dart';` directive. The `.g.dart` file is generated by `build_runner`.\n    -   `fieldRename: FieldRename.snake` is often used to automatically convert Dart's `camelCase` fields to `snake_case` for JSON keys, which is common in databases.\n-   **Base Class\/Interface**: DTOs that map to Supabase tables should implement the `SupabaseDto` abstract class, which enforces the presence of `id`, `createdAt`, and `updatedAt` fields.\n-   **Immutability**: All properties of a DTO should be `final`.\n-   **Constructors and Factories**:\n    -   A `const` constructor is used to create instances.\n    -   **IMPORTANT**: All fields should be `required` in the constructor, even nullable fields. This ensures explicit handling of null values.\n    -   A `factory YourDto.fromJson(Map<String, dynamic> json)` is required for `json_serializable` and is used to create an instance from a JSON map. It delegates to the generated `_$YourDtoFromJson` function.\n-   **`toJson()` Method**:\n    -   An instance method `Map<String, dynamic> toJson()` is required for `json_serializable` to convert the DTO instance into a JSON map. It delegates to the generated `_$YourDtoToJson` function.\n-   **`copyWith()` Method**:\n    -   A `copyWith` method is included to allow for the creation of a new, modified instance from an existing one, which is useful for immutability.\n    -   For nullable fields that need to be explicitly set to null, use a boolean `force` parameter pattern (e.g., `bool forceFieldName = false`).\n    -   Example: `fieldName: forceFieldName ? fieldName : fieldName ?? this.fieldName`\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/dtos\/user_profile_dto.dart\n\nimport 'package:{project_name}\/core\/dto\/supabase_dto.dart';\nimport 'package:json_annotation\/json_annotation.dart';\n\npart 'user_profile_dto.g.dart';\n\n@JsonSerializable()\nclass UserProfileDto implements SupabaseDto {\n  const UserProfileDto({\n    required this.id,\n    required this.updatedAt,\n    required this.createdAt,\n    required this.username, \/\/ nullable but still required\n    \/\/ ... other final properties\n  });\n\n  @override\n  final String id;\n  @override\n  final DateTime updatedAt;\n  @override\n  final DateTime createdAt;\n  final String? username;\n\n  \/\/ Serialization methods\n  factory UserProfileDto.fromJson(Map<String, dynamic> json) => _$UserProfileDtoFromJson(json);\n  @override\n  Map<String, dynamic> toJson() => _$UserProfileDtoToJson(this);\n\n  \/\/ copyWith method\n  UserProfileDto copyWith({\n    String? id,\n    DateTime? updatedAt,\n    DateTime? createdAt,\n    String? username,\n    bool forceUsername = false, \/\/ force pattern for nullable fields\n  }) {\n    return UserProfileDto(\n      id: id ?? this.id,\n      updatedAt: updatedAt ?? this.updatedAt,\n      createdAt: createdAt ?? this.createdAt,\n      username: forceUsername ? username : username ?? this.username,\n    );\n  }\n}\n```\n","keyword":"flutter-con-dtos;"},{"name":"flutter-con-enums","text":"# Enums\n\nEnums are used to represent a fixed number of constant values, such as states, types, or modes.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/enums\/<enum_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The `enum` name itself is `PascalCase`.\n\n**Example:** `lib\/auth\/enums\/auth_view_mode.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `enum` syntax is used.\n-   **Helper Getters**: Enums often include helper getters to make checking for a specific value more readable and less error-prone.\n    ```dart\n    enum AuthViewMode {\n      login,\n      register;\n\n      bool get isLogin => this == AuthViewMode.login;\n      bool get isRegister => this == AuthViewMode.register;\n    }\n    ```\n-   **Default Value**: If an enum has a logical default state, a `static const` field named `defaultValue` is often provided.\n    ```dart\n    enum AuthViewMode {\n      login,\n      register;\n\n      static const defaultValue = AuthViewMode.login;\n    }\n    ```\n-   **Associated Data**: When an enum value needs to be associated with more complex data (like a display name or an icon), getters are used to provide this information.\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/enums\/auth_view_mode.dart\n\nenum AuthViewMode {\n  login,\n  register,\n  forgotPassword;\n\n  \/\/ Default value\n  static const defaultValue = AuthViewMode.login;\n\n  \/\/ Helper getters\n  bool get isLogin => this == AuthViewMode.login;\n  bool get isRegister => this == AuthViewMode.register;\n  bool get isForgotPassword => this == AuthViewMode.forgotPassword;\n}\n```","keyword":"flutter-con-enums;"},{"name":"flutter-con-exceptions","text":"# Exceptions\n\nCustom exception classes are used to handle specific, known error cases in a structured and readable way.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/state\/exceptions\/`\n-   **Naming**: Files are named in `snake_case` and end with `_exception.dart`. The class name is `PascalCase`.\n\n**Example:** `lib\/state\/exceptions\/unexpected_null_exception.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: In this project, custom exceptions are plain Dart classes. They do not always implement the standard `Exception` interface, but they are used with the `throw` keyword.\n-   **Properties**: They typically have a `final String reason` property to describe the nature of the error.\n-   **Constructor**: A `const` constructor is provided.\n-   **`toString()` Override**: They override the `toString()` method to provide a clear and informative string representation of the exception, which is useful for logging and debugging.\n-   **Purpose**: They are thrown when the application enters a state that should be impossible according to the logic, helping to identify bugs and logical errors quickly.\n\n## 3. Example\n\n```dart\n\/\/ lib\/state\/exceptions\/unexpected_null_exception.dart\n\nclass UnexpectedNullException {\n  const UnexpectedNullException({\n    required this.reason,\n  });\n\n  final String reason;\n\n  @override\n  String toString() {\n    return 'UnexpectedNullException{reason: $reason}';\n  }\n}\n```","keyword":"flutter-con-exceptions;"},{"name":"flutter-con-extensions","text":"# Extensions\n\nExtensions are used to add new functionality to existing classes without modifying their source code. They are a powerful way to add utility and helper methods to both core Dart types and custom classes.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/extensions\/<class_name>_extension.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_extension.dart`. The extension itself is usually named `<ClassName>Extension`.\n\n**Example:** `lib\/data\/extensions\/string_extension.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `extension` syntax is used.\n    ```dart\n    extension StringExtension on String {\n      \/\/ ... methods\n    }\n    ```\n-   **Purpose**:\n    -   **Utility Methods**: Add convenient helper methods to core types like `String`, `DateTime`, `List`, and `Widget`. This helps to create a fluent and readable API.\n    -   **Domain-Specific Logic**: Encapsulate logic related to a specific type in a clean, reusable way. For example, `AnimationExtension` adds animation methods directly to the `Widget` class.\n-   **Clarity**: Extension methods should be well-named and have a clear, single purpose to avoid polluting the namespace of the extended class.\n-   **Statelessness**: Extension methods should be pure functions that operate on the instance of the class they are extending (`this`). They cannot store their own state.\n\n## 3. Example\n\n```dart\n\/\/ lib\/data\/extensions\/string_extension.dart\n\nextension StringExtension on String {\n  String get withPeriod {\n    if (isEmpty) return '';\n    return endsWith('.') ? this : '${trim()}.';\n  }\n\n  String capitalize({bool forceLowercase = false}) {\n    if (isEmpty) {\n      return '';\n    }\n    return forceLowercase\n        ? '${this[0].toUpperCase()}${substring(1).toLowerCase()}'\n        : '${this[0].toUpperCase()}${substring(1)}';\n  }\n\n  String? get nullIfEmpty => trim().isEmpty ? null : this;\n}\n```","keyword":"flutter-con-extensions;"},{"name":"flutter-con-forms","text":"# Forms\n\nForm configurations centralize the definition, state, and validation logic for a form in the application.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/forms\/<form_name>_form.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_form.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/auth\/forms\/login_form.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Form classes extend `FormConfig` from `lib\/forms\/abstracts\/form_config.dart`.\n-   **Dependency Injection**:\n    -   Forms are registered with `GetIt` as factories.\n    -   They must have a static `locate` getter and a static `registerFactory` method.\n-   **Field Enum**: A private `enum` is defined within the file to represent the unique identifiers for each form field.\n    ```dart\n    enum _LoginFormField {\n      email,\n      password,\n    }\n    ```\n-   **Field Configuration**:\n    -   The class overrides the `formFieldConfigs` getter, which returns a `Map<Enum, TFormFieldConfig>`.\n    -   This map links each field `enum` value to a `TFormFieldConfig` instance.\n    -   `TFormFieldConfig` defines everything about a field: its type (`TFieldType`), validation logic (`valueValidator`), initial value, whether it's obscured, etc.\n-   **Validation**:\n    -   Validation logic is provided via the `valueValidator` property of `TFormFieldConfig`.\n    -   Validators are typically composed using `kValueValidatorsMultiple` and other helpers from `lib\/forms\/constants\/k_value_validators.dart`.\n-   **Field Accessors**: The class provides public getters to easily access the `TFormFieldConfig` for each field from the `ViewModel`.\n    ```dart\n    TFormFieldConfig<String> get email => formFieldConfig(_LoginFormField.email);\n    ```\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/forms\/login_form.dart\n\nimport 'package:{project_name}\/forms\/abstracts\/form_config.dart';\nimport 'package:{project_name}\/forms\/config\/t_form_field_config.dart';\n\/\/ ... other imports\n\nenum _LoginFormField {\n  email,\n  password,\n}\n\nclass LoginForm extends FormConfig {\n  \/\/ 1. GetIt registration\n  static LoginForm get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(LoginForm.new);\n\n  \/\/ 2. Field accessors\n  TFormFieldConfig<String> get email => formFieldConfig(_LoginFormField.email);\n  TFormFieldConfig<String> get password => formFieldConfig(_LoginFormField.password);\n\n  \/\/ 3. Field configuration map\n  @override\n  late final Map<Enum, TFormFieldConfig> formFieldConfigs = {\n    _LoginFormField.email: TFormFieldConfig<String>(\n      id: _LoginFormField.email,\n      fieldType: TFieldType.textInput,\n      valueValidator: kValueValidatorsMultiple(\n        [\n          kValueValidatorsRequired(errorText: () => gStrings.enterYourEmail),\n          kValueValidatorsEmail(errorText: () => gStrings.enterAValidEmail),\n        ],\n      ),\n    ),\n    _LoginFormField.password: TFormFieldConfig<String>(\n      id: _LoginFormField.password,\n      fieldType: TFieldType.textInput,\n      obscureText: true,\n      valueValidator: kValueValidatorsRequired(errorText: () => gStrings.enterYourPassword),\n    ),\n  };\n}\n```\n","keyword":"flutter-con-forms;"},{"name":"flutter-con-globals","text":"# Globals\n\nGlobals files provide easy, global access to variables or service instances that may be computed at runtime. They are used sparingly to simplify access to frequently needed, app-wide values.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/globals\/<global_name>.dart`\n-   **Naming**: The file is typically prefixed with `g_` (for \"global\"), e.g., `g_now.dart`.\n\n**Example:** `lib\/data\/globals\/g_now.dart`\n\n## 2. Structure and Conventions\n\n-   **Declaration**: Globals are defined as top-level getters or variables.\n-   **Getters vs. Variables**:\n    -   **Getters** are used for values that should be re-computed every time they are accessed (e.g., `gNow()` which should always return the current time).\n    -   **Variables** can be used for globally accessible instances that are initialized once.\n-   **Purpose**:\n    -   **Runtime Values**: Provide access to values that change during runtime (e.g., `gNow()`, `gUserId`).\n    -   **Service Accessors**: Create convenient shortcuts to access service instances or their properties (e.g., `gStrings` which provides access to the localization service's current strings).\n    -   **Localization**: `gStrings` is the primary way to access localized strings throughout the application. All user-facing text should use `gStrings` (e.g., `gStrings.today`, `gStrings.tomorrow`, `gStrings.cancel`).\n-   **Distinction from Constants**: Unlike constants (which must be known at compile-time), globals can be initialized or computed at runtime.\n-   **Localization Workflow**:\n    -   Add new strings to the ARB files (`lib\/l10n\/config\/intl_en.arb` and `intl_nl.arb`)\n    -   Access them via `gStrings.yourStringKey`\n    -   **NEVER** run build commands to generate localization files - the project has a plugin that generates them automatically\n\n## 3. Example\n\n```dart\n\/\/ lib\/data\/globals\/g_now.dart\n\n\/\/\/ Returns the current [DateTime] using [DateTime.now].\nDateTime get gNow() => DateTime.now();\n```\n\n```dart\n\/\/ lib\/data\/globals\/g_user_id.dart\n\nimport 'package:{project_name}\/auth\/services\/auth_service.dart';\nimport 'package:{project_name}\/data\/constants\/k_values.dart';\n\n\/\/\/ Returns the current user's unique identifier.\n\/\/\/\n\/\/\/ Returns [kValuesNoAuthId] if no user is currently signed in.\nString get gUserId => AuthService.locate.user?.id ?? kValuesNoAuthId;\n```\n","keyword":"flutter-con-globals;"},{"name":"flutter-con-mixins","text":"# Mixins\n\nMixins are used to share a piece of reusable code and functionality across multiple classes, most commonly `ViewModel`s.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/mixins\/<mixin_name>.dart`\n-   **Naming**: Files are named in `snake_case`. The `mixin` name is `PascalCase`.\n\n**Example:** `lib\/auth\/mixins\/logout_management.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: Standard Dart `mixin` syntax is used.\n-   **Target Class**: Mixins often have an `on` clause to specify the type of class they can be used with (e.g., `mixin LogoutManagement on BaseViewModel`). This allows the mixin to access members of that class.\n-   **Functionality**: They encapsulate a specific, reusable piece of logic. For instance, `LogoutManagement` provides a ready-to-use `onLogoutPressed` method that can be called from any `ViewModel` that uses it.\n-   **Dependencies**: Mixins can locate and use services via `GetIt` just like `ViewModel`s or other classes, making them self-contained units of functionality.\n-   **Usage**: To use a mixin, a class includes it with the `with` keyword (e.g., `class SettingsViewModel extends BaseViewModel with LogoutManagement`).\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/mixins\/logout_management.dart\n\nimport 'dart:async';\nimport 'package:{project_name}\/auth\/services\/auth_service.dart';\nimport 'package:flutter\/material.dart';\nimport 'package:veto\/data\/models\/base_view_model.dart';\n\nmixin LogoutManagement on BaseViewModel {\n  \/\/ 1. Locate dependencies\n  AuthService get _authService => AuthService.locate;\n  DialogService get _dialogService => DialogService.locate;\n\n  \/\/ 2. Provide a reusable method\n  Future<void> onLogoutPressed({required BuildContext context}) async {\n    try {\n      final shouldLogout = await _dialogService.showOkCancelDialog(\n        title: 'Logout',\n        message: 'Are you sure you want to logout?',\n        context: context,\n      );\n\n      if (shouldLogout == true) {\n        \/\/ ... logout logic using _authService\n      }\n    } catch (error, stackTrace) {\n      \/\/ ... error handling\n    }\n  }\n}\n```\n","keyword":"flutter-con-mixins;"},{"name":"flutter-con-models","text":"# Models\n\nModels are plain Dart classes that represent data structures used within the application's business logic. They differ from DTOs in that they are not necessarily tied to a remote data source and are often used for UI state or internal logic.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/models\/<model_name>.dart`\n-   **Naming**: The file is named in `snake_case`. The class name is `PascalCase`.\n\n**Example:** `lib\/data\/models\/sync_config.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: Models are typically simple Dart classes.\n-   **Immutability**: Properties are often `final` to encourage immutability, and a `copyWith` method may be provided.\n-   **Purpose**: They can serve various purposes:\n    -   **Configuration**: Holding configuration data (e.g., `SyncConfig`).\n    -   **UI State**: Representing a piece of UI state that is more complex than a primitive type.\n    -   **Logic Grouping**: Grouping related data and functions (e.g., `CRUD` model holds a set of callbacks).\n-   **Serialization**: Unlike DTOs, models are generally not annotated for JSON serialization unless they need to be persisted locally or sent over the network in a non-database context.\n\n## 3. Example\n\n```dart\n\/\/ lib\/data\/models\/sync_config.dart\n\n\/\/\/ Configuration for controlling sync behavior and direction.\nclass SyncConfig {\n  \/\/\/ Creates a new configuration instance.\n  const SyncConfig({\n    this.syncFromRemote = false,\n    this.syncToRemote = true,\n  });\n\n  final bool syncFromRemote;\n  final bool syncToRemote;\n\n  \/\/\/ Creates a copy of this configuration with optional overrides.\n  SyncConfig copyWith({\n    bool? syncFromRemote,\n    bool? syncToRemote,\n  }) =>\n      SyncConfig(\n        syncFromRemote: syncFromRemote ?? this.syncFromRemote,\n        syncToRemote: syncToRemote ?? this.syncToRemote,\n      );\n}\n```","keyword":"flutter-con-models;"},{"name":"flutter-con-routers","text":"# Routers\n\nRouters provide a structured and convenient way to handle navigation for a specific feature area of the application. They are an abstraction on top of `go_router`.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/routers\/<feature>_router.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_router.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/home\/routers\/home_router.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Router classes extend `BaseNavigation` from `lib\/routing\/abstracts\/base_navigation.dart`.\n-   **Dependency Injection**: Routers are registered with `GetIt` as factories and provide a static `locate` getter and `registerFactory` method.\n-   **Core Properties**:\n    -   `root`: A getter that specifies the root path for this feature's navigation stack (e.g., `'\/home'`).\n    -   `navigationTab`: A getter that associates the router with a specific tab in the main shell navigation, if applicable.\n-   **Navigation Methods**:\n    -   The class provides strongly-typed methods for navigating to the screens within its feature (e.g., `goHomeView()`, `pushSettingsView()`).\n    -   These methods handle the construction of the route path and the packaging of `ViewArguments` into the `extra` parameter for `go_router`.\n    -   They use the `go`, `push`, and `pushReplacement` methods from the `BaseNavigation` class.\n-   **Route Definitions**: The actual `GoRoute` definitions are centralized in `lib\/routing\/services\/base_router_service.dart`. The feature-specific router classes are primarily for providing a clean, type-safe API for triggering navigation.\n\n## 3. Example\n\n```dart\n\/\/ lib\/home\/routers\/home_router.dart\n\nimport 'package:{project_name}\/home\/views\/home\/home_view.dart';\nimport 'package:{project_name}\/routing\/abstracts\/base_navigation.dart';\n\/\/ ... other imports\n\nclass HomeRouter extends BaseNavigation {\n  \/\/ 1. GetIt Registration\n  static HomeRouter get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(HomeRouter.new);\n\n  \/\/ 2. Core Properties\n  @override\n  NavigationTab? get navigationTab => NavigationTab.home;\n\n  @override\n  String get root => HomeView.path.asRootPath;\n\n  \/\/ 3. Navigation Methods\n  void goHomeView({\n    StatefulNavigationShell? statefulNavigationShell,\n  }) {\n    if (statefulNavigationShell != null) {\n      goBranch(statefulNavigationShell: statefulNavigationShell);\n    } else {\n      go(location: root);\n    }\n  }\n\n  void pushSettingsView() {\n    push(\n      location: '$root\/${SettingsView.path}',\n      extra: [\n        SettingsViewArguments(),\n      ],\n    );\n  }\n}\n```\n","keyword":"flutter-con-routers;"},{"name":"flutter-con-services","text":"# Services\n\nServices encapsulate specific business logic, interact with external APIs (like Supabase), or manage a shared resource. They are the backbone of the application's logic layer.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/services\/<service_name>_service.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_service.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/auth\/services\/auth_service.dart`\n\n## 2. Structure and Conventions\n\n-   **Class Type**: Services are plain Dart classes. They often use mixins like `Loglytics` for structured logging.\n-   **Dependency Injection**:\n    -   Services are registered with `GetIt` as either lazy singletons or factories.\n    -   They must provide a static `locate` getter and a static registration method (`registerLazySingleton` or `registerFactory`).\n    ```dart\n    class AuthService with Loglytics {\n      static AuthService get locate => GetIt.I.get();\n      static void registerLazySingleton() => GetIt.I.registerLazySingleton(AuthService.new);\n      \/\/ ...\n    }\n    ```\n-   **Asynchronous Operations**:\n    -   Methods that perform asynchronous work (e.g., API calls) must return a `Future<TurboResponse<T>>`.\n    -   The `TurboResponse` wrapper provides a standardized way to handle success and failure cases, including user-friendly titles and messages.\n-   **Error Handling**:\n    -   Services are responsible for catching exceptions from external sources (e.g., `PostgrestException` from Supabase) and converting them into a `TurboResponse.fail`.\n    -   Mixins like `SupabaseAuthExceptionHandler` are used to centralize the handling of common API exceptions.\n-   **State Management**:\n    -   Services can manage application-wide state. For example, `AuthService` manages the authentication stream.\n    -   State that needs to be observed by the UI is typically exposed through a `Stream` or `ValueListenable`.\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/services\/email_service.dart\n\nimport 'package:{project_name}\/auth\/mixins\/supabase_auth_exception_handler.dart';\nimport 'package:get_it\/get_it.dart';\nimport 'package:loglytics\/loglytics.dart';\nimport 'package:supabase_flutter\/supabase_flutter.dart';\nimport 'package:turbo_response\/turbo_response.dart';\n\nclass EmailService with Loglytics, SupabaseAuthExceptionHandler {\n  \/\/ 1. GetIt Locator and Registration\n  static EmailService get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(EmailService.new);\n\n  \/\/ 2. Dependencies\n  Supabase get _supabase => Supabase.instance;\n\n  \/\/ 3. Public Method with TurboResponse and Error Handling\n  Future<TurboResponse<AuthResponse>> login({\n    required String email,\n    required String password,\n  }) async {\n    try {\n      log.info('Logging in...');\n      final authResponse = await _supabase.client.auth.signInWithPassword(\n        email: email,\n        password: password,\n      );\n      return TurboResponse.success(result: authResponse);\n    } on AuthException catch (error) {\n      log.warning('Unable to login user! Reason: ${error.message}');\n      return tryHandleSupabaseAuthException(\n        supabaseAuthException: error,\n        log: log,\n      );\n    } catch (error, stackTrace) {\n      \/\/ ... handle generic error\n      return TurboResponse.fail(...);\n    }\n  }\n}\n```\n","keyword":"flutter-con-services;"},{"name":"flutter-con-typedefs","text":"# Typedefs\n\nTypedefs are used to create a custom type alias for a function signature. This improves code readability and makes it easier to use complex function types as parameters.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/typedefs\/<typedef_name>.dart`\n-   **Naming**: The file is named in `snake_case`.\n\n**Example:** `lib\/components\/typedefs\/on_component_pressed.dart`\n\n## 2. Structure and Conventions\n\n-   **Definition**: The `typedef` keyword is used to define the alias.\n-   **Naming**: The typedef name is `PascalCase` and should clearly describe the purpose of the function signature it represents.\n-   **Purpose**: They are most useful for defining callbacks or builder functions that are passed as parameters to widgets or other methods. This makes the code that uses them cleaner and more self-documenting.\n\n## 3. Example\n\n```dart\n\/\/ lib\/components\/typedefs\/on_component_pressed.dart\n\nimport 'package:{project_name}\/components\/enums\/t_component.dart';\n\ntypedef OnComponentPressed = void Function(TComponent component);\n```\n\n```dart\n\/\/ lib\/state\/typedefs\/lazy_locator_def.dart\n\n\/\/\/ Used to store locate calls inside a callback.\n\/\/\/\n\/\/\/ This way the actual locate call is only called when necessary.\ntypedef LazyLocatorDef<T extends Object> = T Function();\n```\n","keyword":"flutter-con-typedefs;"},{"name":"flutter-con-utils","text":"# Utils (Utilities)\n\nUtility files contain helper classes that provide specific, reusable functionality that doesn't fit neatly into other categories like services or extensions.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/state\/utils\/` (This project centralizes many core utilities here).\n-   **Naming**: Files are named in `snake_case` based on the utility they provide.\n\n**Example:** `lib\/state\/utils\/debouncer.dart`\n\n## 2. Structure and Conventions\n\n-   **Class-Based**: Utilities are typically implemented as classes rather than top-level functions, allowing them to manage their own state if necessary.\n-   **Single Responsibility**: Each utility class has a clear and single purpose.\n    -   `Debouncer`: Delays execution of a function until a certain period of inactivity has passed.\n    -   `Mutex`: Ensures that a piece of code is not executed concurrently.\n    -   `ScrollControllerBox`: Manages a collection of `ScrollController` instances.\n-   **Instantiation**: They are instantiated directly where needed; they are not typically registered with `GetIt` unless they manage a shared, singleton resource.\n-   **Lifecycle**: If a utility class holds resources that need to be cleaned up (like a `Timer` in `Debouncer` or controllers in `ScrollControllerBox`), it provides a `dispose` method.\n\n## 3. Example\n\n```dart\n\/\/ lib\/state\/utils\/debouncer.dart\n\nimport 'dart:async';\nimport 'dart:ui';\nimport '..\/..\/data\/constants\/k_durations.dart';\n\nclass Debouncer {\n  Debouncer({\n    Duration duration = kDurationsAnimation,\n  }) : _duration = duration;\n\n  final Duration _duration;\n  Timer? _timer;\n\n  \/\/\/ Schedules a callback to be run after the specified duration.\n  void run(VoidCallback voidCallback) {\n    tryCancel();\n    _timer = Timer(\n      _duration,\n      () {\n        voidCallback();\n      },\n    );\n  }\n\n  \/\/\/ Cancels any pending callback if one exists.\n  void tryCancel() {\n    if (_timer != null) {\n      _timer?.cancel();\n    }\n  }\n}\n```","keyword":"flutter-con-utils;"},{"name":"flutter-con-view-arguments","text":"# View Arguments\n\nView Arguments are simple data classes used to pass type-safe data to a new view during navigation.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/views\/<screen_name>\/<screen_name>_arguments.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_arguments.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/auth\/views\/verify_email\/verify_email_arguments.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Argument classes must extend `ViewArguments` from `lib\/routing\/abstracts\/view_arguments.dart`.\n-   **Purpose**: They act as a container for data that a `ViewModel` needs to initialize itself.\n-   **Immutability**: Properties of the class are `final`.\n-   **Serialization**:\n    -   They must implement a `toMap()` method to convert the object's properties into a `Map<String, dynamic>`.\n    -   They must have a `factory YourArguments.fromMap(Map<String, dynamic> map)` constructor to create an instance from a map. This is used by the routing system to reconstruct the arguments.\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/views\/verify_email\/verify_email_arguments.dart\n\nimport 'package:{project_name}\/routing\/abstracts\/view_arguments.dart';\n\nclass VerifyEmailArguments extends ViewArguments {\n  VerifyEmailArguments({\n    required this.email,\n    required this.password,\n  });\n\n  final String email;\n  final String password;\n\n  @override\n  Map<String, dynamic> toMap() => {\n        'email': email,\n        'password': password,\n      };\n\n  factory VerifyEmailArguments.fromMap(Map<String, dynamic> map) => VerifyEmailArguments(\n        email: map['email'] as String,\n        password: map['password'] as String,\n      );\n}\n```\n","keyword":"flutter-con-view-arguments;"},{"name":"flutter-con-view-models","text":"# View Models\n\nView Models manage the state and business logic for a specific `View`. They orchestrate data flow between services and the UI.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/views\/<screen_name>\/<screen_name>_view_model.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_view_model.dart`. The class name is the `PascalCase` version.\n\n**Example:** `lib\/auth\/views\/auth\/auth_view_model.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: ViewModels extend `BaseViewModel` from the `veto` package. If they need to accept navigation arguments, they are typed, e.g., `BaseViewModel<MyViewArguments>`.\n-   **Mixins**: They commonly use mixins like `Loglytics` for logging and `BusyServiceManagement` for handling loading states.\n-   **Dependency Injection**:\n    -   ViewModels are registered with `GetIt` as factories.\n    -   They must have a static `locate` getter and a static `registerFactory` method.\n    -   Dependencies (like services and routers) are retrieved within the ViewModel using their respective `.locate` getters.\n    ```dart\n    class AuthViewModel extends BaseViewModel with Loglytics {\n      static AuthViewModel get locate => GetIt.I.get();\n      static void registerFactory() => GetIt.I.registerFactory(AuthViewModel.new);\n\n      final _toastService = ToastService.locate;\n      \/\/ ...\n    }\n    ```\n-   **State Management**:\n    -   State is managed using `Informer` objects (from the `informers` package). An `Informer` is a `ValueNotifier`.\n    -   State is exposed to the `View` as a `ValueListenable<T>` via a getter.\n    ```dart\n    final _authViewMode = Informer<AuthViewMode>(AuthViewMode.defaultValue);\n    ValueListenable<AuthViewMode> get authViewMode => _authViewMode;\n    ```\n-   **Lifecycle**:\n    -   `initialise()`: This method is overridden to perform setup logic, like adding listeners or fetching initial data.\n    -   `dispose()`: This method is overridden to clean up resources, such as canceling subscriptions or disposing controllers and `Informer`s.\n-   **Business Logic**:\n    -   Public methods contain the logic for handling user interactions from the `View` (e.g., `onLoginPressed`).\n    -   Asynchronous operations that interact with services return a `Future<TurboResponse>`. The ViewModel handles the success and failure cases of the response, often showing a toast or dialog.\n    -   A `Mutex` is often used to prevent concurrent execution of critical asynchronous operations like login or registration.\n-   **Localization**:\n    -   Always use `gStrings` for user-facing text in toasts, dialogs, and error messages.\n    -   Import `package:{project_name}\/l10n\/globals\/g_strings.dart` to access localized strings.\n    -   Example: `_toastService.showToast(context: context, title: gStrings.taskDeletedSuccessfully);`\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/views\/auth\/auth_view_model.dart\n\nclass AuthViewModel extends BaseViewModel with Loglytics, BusyServiceManagement {\n  \/\/ 1. GetIt Locator and Registration\n  static AuthViewModel get locate => GetIt.I.get();\n  static void registerFactory() => GetIt.I.registerFactory(AuthViewModel.new);\n\n  \/\/ 2. Dependencies\n  final _toastService = ToastService.locate;\n  final _emailService = EmailService.locate;\n  \/\/ ...\n\n  \/\/ 3. Lifecycle\n  @override\n  Future<void> initialise() async {\n    _authViewMode.addListener(_onAuthViewModeChanged);\n    super.initialise();\n  }\n\n  @override\n  void dispose() {\n    _authViewMode.removeListener(_onAuthViewModeChanged);\n    super.dispose();\n  }\n\n  \/\/ 4. State Management\n  final _authViewMode = Informer<AuthViewMode>(AuthViewMode.defaultValue);\n  ValueListenable<AuthViewMode> get authViewMode => _authViewMode;\n\n  \/\/ 5. Business Logic\n  Future<void> onLoginPressed({\n    required AuthViewMode authViewMode,\n    required BuildContext context,\n  }) async {\n    \/\/ ... logic to call services and handle TurboResponse\n  }\n}\n```\n","keyword":"flutter-con-view-models;"},{"name":"flutter-con-views","text":"# Views\n\nViews are the UI-facing components of a feature screen. They are responsible for rendering the UI and delegating user interactions to a `ViewModel`.\n\n## 1. File Naming and Location\n\n-   **Location**: `lib\/<feature>\/views\/<screen_name>\/<screen_name>_view.dart`\n-   **Naming**: The file is named in `snake_case` and ends with `_view.dart`. The class name is the `PascalCase` version of the file name (e.g., `auth_view.dart` contains `AuthView`).\n\n**Example:** `lib\/auth\/views\/auth\/auth_view.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Views are always `StatelessWidget`. All state and logic are handled by the `ViewModel`.\n-   **ViewModel Connection**: The `View` connects to its corresponding `ViewModel` using the `ViewModelBuilder` widget from the `veto` package.\n-   **ViewModel Instantiation**: The `ViewModel` is provided to the `ViewModelBuilder` via its static `locate` getter, which uses `GetIt` for service location.\n    ```dart\n    ViewModelBuilder<AuthViewModel>(\n      viewModelBuilder: () => AuthViewModel.locate,\n      builder: (context, model, isInitialised, child) {\n        \/\/ ... build UI using `model`\n      },\n    )\n    ```\n-   **UI Construction**:\n    -   The root widget is typically a `TScaffold`, which provides a consistent screen layout.\n    -   The UI is built reactively based on the `ViewModel`'s state, which is exposed through `ValueListenable`s (like `Informer`). `ValueListenableBuilder` (and its variants `...X2`, `...X3`, etc.) are used to listen to these state changes and rebuild parts of the UI.\n    -   Widgets are composed from the project's UI library (`lib\/uiux\/widgets\/`), which are often prefixed with `T`, and from the `shadcn_ui` package.\n    -   **IMPORTANT**: Always prefer `shadcn_ui` widgets over Flutter's built-in widgets when available:\n        -   Use `ShadButton` instead of `ElevatedButton`\/`TextButton`\n        -   Use `ShadDatePicker` or `ShadCalendar` with `ShadPopover` instead of `showDatePicker`\n        -   Use `ShadDialog` instead of `showDialog` where appropriate\n        -   Use `ShadIconButton` for icon buttons\n    -   For date\/time selection in task planning features, restrict selection to today and tomorrow only using `selectableDayPredicate`\n-   **Routing**:\n    -   Views that represent a screen have a `static const String path` property that defines their route path for `go_router`.\n-   **Arguments**:\n    -   If a `View` requires data to be passed to it during navigation, it will have a constructor that accepts an `arguments` parameter (e.g., `final VerifyEmailArguments? arguments;`). This is then passed to the `ViewModelBuilder`'s `argumentBuilder`.\n\n## 3. Example\n\n```dart\n\/\/ lib\/auth\/views\/verify_email\/verify_email_view.dart\n\nimport 'package:{project_name}\/uiux\/widgets\/t_scaffold.dart';\nimport 'package:flutter\/material.dart';\nimport 'package:veto\/data\/models\/base_view_model.dart';\nimport 'verify_email_arguments.dart';\nimport 'verify_email_view_model.dart';\n\nclass VerifyEmailView extends StatelessWidget {\n  const VerifyEmailView({\n    super.key,\n    this.arguments,\n  });\n\n  final VerifyEmailArguments? arguments;\n\n  static const String path = 'verify-email';\n\n  @override\n  Widget build(BuildContext context) {\n    return ViewModelBuilder<VerifyEmailViewModel>(\n      argumentBuilder: () => arguments,\n      builder: (context, model, isInitialised, child) {\n        if (!isInitialised) return const SizedBox.shrink();\n\n        return TScaffold(\n          \/\/ ... UI implementation using `model`\n        );\n      },\n      viewModelBuilder: () => VerifyEmailViewModel.locate,\n    );\n  }\n}\n```\n","keyword":"flutter-con-views;"},{"name":"flutter-con-widgets","text":"# Widgets\n\nWidgets are reusable UI components that can be used across different views in the application.\n\n## 1. File Naming and Location\n\n-   **Location**: Widgets are typically located in a `widgets` directory within a feature folder (`lib\/<feature>\/widgets\/`) or in a shared UI folder (`lib\/uiux\/widgets\/`).\n-   **Naming**:\n    -   Files are named in `snake_case`.\n    -   A common convention is to prefix custom, project-specific widgets with `t_` (e.g., `t_button.dart`, `t_scaffold.dart`). This distinguishes them from standard Flutter or third-party widgets.\n\n**Examples:**\n-   `lib\/uiux\/widgets\/buttons\/t_button.dart`\n-   `lib\/auth\/widgets\/logout_button.dart`\n\n## 2. Structure and Conventions\n\n-   **Base Class**: Most reusable widgets are `StatelessWidget`s. `StatefulWidget`s are only used when the widget needs to manage its own internal, ephemeral state, such as animations or temporary user input.\n-   **Self-Contained**: Widgets should be self-contained and not depend on a specific `ViewModel`. They receive all necessary data and callbacks through their constructor parameters.\n-   **Styling and Theming**:\n    -   Widgets should use the project's centralized theme and sizing system for consistent styling. This is accessed via the `BuildContext` extension methods.\n    -   **Colors**: `context.colors.primary`, `context.colors.background` (Note: `context.colors` uses properties like `icon`, `background`, `border`, etc., not `foreground`)\n    -   **Text Styles**: `context.texts.h1`, `context.texts.p`\n    -   **Sizing**: `TSizes.appPadding` (constants), `context.sizes.width` (responsive)\n-   **UI Component Library**: \n    -   **ALWAYS** use `shadcn_ui` package widgets when available (e.g., `ShadButton`, `ShadCalendar`, `ShadPopover`, `ShadDatePicker`)\n    -   When implementing date\/time pickers, use `ShadDatePicker` or `ShadCalendar` with `ShadPopover` instead of Flutter's built-in `showDatePicker`\n    -   Reference local packages at `flutter-packages` for package documentation when needed (these are symlinks to the local git repos - all important packages are included here - ask for any missing packages if needed)\n-   **Localization**:\n    -   Use `gStrings` for all user-facing text (e.g., `gStrings.today`, `gStrings.tomorrow`)\n    -   Add new strings to ARB files (`lib\/l10n\/config\/intl_en.arb` and `intl_nl.arb`)\n    -   **NEVER** run build commands to generate localization files - the project has a plugin that generates them automatically\n-   **Date Restrictions**: When implementing date selection for task planning, restrict selection to today and tomorrow only\n-   **Customization**: Widgets are designed to be customizable through constructor parameters, allowing them to be adapted for different use cases.\n    -   **Text Parameters**: Pass user-facing text (titles, button labels, etc.) as String parameters instead of hardcoding them in the widget\n    -   **Spacing**: Use `TGap()` for standard spacing instead of `SizedBox(height: TSizes.appPadding)`\n-   **Responsiveness**: Reusable widgets should be designed to work well on different screen sizes.\n-   **Sheets and Dialogs**:\n    -   When creating custom sheets, extend `ShadSheet` directly instead of returning it from `build()`\n    -   Separate the sheet structure from its content by using a private content widget\n\n## 3. Example\n\n```dart\n\/\/ lib\/uiux\/widgets\/t_badge.dart\n\nimport 'package:{project_name}\/uiux\/extensions\/color_extension.dart';\nimport 'package:flutter\/widgets.dart';\nimport 'package:shadcn_ui\/shadcn_ui.dart';\n\nclass TBadge extends StatelessWidget {\n  const TBadge({\n    super.key,\n    this.text,\n    this.iconData,\n    required this.color,\n    \/\/ ... other parameters\n  });\n\n  final String? text;\n  final IconData? iconData;\n  final Color color;\n  \/\/ ...\n\n  @override\n  Widget build(BuildContext context) {\n    \/\/ Using theme extensions for consistent styling\n    final backgroundColor = color.badgeBackground();\n    final foregroundColor = color.badgeForeground;\n    final borderColor = color.badgeBorder();\n\n    return ShadBadge(\n      \/\/ ... implementation\n    );\n  }\n}\n```\n","keyword":"flutter-con-widgets;"},{"name":"flutter-ins-crash-report-analytics","text":"# Crash Reporting and Analytics Pattern\n\n## Overview\nThis pattern defines how crash reporting and analytics should be implemented when enabled in the Float Note project.\n\n## Current Status\nAnalytics and crash reporting are **disabled** but dependencies remain:\n- `posthog_flutter: ^5.0.0` (commented out in main.dart)\n- `sentry_flutter: ^9.4.0` (commented out in main.dart)\n- `loglytics: ^0.16.1` (active for logging only)\n\n## Pattern Structure\n\n### 1. Error Catching Foundation\n```dart\n\/\/ Global error handling in main.dart\nrunZonedGuarded(\n  () async {\n    \/\/ App initialization\n    runApp(...);\n  },\n  (error, stack) {\n    Log(location: 'Zoned').error(\n      'Unhandled exception caught: ${error.toString()}',\n      error: error,\n      stackTrace: stack,\n    );\n  },\n);\n```\n\n### 2. Service Integration Pattern\nWhen re-enabling analytics:\n\n```dart\n\/\/ Initialize PostHog\nfinal config = PostHogConfig('YOUR_KEY');\nconfig.debug = kDebugMode;\nconfig.captureApplicationLifecycleEvents = true;\nconfig.host = 'https:\/\/eu.i.posthog.com';\n\n\/\/ Wrap in Sentry\nawait SentryFlutter.init(\n  (options) {\n    options.dsn = 'YOUR_DSN';\n    options.sendDefaultPii = true;\n    options.tracesSampleRate = 1.0;\n  },\n  appRunner: () async {\n    await Posthog().setup(config);\n    \/\/ Run app\n  },\n);\n```\n\n### 3. Loglytics Abstraction Pattern\n```dart\nLoglytics.setUp(\n  crashReportsInterface: CrashReportsImplementation(),\n  analyticsInterface: AnalyticsImplementation(),\n  analytics: (analyticsFactory) {\n    \/\/ Register feature analytics\n  },\n  logLevel: kDebugMode ? LogLevel.trace : LogLevel.info,\n);\n```\n\n### 4. Error Reporting Pattern\nAlways use Loglytics for error reporting:\n\n```dart\nclass MyService with Loglytics {\n  Future<void> riskyOperation() async {\n    try {\n      \/\/ Operation\n    } catch (e, s) {\n      log.error(\n        'Operation failed',\n        error: e,\n        stackTrace: s,\n      );\n      rethrow;\n    }\n  }\n}\n```\n\n### 5. Analytics Event Pattern\nWhen implemented, analytics follow:\n- **Subject**: What entity (task, float, auth)\n- **Action**: What happened (created, deleted, tapped)\n- **Parameters**: Context data\n\n```dart\nclass TaskAnalytics extends TAnalytics {\n  void taskCompleted({required String taskId}) {\n    service.completed(\n      subject: subjects.task,\n      parameters: parameters(id: taskId),\n    );\n  }\n}\n```\n\n## Integration Points\n- Supabase auth events sync with analytics when enabled\n- User identification flows through all services\n- Error context includes user properties\n\n## Re-enabling Checklist\n1. Create missing TAnalytics infrastructure\n2. Uncomment initialization code\n3. Add environment-specific API keys\n4. Register feature analytics classes\n5. Add analytics calls to ViewModels\n6. Test in development first","keyword":"flutter-ins-crash-report-analytics;"},{"name":"flutter-ins-edge-functions-dtos","text":"# Supabase Edge Functions and DTOs\n\nThis document explains how we handle Supabase Edge Functions and Data Transfer Objects (DTOs) in this project, ensuring type-safe communication between the Flutter app and backend services.\n\n## 1. DTOs (Data Transfer Objects)\n\nDTOs are our standardized way of defining data structures that are sent to and received from APIs, particularly Edge Functions.\n\n### DTO Structure\n\nAll DTOs that are written to Supabase tables must extend `SupabaseDto`.\n\n```dart\nimport 'package:json_annotation\/json_annotation.dart';\nimport 'package:float_note\/core\/dto\/supabase_dto.dart';\n\npart 'example_dto.g.dart';\n\n@JsonSerializable(includeIfNull: true, explicitToJson: true)\nclass ExampleDto extends SupabaseDto {\n  ExampleDto({\n    required this.id,\n    required this.createdAt,\n    required this.updatedAt,\n    required this.field1,\n    this.field2,\n  });\n\n  factory ExampleDto.fromJson(Map<String, dynamic> json) =>\n      _$ExampleDtoFromJson(json);\n\n  static const fromJsonFactory = _$ExampleDtoFromJson;\n  static const toJsonFactory = _$ExampleDtoToJson;\n  \n  @override\n  final String id;\n  @override\n  final DateTime createdAt;\n  @override\n  final DateTime updatedAt;\n  \n  final String field1;\n  final String? field2;\n\n  @override\n  Map<String, dynamic> toJson() => _$ExampleDtoToJson(this);\n}\n```\n\n### Request & Response DTOs\n\nFor Edge Functions, we may use DTOs that don't extend `SupabaseDto` if they don't map directly to a table. These are simple classes with `json_serializable`.\n\n```dart\n\/\/ Request DTO sent to an Edge Function\n@JsonSerializable()\nclass MyFunctionRequest {\n  MyFunctionRequest({required this.someValue});\n  final String someValue;\n  \/\/ fromJson\/toJson ...\n}\n\n\/\/ Response DTO received from an Edge Function\n@JsonSerializable()\nclass MyFunctionResponse {\n  MyFunctionResponse({required this.result});\n  final String result;\n  \/\/ fromJson\/toJson ...\n}\n```\n\n## 2. Calling Edge Functions\n\nEdge Functions are called from a Service class in the Flutter app.\n\n### Service Structure\n\n```dart\nclass MyFeatureService with Loglytics {\n  \/\/ ...\n  SupabaseClient get _supabaseClient => Supabase.instance.client;\n\n  Future<TurboResponse<MyFunctionResponse>> callMyFunction({\n    required String someValue,\n  }) async {\n    try {\n      final response = await _supabaseClient.functions.invoke(\n        'my-function-name',\n        body: MyFunctionRequest(someValue: someValue).toJson(),\n      );\n\n      if (response.status != 200) {\n        return TurboResponse.fail(\n          title: 'Error',\n          message: 'Failed to call function: ${response.data}',\n        );\n      }\n\n      return TurboResponse.success(\n        result: MyFunctionResponse.fromJson(response.data),\n      );\n    } catch (e, s) {\n      log.error('Failed to invoke Edge Function', error: e, stackTrace: s);\n      return TurboResponse.fail(\n        title: 'Error',\n        message: 'An unexpected error occurred.',\n      );\n    }\n  }\n}\n```\n\n## 3. Edge Function Backend Structure\n\nOur Edge Functions are written in TypeScript and located in a separate `supabase\/functions` directory.\n\n### Service-Oriented Architecture\n\nSplit logic into focused service classes:\n\n```typescript\n\/\/ supabase\/functions\/_shared\/services\/ValidationService.ts\nexport class ValidationService {\n  static validateInput(data: unknown): MyFunctionRequest {\n    \/\/ Validation logic here\n    \/\/ Throws an error if invalid\n    return data as MyFunctionRequest;\n  }\n}\n```\n\n### Main Function Structure\n\n```typescript\n\/\/ supabase\/functions\/my-function-name\/index.ts\nimport { serve } from \"https:\/\/deno.land\/std@0.168.0\/http\/server.ts\";\nimport { ValidationService } from \"..\/_shared\/services\/ValidationService.ts\";\n\nserve(async (req) => {\n  try {\n    const requestData = await req.json();\n    const validatedData = ValidationService.validateInput(requestData);\n\n    \/\/ Business logic...\n    const result = `You sent: ${validatedData.someValue}`;\n\n    return new Response(\n      JSON.stringify({ result }),\n      { headers: { \"Content-Type\": \"application\/json\" }, status: 200 },\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { headers: { \"Content-Type\": \"application\/json\" }, status: 400 },\n    );\n  }\n});\n```\n\n## 4. Error Handling\n\nEdge Functions should return meaningful JSON error messages with appropriate status codes (e.g., 400 for bad request, 500 for server error). The Flutter service layer then converts these into user-friendly `TurboResponse.fail` objects.\n\n## 5. Testing Edge Functions\n\nAlways test with the Supabase CLI:\n\n```bash\n# Start local Supabase environment\nsupabase start\n\n# In Flutter, configure SupabaseService to use local URLs\n# (This is handled by our Environment enum)\nflutter run --dart-define=env=emulators\n```\n\n## Key Takeaways\n\n1.  **Always create DTOs** for Edge Function requests and responses.\n2.  **Use `TurboResponse<DTO>`** in your Flutter services for type-safe returns from function calls.\n3.  **Call functions** using `Supabase.instance.client.functions.invoke()`.\n4.  **Extract logic into services** in your TypeScript function code.\n5.  **Validate all incoming data** inside your Edge Function.\n6.  **Return structured JSON responses** (both for success and errors).","keyword":"flutter-ins-edge-functions-dtos;"},{"name":"flutter-ins-error-handling","text":"# Error Handling and User Feedback Pattern\n\n## Core Concept: TurboResponse\n\nAll asynchronous operations return `TurboResponse<T>` - a sealed class representing success or failure.\n\n### Response Types\n```dart\n\/\/ Success with result\nTurboResponse.success(result: value, title: 'Done', message: 'Operation completed')\n\n\/\/ Failure with error\nTurboResponse.fail(error: e, stackTrace: s, title: 'Error', message: 'Failed')\n\n\/\/ Convenience constructors\nTurboResponse.successAsBool() \/\/ When no result needed\nTurboResponse.failAsBool()    \/\/ Default failure\n```\n\n## Golden Rule: No Error States in UI\n\n**Never show error states in the UI.** Keep the last valid state and provide feedback via:\n- **Toasts**: Non-blocking notifications for success\/minor errors\n- **Dialogs**: Blocking alerts for critical errors requiring acknowledgment\n\nException: Form validation errors shown inline.\n\n## Layered Error Handling\n\n### Layer 1: API\/Low-Level Services\nConvert raw exceptions to TurboResponse:\n\n```dart\nFuture<TurboResponse<AuthResponse>> login({\n  required String email,\n  required String password,\n}) async {\n  try {\n    final authResponse = await _supabase.client.auth.signInWithPassword(\n      email: email,\n      password: password,\n    );\n    return TurboResponse.success(result: authResponse);\n  } on AuthException catch (error) {\n    return tryHandleSupabaseAuthException(\n      supabaseAuthException: error,\n      log: log,\n    );\n  } catch (error, stackTrace) {\n    log.error('Login failed', error: error, stackTrace: stackTrace);\n    return TurboResponse.fail(\n      title: 'Login failed',\n      message: 'An unknown error occurred',\n      error: error,\n    );\n  }\n}\n```\n\n### Layer 2: Business Services\nPropagate TurboResponse without try-catch:\n\n```dart\nFuture<TurboResponse<TaskDto>> updateTask(TaskDto task) async {\n  final response = await api.updateDoc(task);\n  return response; \/\/ Propagate as-is\n}\n```\n\n### Layer 3: ViewModels\nConvert TurboResponse to user feedback:\n\n```dart\nFuture<void> onDeletePressed(BuildContext context, TaskDto task) async {\n  try {\n    setBusy(true);\n    final response = await TaskService.locate.deleteTask(id: task.id);\n    \n    response.when(\n      success: (_) {\n        ToastService.locate.showToast(\n          context: context,\n          title: 'Task deleted',\n        );\n      },\n      fail: (_) {\n        DialogService.locate.showOkDialog(\n          context: context,\n          title: 'Error',\n          message: 'Could not delete task',\n        );\n      },\n    );\n  } catch (error, stackTrace) {\n    log.error('Unexpected error', error: error, stackTrace: stackTrace);\n    DialogService.locate.showSomethingWentWrongDialog(context: context);\n  } finally {\n    setBusy(false);\n  }\n}\n```\n\n## User Feedback Services\n\n### ToastService\n```dart\nToastService.locate.showToast(\n  context: context,\n  title: 'Success',\n  subtitle: 'Changes saved',\n);\n```\n\n### DialogService\n```dart\nDialogService.locate.showOkDialog(\n  context: context,\n  title: 'Error',\n  message: 'Connection failed',\n);\n\nDialogService.locate.showOkCancelDialog(\n  context: context,\n  title: 'Confirm',\n  message: 'Delete this item?',\n);\n```\n\n## Handling TurboResponse\n\n### Safe Pattern: .when()\n```dart\nresponse.when(\n  success: (s) => handleSuccess(s),\n  fail: (f) => handleFailure(f),\n);\n```\n\n### Conditional Checks\n```dart\nif (response.isSuccess) {\n  \/\/ Handle success\n}\n```\n\n### Dangerous: Direct .result\n```dart\n\/\/ Only after checking isSuccess!\nif (response.isSuccess) {\n  final value = response.result;\n}\n```\n\n### Transaction Pattern: .throwWhenFail()\n```dart\n\/\/ In database transactions only\nresponse.throwWhenFail();\n```\n\n## Supabase Integration\n\nServices using `SupabaseApi` automatically return `TurboResponse`:\n- All CRUD operations wrapped\n- `SupabaseAuthExceptionHandler` mixin for auth errors\n- Consistent error messages across the app","keyword":"flutter-ins-error-handling;"},{"name":"flutter-ins-flutter-busy-state","text":"---\nname: busy-state-pattern\ndescription: \"Global busy state management pattern for showing loading indicators during asynchronous operations.\"\n---\n# ‚è≥ Busy State Pattern\n\nGlobal busy state management for consistent loading indicators during asynchronous operations.\n\n## BusyService Core\n\nThe `BusyService` singleton manages application-wide busy state, exposing a `ValueListenable<BusyModel>` for UI listening.\n\n## Setting Busy State from ViewModels\n\n### Option 1: BusyServiceManagement Mixin\n\nFor ViewModels that frequently manage busy states:\n\n```dart\nclass MyViewModel extends BaseViewModel with BusyServiceManagement {\n  Future<void> doSomething() async {\n    setBusy(true);\n    await _myApi.fetchData();\n    setIdle(); \/\/ Equivalent to setBusy(false)\n  }\n}\n```\n\n### Option 2: Global Functions\n\nFor quick, one-off access:\n\n```dart\nimport 'package:float_note\/state\/globals\/g_busy.dart';\n\nclass MyViewModel extends BaseViewModel {\n  Future<void> doSomething() async {\n    gSetBusy();\n    await _myApi.fetchData();\n    gSetIdle();\n  }\n}\n```\n\n## Global UI Integration\n\nThe busy indicator is handled at the top level of the widget tree using `BusyListenableBuilder`:\n\n```dart\n\/\/ In main app shell\nStack(\n  children: [\n    \/\/ App content\n    BusyListenableBuilder(\n      builder: (context, busyModel, child) {\n        return IsBusyIcon(busyModel: busyModel);\n      },\n    ),\n  ],\n)\n```\n\n## Benefits\n\n- **Consistent UX**: Same loading indicator across entire app\n- **Clean ViewModels**: No need for individual loading state management\n- **Global Control**: Single source of truth for busy state\n- **Automatic Display**: Loading overlay appears automatically when `gSetBusy()` is called\n\n## Customization\n\nBoth `setBusy()` and `gSetBusy()` accept parameters to customize behavior:\n- Show backdrop\n- Ignore pointer events\n- Custom loading messages","keyword":"flutter-ins-flutter-busy-state;"},{"name":"flutter-ins-informer-box","text":"---\nname: informer-box-pattern\ndescription: \"Pattern for managing collections of reactive state using InformerBox and other Box utilities for dynamic UI resources.\"\n---\n# üì¶ InformerBox Pattern\n\nPattern for managing collections of reactive state where each item needs its own `Informer` instance.\n\n## InformerBox for Dynamic Collections\n\nWhen dealing with lists where each item has reactive state (e.g., task completion status):\n\n```dart\n\/\/ In ViewModel\nfinal taskCompletionInformers = InformerBox<bool>(initialValue: false);\n\n\/\/ In View\nListView.builder(\n  itemCount: tasks.length,\n  itemBuilder: (context, index) {\n    final task = tasks[index];\n    return ValueListenableBuilder<bool>(\n      valueListenable: model.taskCompletionInformers.get(task.id),\n      builder: (context, isCompleted, _) {\n        return Checkbox(\n          value: isCompleted,\n          onChanged: (value) => model.toggleTask(task.id),\n        );\n      },\n    );\n  },\n)\n```\n\n## Benefits\n\n- **Dynamic Management**: Creates `Informer`s on-demand for specific IDs\n- **Automatic Disposal**: Handles cleanup of unused `Informer`s\n- **Perfect for ListView.builder**: Each list item gets its own reactive state\n\n## Other Box Utilities\n\nFollowing the same pattern for UI resource management:\n\n- **`FocusNodeBox`**: Manages collection of `FocusNode`s\n- **`ScrollControllerBox`**: Manages `ScrollController`s  \n- **`TextEditingControllerBox`**: Manages `TextEditingController`s\n\n## Separation of Concerns\n\nThese Box utilities allow ViewModels to control UI resources (focus, scrolling, text input) without holding direct widget references, maintaining clean separation between logic and UI layers.","keyword":"flutter-ins-informer-box;"},{"name":"flutter-ins-informer-state","text":"---\nname: informer-state-pattern\ndescription: \"The core pattern for reactive state management using Informer<T> instead of ValueNotifier in ViewModels and Services.\"\n---\n# üì° Informer State Pattern\n\nThe core pattern for reactive state management using `Informer<T>` as the foundation for all state handling.\n\n## What is Informer?\n\n`Informer<T>` is our custom `ValueListenable<T>` that replaces Flutter's `ValueNotifier` for consistency and extended functionality.\n\n## Basic Usage Pattern\n\n```dart\nclass MyViewModel extends BaseViewModel {\n  \/\/ Private mutable state holder\n  final _isLoading = Informer<bool>(false);\n\n  \/\/ Public immutable stream for UI\n  ValueListenable<bool> get isLoading => _isLoading;\n\n  void fetchData() {\n    _isLoading.update(true);\n    \/\/ ... fetch data ...\n    _isLoading.update(false);\n  }\n}\n```\n\n## State Mutation Methods\n\n### Direct Update: `update()`\nFor simple state replacements:\n```dart\nvoid setLoading(bool isLoading) {\n  _isLoading.update(isLoading);\n}\n```\n\n### Functional Update: `updateCurrent()`\nWhen new state depends on current state (preferred for complex objects):\n```dart\nfinal _counter = Informer<int>(0);\n\nvoid increment() {\n  _counter.updateCurrent((cValue) => cValue + 1);\n}\n\n\/\/ With collections\nfinal _tasks = ListInformer<Task>([]);\n\nvoid addTask(Task newTask) {\n  _tasks.updateCurrent((currentTasks) {\n    currentTasks.add(newTask); \/\/ Safe - works with fresh copy\n    return currentTasks;\n  });\n}\n```\n\n### Silent Updates\nFor batching multiple state changes:\n```dart\nvoid updateTwoThingsSilently() {\n  _informerA.silentUpdate(newValueA);\n  _informerB.silentUpdate(newValueB);\n  \n  \/\/ Manually trigger rebuild\n  _informerA.rebuild();\n  _informerB.rebuild();\n}\n```\n\n## Key Principles\n\n- All state mutations must happen inside the ViewModel\/Service that owns the state\n- Private `_informer` instances are mutable, public getters return `ValueListenable`\n- Use `updateCurrent()` when new state depends on current state for atomicity\n- Silent updates allow batching multiple changes for single UI rebuild","keyword":"flutter-ins-informer-state;"},{"name":"flutter-ins-localization-pattern","text":"---\nname: localization-pattern\ndescription: \"The architectural pattern for implementing localization and internationalization (i18n) in this Flutter project using ARB files and code generation.\"\n---\n# üåç Localization Pattern\n\nThis pattern describes how localization is architecturally implemented in this project using Flutter's internationalization approach with ARB files and code generation.\n\n## Pattern Overview\n\nOur localization architecture follows these key principles:\n- **ARB Files**: Source of truth for all translations (`lib\/l10n\/intl_en.arb`, `lib\/l10n\/intl_nl.arb`)\n- **Code Generation**: The `intl_utils` package generates type-safe Dart classes from ARB files\n- **Global Accessor**: A simple global getter `gStrings` provides context-free access to localized strings\n- **Language Service**: The `LanguageService` manages language state and switching\n\n## ARB File Structure\n\nEach entry in an `.arb` file consists of a key-value pair:\n\n```json\n{\n  \"@@locale\": \"en\",\n  \"welcome\": \"Welcome\",\n  \"helloUsername\": \"Hello @{username}\",\n  \"@helloUsername\": {\n    \"placeholders\": {\n      \"username\": {\n        \"type\": \"Object\"\n      }\n    }\n  }\n}\n```\n\nKeys become getters in the generated `S` class, placeholders become method parameters.\n\n## Global String Access Pattern\n\n**File:** `lib\/l10n\/globals\/g_strings.dart`\n\n```dart\nimport 'package:float_note\/l10n\/strings\/gen\/l10n.dart';\n\n\/\/\/ Returns the current instance of [S] for localization.\nS get gStrings => S.current;\n```\n\nThis enables context-free string access anywhere in the application.\n\n## Language Loading Flow\n\n1. App starts ‚Üí `MyAppViewModel` calls `_setupStrings()`\n2. `_setupStrings()` calls `S.load()` with locale from `LanguageService`\n3. `LanguageService` retrieves saved language from `LocalStorageService` (defaults to `en`)\n4. Strings are loaded and available via `gStrings`\n\n## Language Switching Flow\n\n1. User selects language ‚Üí calls `LanguageService.updateLanguage()`\n2. `LanguageService` saves choice to local storage\n3. Updates `ValueListenable<TSupportedLanguage>` triggering listeners\n4. `MyAppView` rebuilds `ShadApp.router` with new locale\n5. Widget tree rebuilds with new locale, `gStrings` provides updated strings\n\n## Generated Files\n\nRunning `flutter pub run intl_utils:generate` creates:\n- `lib\/l10n\/strings\/gen\/l10n.dart`: Contains the `S` class delegate\n- `lib\/l10n\/strings\/gen\/intl\/messages_*.dart`: Message lookups for each language","keyword":"flutter-ins-localization-pattern;"},{"name":"flutter-ins-mvvm-architecture","text":"---\nname: mvvm-architecture-pattern\ndescription: \"The Model-View-ViewModel architectural pattern implementation with strict separation of concerns and reactive UI updates.\"\n---\n# üèóÔ∏è MVVM Architecture Pattern\n\nImplementation of Model-View-ViewModel pattern with strict separation of concerns and reactive programming principles.\n\n## Core Philosophy\n\n- **Separation of Concerns**: UI (View) is \"dumb\", all state\/logic in ViewModel\n- **Reactivity**: UI reacts to state changes automatically, not imperatively updated\n- **Single Source of Truth**: State centralized in Services and ViewModels\n- **Immutability**: Prefer immutable state objects, update by creating new instances\n\n## Views (UI Layer)\n\n**Characteristics:**\n- Almost always `StatelessWidget`\n- Contain no business logic or mutable state\n- Receive state and callbacks from ViewModel\n- Rebuild specific parts using `ValueListenableBuilder`\n\n## ViewModels (Logic Layer)\n\n**Characteristics:**\n- Hold all state for a view using `Informer`s\n- Contain all business logic (button actions, data formatting, etc.)\n- Expose state via public `ValueListenable` getters\n- Provided to View using `ViewModelBuilder`\n\n## UI Updates with ValueListenableBuilder\n\nReactive UI updates by listening to ViewModel state:\n\n```dart\n\/\/ Single state listener\nValueListenableBuilder<bool>(\n  valueListenable: model.isLoading,\n  builder: (context, isLoading, child) {\n    return isLoading\n        ? const CircularProgressIndicator()\n        : const Text('Data Loaded!');\n  },\n)\n\n\/\/ Multiple state listeners\nValueListenableBuilderX2<String, int>(\n  valueListenable: model.username,\n  valueListenable2: model.itemCount,\n  builder: (context, username, count, child) {\n    return Text('$username has $count items');\n  },\n)\n```\n\n## StatefulWidget Restrictions\n\n**Never use `StatefulWidget`** for business or UI logic state.\n\n**Exception:** Only when absolutely necessary for Flutter framework integration (e.g., animations requiring `TickerProviderStateMixin`). Must contain minimal logic required for mixin functionality.\n\n**Reasoning:** `StatefulWidget` mixes state, logic, and UI code, making it hard to test and maintain while scattering state across the widget tree.","keyword":"flutter-ins-mvvm-architecture;"},{"name":"flutter-ins-service-locator","text":"---\nname: service-locator-pattern\ndescription: \"The Service Locator pattern implementation using GetIt for dependency injection with standardized locator conventions.\"\n---\n# üìç Service Locator Pattern\n\nService Locator pattern implementation using `get_it` package for centralized dependency management.\n\n## Core Setup\n\nAll dependency injection is managed in `lib\/core\/services\/locator_service.dart` using the `GetIt` service locator.\n\n## Locator Pattern Convention\n\nEvery injectable class follows this standardized pattern:\n\n```dart\nclass PosthogService {\n  \/\/ üìç LOCATOR -------------------------------------------------------------------------------\n\n  \/\/\/ Returns the singleton instance of [PosthogService].\n  static PosthogService get locate => GetIt.I.get();\n\n  \/\/\/ Registers this service as a lazy singleton in the GetIt service locator.\n  static void registerLazySingleton() => GetIt.I.registerLazySingleton(PosthogService.new);\n\n  \/\/ ... rest of the class\n}\n```\n\n## Required Elements\n\n- **`\/\/ üìç LOCATOR`** comment block\n- **Static `locate` getter** to retrieve instance from GetIt\n- **Static `register...` method** to handle its own registration logic\n\n## Benefits\n\n- **Decoupling**: Classes don't create their own dependencies\n- **Centralized Management**: All registrations in one place\n- **Testability**: Easy to swap implementations for testing\n- **Modularity**: Clear separation of concerns","keyword":"flutter-ins-service-locator;"},{"name":"flutter-ins-service-state","text":"---\nname: service-state-pattern\ndescription: \"Pattern for managing shared application state and business logic using Services with dependency injection.\"\n---\n# üîß Service State Pattern\n\nPattern for managing shared application state and business logic using Services registered with dependency injection.\n\n## When to Use Services\n\nServices are for state or business logic that needs to be shared across multiple features or screens.\n\n**Examples:** `AuthService`, `HouseholdService`, `ShoppingListService`\n\n## Service Implementation\n\nServices use the same `Informer` pattern as ViewModels for state management:\n\n```dart\nclass MyService {\n  \/\/ Private state\n  final _data = Informer<List<Item>>([]);\n  \n  \/\/ Public state access\n  ValueListenable<List<Item>> get data => _data;\n  \n  \/\/ Business logic\n  void addItem(Item item) {\n    _data.updateCurrent((current) {\n      current.add(item);\n      return current;\n    });\n  }\n}\n```\n\n## Dependency Injection with GetIt\n\n**Registration:** In `lib\/core\/services\/locator_service.dart`\n\n- `registerLazySingleton()`: Single instance throughout app lifecycle\n- `registerFactory()`: New instance each time requested (for ViewModels)\n\n```dart\n\/\/ Service registration\nclass MyService {\n  static void registerLazySingleton() => \n      GetIt.I.registerLazySingleton(MyService.new);\n  static MyService get locate => GetIt.I.get();\n}\n\n\/\/ Accessing in ViewModel\nfinal _myService = MyService.locate;\n```\n\n## Sync Services\n\nFor data from Supabase, use specialized abstract services:\n- `AuthSyncService`: Authentication-aware data sync\n- `HouseholdCollectionSyncService`: Household-scoped collections\n\nThese automatically handle:\n- Listening to Supabase streams\n- Updating state in response to data changes\n- Authentication event handling","keyword":"flutter-ins-service-state;"},{"name":"flutter-ins-supabase-comms","text":"# Supabase Communication\n\nThis document outlines the architecture and patterns we use for communicating with Supabase in the FloatNote mobile application. Our approach provides a reactive, type-safe, and scalable way to manage data.\n\n## 1. High-Level Architecture\n\nOur Supabase communication is structured in three main layers:\n\n1.  **API Layer (`SupabaseApi`)**: A generic, low-level, stateless wrapper around the `supabase_flutter` package. This class is responsible for direct communication with a specific Supabase table (e.g., `tasks`, `profiles`).\n2.  **Service Layer (`SyncedDocService` & `SyncedDocsService`)**: Stateful, singleton services that manage the application's state. They use a `SupabaseApi` instance to listen to real-time streams, hold the data in memory, and provide business logic for CRUD operations.\n3.  **UI Layer (ViewModels & Widgets)**: The UI layer consumes data from the services, typically through `ValueListenable`s, to build a reactive user interface.\n\nThis architecture ensures a clear separation of concerns, making the codebase easier to manage, test, and scale.\n\n## 2. Core Concepts\n\n### `SupabaseApi<T>`\n\n`SupabaseApi<T>` is our generic class for all table-specific APIs. It's instantiated inside a service and configured for a specific table and DTO.\n\n**`lib\/supabase\/services\/supabase_api.dart`**\n```dart\nclass SupabaseApi<T extends SupabaseDto> with Loglytics {\n  SupabaseApi({\n    required this.client,\n    required this.table,\n    required this.fromJsonFactory,\n    required this.toJsonFactory,\n  });\n  \/\/ ... methods for create, getById, getAll, update, delete, streamDocs, etc.\n}\n```\nIt is typically instantiated directly within the service that uses it, like in `TaskService`.\n\n### `SyncedDocService` & `SyncedDocsService`\n\nThese are the base classes for our stateful services that need to sync with Supabase data.\n-   `SyncedDocsService`: Manages a collection of documents from a table. It holds a `Map<String, T>` of documents in memory.\n-   `SyncedDocService`: Manages a single document from a table. It holds a single `T?` object in memory.\n\n## 3. Real-time Data Streaming and Syncing with `AuthSyncService`\n\nData synchronization is tied to the user's authentication state via the `AuthSyncService` base class, which `SyncedDoc(s)Service` extends.\n\n1.  **Auth-Aware Streaming**: When a user logs in, `AuthSyncService` is triggered.\n2.  **Defining the Stream**: Each service overrides the `stream` getter to define which Supabase query to listen to. For example, `TaskService` listens for tasks that are not yet completed.\n    ```dart\n    \/\/ in tasks\/services\/task_service.dart\n    @override\n    FutureOr<Stream<Map<String, TaskDto>?>> Function(User user) get stream =>\n        (user) => syncConfig.syncFromRemote\n            ? syncer\n                .streamDocsWithFilter(\n                  column: kCompletedAt,\n                  value: null,\n                )\n                .map(\n                  (event) => switch (event) {\n                    Success<List<TaskDto>>() => event.result.toIdMap(\n                        (element) => element.id,\n                      ),\n                    Fail<List<TaskDto>>() => defaultValues().toIdMap(\n                        (element) => element.id,\n                      ),\n                  },\n                )\n            : const Stream<Map<String, TaskDto>>.empty();\n    ```\n3.  **Processing Data**: The `onData` getter in `AuthSyncService` processes the data from the stream and updates the local in-memory state (`_docs` informer). This automatically updates any listening UI components.\n    ```dart\n    \/\/ in data\/services\/synced_docs_service.dart\n    @override\n    void Function(Map<String, T>? value, User? user) get onData => (value, user) {\n          if (user == null) {\n            \/\/ Clear data on logout\n            _docs.update(defaultValues().toIdMap((element) => element.id));\n            return;\n          }\n          \/\/ Update the in-memory map of documents\n          _docs.update(value ?? defaultValues().toIdMap((element) => element.id));\n        };\n    ```\n\n## 4. CRUD Operations\n\nAll create, update, and delete operations are handled by methods in our services (e.g., `TaskService`). These methods use the underlying `SupabaseApi` to perform the remote operation and then update the local state.\n\n**Example from `SyncedDocsService`:**\n```dart\n\/\/ in data\/services\/synced_docs_service.dart\nFuture<TurboResponse<T>> updateDoc(\n  T value, {\n  bool doNotifyListeners = true,\n  bool awaitSync = false,\n}) async {\n  \/\/ 1. Optimistic local update\n  _docs.updateCurrent(\n    (cValue) => cValue..[value.id] = value,\n  );\n  \/\/ 2. Remote Supabase update\n  if (awaitSync) {\n    await _trySyncUpdate(value: value);\n  } else {\n    unawaited(_trySyncUpdate(value: value));\n  }\n  return TurboResponse.success(result: value);\n}\n```\nThis pattern provides an \"optimistic update\" where the UI reacts instantly to the local state change, while the remote update happens in the background.\n\n## 5. Finding and Sorting Data\n\n-   **Finding Docs by ID**: Services provide a `docs[id]` lookup on the in-memory map. This is extremely fast as it doesn't require a database query.\n-   **Sorting**: Sorting is done in-memory, often using an `Isolator` for performance if the list is large. This ensures that the data exposed to the UI via `ValueListenable`s is always in the desired order without blocking the UI thread.\n    ```dart\n    \/\/ in tasks\/services\/task_service.dart\n    Future<List<TaskDto>> sortedPer({ ... }) async {\n      return await _taskIsolator.run(\n        input: pTasks,\n        computation: (input, sendProgress) {\n          \/\/ ... sorting logic ...\n        },\n      );\n    }\n    ```","keyword":"flutter-ins-supabase-comms;"},{"name":"flutter-ins-supabase-tables","text":"# Supabase Tables\n\nThis document provides a comprehensive guide to managing our Supabase database. It covers everything from adding new tables and defining data models to writing Row Level Security (RLS) policies and implementing server-side logic with Edge Functions. Adhering to these conventions is crucial for maintaining a stable, secure, and scalable backend.\n\nOur core philosophy is that **the Supabase schema is the single source of truth for our data**.\n\n## 1. How We Add a New Table\n\nAdding a new table is a structured process that ensures all parts of our system are in sync.\n\n### Step 1: Define the Table in Supabase Studio (or via Migration)\n\nThe first step is to define the schema for your new table. This should be done via a SQL migration file in your `supabase\/migrations` directory.\n\n-   **Convention:** Use snake_case for table and column names. Define primary keys, foreign keys, and indexes appropriately.\n-   **Example Migration (`supabase\/migrations\/..._create_tasks_table.sql`):**\n    ```sql\n    create table public.tasks (\n        id uuid primary key default gen_random_uuid(),\n        user_id uuid references auth.users not null,\n        title text check (length(title) > 0),\n        created_at timestamp with time zone default timezone('utc'::text, now()) not null,\n        -- other columns\n    );\n    ```\n\n### Step 2: Create DTOs in the Flutter App\n\nBased on the table definition, create a corresponding Data Transfer Object (DTO) in the Flutter application.\n\n-   **Location:** `lib\/your_feature\/dtos\/your_model_dto.dart`\n-   **Convention:** Use `json_serializable` with `fieldRename: FieldRename.snake`. Run `flutter pub run build_runner build` after creating your DTO.\n-   **Base Class:** Your DTO must extend `SupabaseDto`.\n\n### Step 3: Create a `SupabaseApi` Instance\n\nEach table is accessed through our generic `SupabaseApi` class. This is typically instantiated inside the service that manages the data for that table.\n\n-   **Location:** `lib\/your_feature\/services\/your_table_service.dart`\n-   **Convention:** The service will hold a `late final` instance of `SupabaseApi<YourDto>`.\n    ```dart\n    \/\/ In TaskService.dart\n    late final SupabaseApi<TaskDto> _api = SupabaseApi(\n      client: Supabase.instance.client,\n      table: 'tasks',\n      fromJsonFactory: TaskDto.fromJson,\n      toJsonFactory: (task) => task.toJson(),\n    );\n    ```\n\n### Step 4: Create a Service\n\nIf the table's data needs to be held in state, shared across features, or requires business logic, create a service.\n\n-   **Location:** `lib\/your_feature\/services\/your_table_service.dart`\n-   **Convention:** Extend `SyncedDocsService` (for collections) or `SyncedDocService` (for single items) and register it as a lazy singleton in `lib\/core\/services\/locator_service.dart`.\n\n## 2. How We Handle Security with RLS\n\nRow Level Security (RLS) policies are our primary defense for protecting user data. They are defined as SQL in migration files and must be created for every new table.\n\nOur policies follow these principles:\n-   **Default Deny:** RLS is enabled on all tables, so access is denied unless an explicit policy allows it.\n-   **Authentication Required:** Nearly all policies check that the user is authenticated using `auth.uid()`.\n-   **Data Validation:** We use `CHECK` constraints in our table definitions to validate incoming data.\n-   **Ownership and Permissions:** Access control is based on ownership. Policies check `auth.uid()` against a `user_id` column in the table.\n    ```sql\n    -- Example RLS policy for 'tasks' table\n    alter table public.tasks enable row level security;\n\n    create policy \"Users can manage their own tasks.\"\n    on public.tasks for all\n    using (auth.uid() = user_id)\n    with check (auth.uid() = user_id);\n    ```\n\n## 3. Things We Consider When Managing Tables\n\n-   **Scalability & Cost:** How will this design perform with millions of rows? We design queries to be efficient and ensure proper indexing on columns that are frequently queried.\n-   **Data Integrity:** We use **Postgres Transactions** for any operation that involves multiple writes to ensure atomicity. This can be done inside an RPC (a Postgres function exposed to the API) or an Edge Function.\n-   **Denormalization:** We sometimes duplicate data to optimize for read performance. When we do this, we create a **database trigger and function** to keep the duplicated data in sync.\n-   **Cleanup:** When a user is deleted, what related data needs to be cleaned up? We use `ON DELETE CASCADE` in our foreign key constraints or database triggers for this.\n\n## 4. How We Use Supabase in Edge Functions\n\nOur server-side logic is written in TypeScript and deployed as Supabase Edge Functions.\n\n-   **SDK:** We use the **Supabase client library** for Deno. When using a service role key, the function has privileged access to the database, bypassing RLS policies.\n-   **Triggers:** We use database triggers and webhooks to invoke Edge Functions in response to data changes.\n-   **DTOs:** Edge Functions should have their own DTOs located in `supabase\/functions\/_shared\/dtos\/`. These must be kept in sync with the table definitions.","keyword":"flutter-ins-supabase-tables;"},{"name":"flutter-ins-turbo-response","text":"---\nname: turbo-response-feedback-pattern\ndescription: \"Pattern for standardized user feedback using TurboResponse for consistent success and error handling.\"\n---\n# üéØ TurboResponse Feedback Pattern\n\nStandardized approach to user feedback using `TurboResponse<T>` for consistent operation outcomes.\n\n## TurboResponse Structure\n\n**`Success<T>`** - Successful operations:\n- `result`: The value of type `T` returned\n- `title` & `message`: Optional strings for success toasts\n\n**`Fail<T>`** - Failed operations:\n- `error`: Underlying `Object` that caused failure\n- `stackTrace`: Stack trace for debugging\n- `title` & `message`: User-friendly error explanations\n\n## Golden Rule: Keep UI Stable\n\n**Never update UI into error state** - avoid disruptive red error messages.\n\n**Instead:**\n1. **Keep UI in last valid state** - user can continue interacting\n2. **Provide non-intrusive feedback** via Toasts or blocking Dialogs\/Sheets\n\n**Exception:** Form validation errors below form fields are acceptable UX pattern.\n\n## Service Layer Contract\n\nEvery fallible operation returns `Future<TurboResponse>`:\n\n```dart\nFuture<TurboResponse<User>> updateProfile(UserProfile profile) async {\n  try {\n    final user = await _api.updateUser(profile);\n    return Success(\n      result: user,\n      title: 'Success',\n      message: 'Profile updated successfully',\n    );\n  } catch (e, stackTrace) {\n    return Fail(\n      error: e,\n      stackTrace: stackTrace,\n      title: 'Update Failed',\n      message: 'Could not update profile. Please try again.',\n    );\n  }\n}\n```\n\nThis ensures ViewModels receive structured responses for appropriate feedback handling.","keyword":"flutter-ins-turbo-response;"},{"name":"flutter-ins-utilities","text":"# ‚ö° Concurrency Patterns\n\nPatterns for managing asynchronous operations and keeping the UI thread responsive using project-specific utilities.\n\n## Heavy Work with Isolator\n\nFor CPU-intensive tasks, use `Isolator` (`lib\/state\/utils\/isolator.dart`) to run work on separate isolates.\n\n**When to use:** Computations taking more than a few milliseconds that aren't I\/O-bound.\n\n```dart\n\/\/ In service\nFuture<File> compressImage(File file) async {\n  final isolator = TIsolator<File, File>();\n  return await isolator.run(\n    input: file,\n    computation: (file, sendProgress) {\n      \/\/ Heavy processing logic here\n      return compressedFile;\n    },\n  );\n}\n```\n\n## Race Condition Prevention with Mutex\n\nUse `Mutex` (`lib\/state\/utils\/mutex.dart`) when state can be modified by multiple async operations.\n\n**When to use:** Updating critical state in response to async events.\n\n```dart\nfinal _mutex = Mutex();\n\nvoid onData(User? user) => _mutex.lockAndRun(\n  run: (unlock) async {\n    \/\/ Protected code - only one operation at a time\n    _currentUser.add(user);\n    unlock();\n  },\n);\n```\n\n## Rate Limiting with Throttler\n\nUse `Throttler` (`lib\/state\/utils\/throttler.dart`) to limit function execution frequency.\n\n**When to use:** Rapid-fire events where only the latest event matters within a time window.\n\n```dart\nfinal _throttler = Throttler(duration: 1.seconds);\n\nvoid _manageHouseholdMembers() => _throttler.run(() {\n  \/\/ Runs at most once per second\n});\n```\n\n## Delayed Execution with Debouncer\n\nUse `Debouncer` (`lib\/state\/utils\/debouncer.dart`) to delay execution until activity stops.\n\n**When to use:** User input like search fields - wait until user stops typing.\n\n```dart\nfinal _debouncer = Debouncer(duration: kDurationsAnimationX0p5);\n\nvoid _tryUpdateUsernameAvailability() => _debouncer.run(() async {\n  \/\/ Runs only after user stops typing for 500ms\n  final isAvailable = await _usernamesApi.usernameIsAvailable();\n  _usernameIsAvailable.update(isAvailable);\n});\n```\n","keyword":"flutter-ins-utilities;"},{"name":"Foat Note Dir","text":"~\/Repos\/float_note","keyword":";fn"},{"name":"Forks Repo","text":"~\/Repos\/Forks\/","keyword":";forks"},{"name":"git worktree add ..\/location","text":"git worktree add ..\/{argument name=\"branch-name\"} && cd ..\/{argument name=\"branch-name\"} && claude --dangerously-skip-permissions","keyword":";wts"},{"name":"git worktree remove","text":"git worktree remove","keyword":";rwts"},{"name":"gStrings","text":"gStrings","keyword":";gs"},{"name":"hormozi writing rules","text":"title: \"Writing Guidelines\"\nrules:\n  - name: \"Keep Everything Below 3rd Grade Reading Level\"\n    examples:\n      - wrong: \"We utilize leverage to gain higher returns on our equity checks\"\n        right: \"We borrow money so we can buy bigger stuff (and make more) than we could with our cash alone\"\n  - name: \"Present Voice\"\n    examples:\n      - wrong: \"When you're creating your sales page\"\n        right: \"When you create your sales page\"\n  - name: \"Active Not Passive\"\n    examples:\n      - wrong: \"The body was carried out of the room\"\n        right: \"We carried the body out of the room\"\n  - name: \"Avoid Adverbs Whenever Possible\"\n    description: \"adverbs usually mean lame verbs\"\n    notes:\n      - \"Avoid words like very, super, way, actually, etc\"\n    examples:\n      - wrong: \"We shut the door really hard\"\n        right: \"We slammed the door\"\n  - name: \"Simple\/Short Sentences\"\n    guidelines:\n      - \"Usually one comma\"\n      - \"If two commas - cut the middle or make 2 sentences\"\n    examples:\n      - wrong: \"We tried to escape but the man, with the red mask, chased us until we lost our breath\"\n        right: \"The red-masked man chased us until we lost our breath. We were trapped\"\n  - name: \"Positive Language\"\n    examples:\n      - wrong: \"Don't Stop\"\n        right: \"Keep Going\"\n      - wrong: \"Don't leave the facility\"\n        right: \"Stay inside\"\n  - name: \"Remove Redundant Words\"\n    examples:\n      - wrong: \"We simultaneously left the building at the same time\"\n        right: \"We left the building at the same time\"\n  - name: \"Remove Unnecessary Words\"\n    description: \"If they don't change the meaning or add to the meaning of the sentence\"\n    examples:\n      - wrong: \"8 Guidelines For Writing I Live By\"\n        right: \"8 Writing Guidelines I Live By\"\n      - wrong: \"He was able to get out of his car\"\n        right: \"He exited his car\"","keyword":";hwr"},{"name":"How To Create Anything","text":"1. I want..\n2. What are the components \/ results \/ first level deliverables?\n3. What components do these results consist of? What are the sub deliverables of those deliverables?\n4. What are the acceptance criteria that determine a deliverable is delivered? How should it ‚Äòbehave‚Äô? What properties should it have?\n5. How is each deliverable and sub deliverable achieved? Start with the subdeliverables.\n    1. Using your own knowledge create a high level plan\n    2. Find a perfect example(s) of similar deliverable\n        1. Analyze it‚Äôs components, behaviour, properties and acceptance criteria\n    3. Research the current industry standard \/ best approach to achieve it\n    4. Combine this info into actionable steps"},{"name":"Icon","text":"Icon(Icons{cursor})","keyword":";icon"},{"name":"Image Instagram Carousel Variable Prompt","text":"Instagram carousel slide that has {texts}.\nThe background must depict an environment related to the texts and the background must include elements related to the texts.\nOveral style must be {image_style}.\nThe title must be of {text_style}.\nThe composition of the image must be {image_composition}.\nColors must be of type {color_types}.\nBackground color theme must be {background_color_theme}.\nThe protagonist must adhere to {protagonist_composition}. \nDo not add add my handle.\n\n‚Äî\ntexts: {argument name=\"texts\"}\ntext_style: thumbail youtube like phat letters\nimage_style: surrealism 3d digital art realistic fantasy vibes\nimage_composition: there has to be enough space for me to add actual content and sticker at least 3\/4 of the image - title max 1\/4 of image\ncolor_types: use high contrast colors, add gradients and different colors for separate words sometimes\nbackground_color_type: {argument name=\"background_color_type\"}\nprotagonist_composition: {argument name=\"protagonist_composition\"}","keyword":"plx-create-carousel-image;"},{"name":"Image Thumbnail Variable Prompt","text":"YouTube thumbnail that has {texts}.\nThe background must depict an environment related to the texts and the background must include elements related to the texts.\nOveral style must be {image_style}.\nThe title must be of {text_style}.\nThe composition of the image must be {image_composition}.\nColors must be of type {color_types}.\nBackground color theme must be {background_color_theme}.\nThe protagonist must adhere to {protagonist_composition}. \nDo not add add my handle.\n\n‚Äî\ntexts: {argument name=\"texts\"}\ntext_style: thumbail youtube like phat letters\nimage_style: surrealism 3d digital art realistic fantasy vibes\nimage_composition: there has to be enough space for me to add actual content and sticker at least 3\/4 of the image - title max 1\/4 of image\ncolor_types: use high contrast colors, add gradients and different colors for separate words sometimes\nbackground_color_type: {argument name=\"background_color_type\"}\nprotagonist_composition: {argument name=\"protagonist_composition\"}","keyword":"plx-create-youtube-thumbnail;"},{"name":"image-plx","text":"Create a highly-detailed 8k cinematic concept photo that serves as a powerful visual activity metaphor for the core message of provided {text}. Your task is to ignore the literal words and instead analyze the underlying concepts and core messages and then translate that to {user_requests}. Depict the character embodying this concept and activity within a fitting environment with fitting objects and (optionally) other characters. The must all represent the chosen activity of the text while adhering to {user_requests}.\n\n<text>\n{cursor}\n<\/text>\n\nuser_requests: ","keyword":"image-plx;"},{"name":"initial-requirements-block","text":"## üìù Initial Requirements\n*What should the system\/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n","keyword":"initial-requirements-block;"},{"name":"ins-context-rot-awareness","text":"- Apply context rot awareness.\n- Ensure every part of a document directly adds value to the end_goal. Avoid anything that doesn‚Äôt.\n- Avoid using adverbs that don‚Äôt add value.\n- Avoid repetition of concepts; do not restate them in the negative or duplicate wording.\n- Keep all information lean, relevant, and free of wasted tokens.\n","keyword":"ins-context-rot-awareness;"},{"name":"ins-development-principles","text":"- Build reusable UI components; research existing ones before creating new\n- Keep widgets stateless and use primitive parameters for Storybook\/Widgetbook\n- Place state only in services\/view models (except for animations)\n- Apply Single Responsibility Principle (small classes, files, methods; one public class per file)\n- Maintain clear separation of concerns: UI, business logic, data\n- Use feature\/concept-based folder structure\n- Centralize constants and strings (ARB for user-facing, constants for keys\/values)\n- Use enums to represent types\/variants\n- Avoid inline comments inside methods; write self-documenting code\n- Prefer reusability and consistency over ad-hoc solutions\n- Follow project conventions and industry best practices\n- Write unit tests only for business logic (no UI\/integration tests, no mocks)\n- Keep project warning- and error-free\n- Validate work with tools (MCP, build commands, linting, analysis, Puppeteer, etc.)\n- Consider performance (algorithmic complexity, rendering, memory)\n- Apply security best practices in all features\n","keyword":"ins-development-principles;"},{"name":"ins-issue-conventions","text":"- Each project area (e.g., `issues\/engineering`, `marketing`) has its own folder inside `issues`.\n- Each area folder has a `000-backlog\/` folder where initial issues are saved.\n- Each area folder has `{3-digit-number}-{issue-title}` issue folders (e.g., 001-user-auth).\n- Each issue folder has `{AREA-CODE}-{ISSUE-NR}-{ISSUE-TITLE}-{ISSUE-TYPE}` issue documents.\n   - `{AREA-CODE}` is a 2 to 4 letter uppercase code representing the project area.\n   - Story document example: AUTH-001-oauth-integration-story.md.\n   - Issue document example: AUTH-001-oauth-integration-issue.md.\n   - PR document example: AUTH-001-oauth-integration-pr.md.\n   - [...]\n- All documents related to a specific issue share the same prefix (e.g., AUTH-001-oauth-integration) and belong to the same issue folder.\n- The same issue number can have multiple document types (e.g., story, plan, bug, pr).\n","keyword":"ins-issue-conventions;"},{"name":"ins-mvp-mindset","text":"- Apply the MVP mindset: focus getting the must-haves that deliver the most value right now, avoid adding or describing anything unnecessary, and keep every step aligned strictly with the main goal. \n","keyword":"ins-mvp-mindset;"},{"name":"ins-parallel-execution","text":"- Act as the orchestrator of multiple agents executing parallel tasks toward the main objective.\n- Begin by breaking down the main task into small, clearly scoped subtasks with single responsibilities.\n- Organize these subtasks into waves of parallel execution, ensuring each wave contains tasks that can run simultaneously without interference.\n- Assign subtasks to multiple agents in parallel, each focused on their own task while contributing to the shared goal.\n- Your core responsibility is to orchestrate the waves, review outputs, and confirm each subtask is completed exactly as required.\n- Direct agents with specific tasks, track their progress, and ensure they remain within scope while working efficiently toward the overall objective.\n- Adjust and create new subtasks when reviews or new insights reveal the need, while always keeping the main objective as the guiding point.\n- Always prevent interference between agents and maintain alignment with the overarching goal.\n","keyword":"ins-parallel-execution;"},{"name":"ins-project-deep-research","text":"- Think deep and make sure you understand 100% of the entire scope of what is being asked of you.\n- Based on that understanding research this project to understand exactly how to implement what I‚Äôve asked you.\n- Follow 100% of the project‚Äôs already existing conventions and examples similar to my request.\n- Follow existing patterns and conventions exactly as they are in the project.\n- Stick to what‚Äôs already been established.\n","keyword":"ins-project-deep-research;"},{"name":"ins-scope-integrity","text":"- Maintain absolute fidelity to the request without making assumptions\n- Avoid adding unrequested features\n- Avoid applying \"improvements\" that weren't explicitly asked for\n- Prevent AI over-engineering by forcing strong adherence to the actual scope of work\n- Do not assume, reinterpret, or improve anything unless explicitly told to.\n- No ‚Äúbetter‚Äù solutions, no alternatives, no creative liberties, no unsolicited changes.\n","keyword":"ins-scope-integrity;"},{"name":"Install BMAD","text":"npx bmad-method install","keyword":"initbmad;"},{"name":"interactions-block","text":"## ‚ö°Ô∏è Interactions\n> üí° *What triggers changes in a component, and how does data flow as a result?*\n\n[A mapping of interactions from actors, events, or parent components that affect a component, detailing the action, the resulting data flow, and any state changes it triggers.]\n\n- [Component]\n    - Interaction from [Actor: User | Event: System Notification | Parent: ContainerView]\n        - When [a specific action occurs, e.g., \"user taps the save button\"]\n            - Data Flow: [Description of what data is sent where, e.g., \"Form data is sent to the API client\"]\n            - Triggers State Change: [Description of the resulting state, e.g., \"Component's UI state becomes 'saving'\"]\n        - [More actions from this source]\n        - [...]\n    - [More interaction sources for this component]\n    - [...]\n\n- [More components]\n- [...]","keyword":"interactions-block;"},{"name":"issue-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> üí° *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## üéØ End Goal\n> üí° *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## üìù Initial Requirements\n*What should the system\/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## üìä Analytics\n> üí° *What user actions and system events should be tracked for analysis?*\n\n[A list of analytics events, detailing what triggers them, what data they include, and which analytics services they should be sent to.]\n\n- [Parent Item]\n    - [Event]\n        - Id: [event_id]\n        - Trigger: [What causes this event to be fired, e.g., \"User lands on the pricing page\"].\n        - Properties:\n            - [Property Name]: [Data Type] - [Description of the property]\n            - [More properties as needed]\n            - [...]\n    - [More events as needed]\n    - [...]\n\n## üèóÔ∏è Components\n> üí° *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## üö¶ States\n> üí° *What are the possible conditions or data a component can hold at any given time?*\n\n[A breakdown of a component's various states, categorized by where that state is stored or how it manifests.]\n\n- [Component]\n    - [State category e.g. UI, Memory, Local Device, Remote]\n        - [State]\n        - [More states as needed]\n        - [...]\n    - [More state categories as needed]\n    - [...]\n\n- [More components as needed]\n- [...]\n\n## ‚ö°Ô∏è Interactions\n> üí° *What triggers changes in a component, and how does data flow as a result?*\n\n[A mapping of interactions from actors, events, or parent components that affect a component, detailing the action, the resulting data flow, and any state changes it triggers.]\n\n- [Component]\n    - Interaction from [Actor: User | Event: System Notification | Parent: ContainerView]\n        - When [a specific action occurs, e.g., \"user taps the save button\"]\n            - Data Flow: [Description of what data is sent where, e.g., \"Form data is sent to the API client\"]\n            - Triggers State Change: [Description of the resulting state, e.g., \"Component's UI state becomes 'saving'\"]\n        - [More actions from this source]\n        - [...]\n    - [More interaction sources for this component]\n    - [...]\n\n- [More components]\n- [...]\n\n# üõ†Ô∏è Behaviours\n> üí° *Which states or events should the component act upon? How should it behave when nothing happens?*\n\n[How a component should act when a state is, or an event happens]\n\n- [Component]\n    - [State or event]\n        - Should [Behaviour]\n        - [More behaviours if needed]\n        - [...]\n    - [More states or events if needed]\n    - [...]\n        - [Sub-component]\n            - [More states or events if needed]\n            - [...]\n        - [More sub-components if needed]\n        - [...]\n\n- [More components if needed]\n- [...]\n\n## üõ°Ô∏è Essential Conditions\n> üí° *What should always go right? What can never go wrong? What should always be? What should never be?*\n\n[A set of fundamental measurable conditions that must always be met. These serve as direct input for unit and end-to-end tests.]\n\n- [Parent Item]\n    - [Essential condition]\n    - [More essential conditions if needed]\n    - [...]\n\n- [More items if needed]\n- [...]\n\n## üì¶ Deliverables\n> üí° *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## üöÄ Checkpoints\n> üí° *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n","keyword":"issue-template;"},{"name":"JSON Context Model Description","text":"the end goal of the json context model should be that it describes the concept entity completely, without any framework or language references. basically a blueprint in plain english that is able to describe the concept in any type of project or language","keyword":"json-context-model-desc;"},{"name":"Keep Awake","text":"sudo pmset -a disablesleep 1","keyword":";wake"},{"name":"Markdown Writing Style","text":"1. Use a neutral, professional tone. Avoid jokes, emojis, or unnecessary clutter. Use simple language so everyone can understand.\n2. Structure the tutorial with clear, logical steps. Each step should be at least one sentence long.\n3. Include relevant code snippets, prompts, reusable text and templates where appropriate. Format: [SNIPPET: Description of what the code does]\n4. Include placeholders for screenshots if they are relevant to the steps, indicating what the screenshot should show. Format: [Screenshot: Description of what the screenshot should show]\n5. Include GIFs or images if they are relevant to the steps, indicating what the GIF or image should show. Format: [IMAGE: Description of what the GIF should show] or [Image: Description of what the image should show]\n6. If applicable, add placeholders for screenshots using the format: [Screenshot: Description of what the screenshot should show]\n7. Ensure the tutorial is straightforward and not convoluted.\n8. Write in a natural style that sounds like a high-quality tutorial found on a reputable website.\n9. Focus on explaining what happens, what needs to be done, and what steps need to be taken.\n\nFormat writing in markdown, including appropriate headings, callouts, code blocks, lists and other markdown features as needed.","keyword":"makrdown-writing-style"},{"name":"meeting-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# üìã Meeting Notes: [Title]\n> üí° *What is this all about?*\n\n[One short paragraph describing the purpose of the meeting]\n\n## üë• Attendees\n> üí° *Who was there?*\n\n- [Name] (Role)\n- [More names if needed]\n- [...]\n\n## üîñ Summary\n> üí° *What happened?*\n\n[One short paragraph with key outcomes, decisions, and next steps]\n\n## ‚úÖ Decisions\n> üí° *What was decided?*\n\n- [Decision] ‚Äî [Rationale] (Owner: [Name])\n- [More decisions if needed]\n- [...]\n\n## ‚ùì Open Questions\n> üí° *What needs to be answered?*\n\n- [Question] ‚Äî [Context] (Owner: [Name], Due: [Date])\n- [More questions if needed]\n- [...]\n\n## üìù Action Items\n> üí° *What needs to be done?*\n- \n- [ ] [Task] (Owner: [Name], Due: [Date])\n- [More tasks if needed]\n- [...]\n\n## ‚ûï Notes\n> üí° *Anything else worth noting?*\n\n- [Additional context, technical\/process\/external factors]\n- [More notes if needed]\n- [...]\n","keyword":"meeting-template;"},{"name":"milestone-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> üí° *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## üéØ End Goal\n> üí° *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## üìù Initial Requirements\n*What should the system\/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## üèóÔ∏è Components\n> üí° *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## üì¶ Deliverables\n> üí° *Which components should be created together?*\n\n[Components packaged together as unified testable units]\n\n- [Deliverable]\n    - [Component]\n        - [Sub-subcomponent]\n        - [More sub-subcomponents if needed]\n        - [...]\n    - [More components if needed]\n    - [...]\n\n- [More deliverables if needed]\n\n- [...]\n\n## üöÄ Checkpoints\n> üí° *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\nqsqsq   read -r \"?Deploy to dev? [y\/N] \" response\nif [[ \"$response\" =~ ^([yY][eE][sS]|[yY])$ ]]\nthen\n    firebase use dev\n    firebase deploy --only firestore:rules\nfis\n- [More checkpoints if needed]\n\n- [...]\n","keyword":"milestone-template;"},{"name":"NL34BUNQ2035364809","text":"NL34BUNQ2035364809","keyword":";iban"},{"name":"note-taking-mode","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source} and {end_goal}.\n2. Await incoming information or updates from the user.\n3. Capture this information in {source}, keeping it clear, structured, and consistent with project conventions.\n4. Refine, reorganize, or expand {source} if needed to align with {end_goal}.\n5. Confirm alignment between {source} and {end_goal} after each update.\n6. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n   <\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n  <\/acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each new piece of information.\n- ALWAYS reassess and refine {source} to ensure it aligns with {end_goal}.\n- ALWAYS keep the last state of {source} and {end_goal} as the guiding point for all refinements.\n  <\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask questions.\n  <\/operating_constraints>\n\nrole: Strategic Note-Taking Expert\nexpertise: systematically capturing, refining, and structuring information to ensure alignment with goals\noperating_mode: Note-Taking Mode\n","keyword":"note-taking-mode;"},{"name":"Pew Pew Apps Directory","text":"~\/Repos\/pew-pew-apps\/","keyword":";ppa"},{"name":"Pew Pew Workspace Install Snippet","text":"curl -fsSL https:\/\/raw.githubusercontent.com\/pew-pew-prompts\/pew-pew-workspace\/main\/.pew\/install.sh | bash","keyword":"plxinit;"},{"name":"plx create issue symlinks","text":"Create symbolic links to workspace issues folders located one directory up from your current project. The workspace folder is called {argument name=\"project_workspace\"} and should contain the following folders (create if not):\n\n- issues\/{argument name=\"rep_name\"}\/{argument name=\"project_name\"}\n\nand inside the project folder it should look like:\n\n- {argument name=\"project_name\"}\/issues\n\nCreate symlinks in your current project directory that point to the issue folder, allowing you to access issues directly from within your\nproject. Use relative paths when creating the symlinks."},{"name":"plx create symlink","text":"I want to create a symbolic link on my Mac. Please ask me the following questions one by one:  \n1. What is the **source folder** (the real folder I want to point to)?  \n2. What is the **target folder** (the location and name of the symlink that should appear)?  \n\nAfter I provide both answers:  \n- First, generate the exact `mkdir -p` command needed to ensure the parent directory of the target exists.  \n- Then, generate the exact `ln -s` command to create the symbolic link (source first, then target).  \n- Prefer relative paths if possible.  "},{"name":"Plx Install BMAD","text":"npx bmad-method install","keyword":"plx-install-bmad"},{"name":"plx transform 2 yaml","text":"System role: You transform arbitrary source content into a target format that exactly matches a clearly defined target_schema.\n\nObjective: Produce output that conforms 1:1 to {target_schema}. Output only YAML. No commentary, no extra keys, no emojis. Never remove or rewrite original instructions\/properties; only translate structure and add clarifying fields when needed.\n\nAbsolute Output Contract:\n- Output only a single fenced code block marked yaml, containing one valid YAML document.\n- No prose or text outside the fenced block.\n- Inside the YAML document: no comments, no markdown formatting, no HTML tags, no emojis.\n- If any forbidden content would appear, remove it or replace with plain text per spec.\n\nInputs:\n- source_content: Unstructured or semi-structured content to transform.\n- target_schema: Precise description of the required target YAML format (structure, keys, order, constraints, and examples if any).\n\nGeneral Transformation Rules:\n- Preserve only information needed to satisfy target_schema; remove fluff, prose, comments, TODOs, review notes, and emojis.\n- Normalize structure strictly to target_schema (key names, order, casing, nesting, datatypes).\n- Convert lists, blocks, headings, and examples into the specified YAML structures.\n- Consolidate overlapping sections under canonical keys as defined by target_schema.\n- Do not invent fields or values that are not derivable from source_content unless target_schema explicitly requires defaults.\n- If a required value is missing, insert an explicit placeholder per schema (e.g., \"\" or []), not prose.\n- No markdown syntax inside fields unless target_schema explicitly requires it.\n- Use valid YAML: two-space indentation, hyphenated lists, no tabs, no trailing comments.\n- Never include any markdown markup, simplify into simple keywords.\n - Preserve critical guidance such as instructions, rules, workflows when present in source and permitted by target_schema; do not omit.\n - Key naming policy: use concise, meaningful snake_case keys; do not generate long keys from sentences; only keys allowed by target_schema plus the optional `template` object (see below).\n\nTemplate Extraction Rules:\n- When the source describes an output template (e.g., section headings, \"Output Format\", \"Sections\"), emit a `template` object:\n  - template.fields: ordered list of plain section names with all markdown stripped (no `#`, backticks, or formatting).\n  - template.format: \"markdown\" if the source implies markdown sections or explicitly states markdown; otherwise use the closest format indicated by source or target_schema. If ambiguous but headings are used, set to \"markdown\".\n- Do not copy full template prose into fields; list only the field names.\n\nSanitization Pipeline (apply in order):\n1) Remove all emoji characters and shortcodes (e.g., :smile:), including zero-width joiners and variation selectors.\n2) Strip markdown headings and inline formatting (leading `#`, `*`, `_`, `~~`, backticks, images\/links `![]()`, `[]()`).\n3) Remove code fences and inline backticks entirely.\n4) Remove HTML tags and entities.\n5) Collapse extra whitespace; keep only semantic content required by target_schema.\n\nAnti-Failure Rules:\n- Do not copy the entire source content, templates, front-matter, or headings into a single value.\n- Do not place raw markdown or HTML into values. Extract only the semantic data required by target_schema.\n- Do not emit placeholder keys not present in target_schema.\n- If a field cannot be reliably derived, emit the minimal placeholder allowed by target_schema (e.g., \"\" or []).\n - Do not delete instructions\/rules\/workflow content if present and allowed by target_schema; map them faithfully into the schema.\n\nValidation Checklist (must all be true):\n- Output is wrapped in a single ```yaml fenced code block with nothing before or after it.\n- Inner content is valid YAML (parseable with a standard YAML parser).\n- Structure and key order match target_schema exactly.\n- No extra keys\/sections; no missing required keys.\n- Value types match the spec (string\/number\/array\/object\/boolean\/null).\n- No comments\/TODOs\/emojis or explanatory text outside the YAML.\n- No forbidden content inside YAML: markdown formatting, HTML tags, or emojis.\n - If the source implies a template, YAML includes `template.fields` (plain names) and `template.format` set to \"markdown\" when indicated.\n - Keys are concise snake_case and limited to target_schema plus optional `template`.\n\nInstructions:\n- Read source_content.\n- Map and normalize into the target YAML structure per target_schema.\n- Emit only the final YAML artifact in one fenced block.\n - Respect the source's template intent: extract section names into `template.fields` and set `template.format` accordingly (prefer \"markdown\" when headings\/markdown are used).\n\nExample (illustrative only):\ntarget_schema: name:string, tags:string[], summary:string\nsource_content:\n  \"\"\"\n  Name: # üßπNimbus 3000\n  Tags: flight, broomsticks\n  Summary: The best broomstick! Fast and reliable.\n  Extra: Ignore\n  \"\"\"\nexpected YAML output:\nname: \"Nimbus 3000\"\ntags:\n  - \"flight\"\n  - \"broomsticks\"\nsummary: \"The best broomstick! Fast and reliable.\"\n\n---\n\nPlease transform {my_input} into YAML per {target_schema}. Output only a single fenced ```yaml code block containing the YAML document. No prose outside the fence; no markdown or emojis inside the YAML.\n\n<my_input>\n{clipboard}\n<\/my_input>"},{"name":"plx-create-anything","text":"You are a {role} specialised in {domain_expertise} and achieving {end_goals}.\nYour main task is to work diligently towards {end_goal} while making sure to meet 100% of all {acceptance_criteria} and satisfy all user requests while avoiding all {constraints} and {bad_examples}.\nALWAYS take into account all {good_examples}, {dependencies} and all {relevant_context}.\nALWAYS strictly adhere to all mentioned {best_practices}, {personal_preferences}, {quality_standards}, {deliverables} and {output_format}.\n\n---\n- `<role><\/role>`\n- `<domain_expertise><\/domain_expertise>`\n- `<dependencies><\/dependencies>`\n- `<good_examples><\/good_examples>`\n- `<bad_examples><\/bad_examples>`\n- `<relevant_context><\/relevant_context>`\n- `<best_practices><\/best_practices>`\n- `<quality_standards><\/quality_standards>`\n- `<constraints><\/constraints>`\n- `<deliverables><\/deliverables>`\n- `<output_format><\/output_format>`\n- `<end_goals><\/end_goals>`","keyword":"plx-create-anything"},{"name":"plx-create-doc","text":"Please create a highly detailed {doc_type} document in {doc_location} based on your system instructions, your best judgement and known practices related to my {user_requests}.\n\nStart with reading all {relevant_context} and then proceed to ask the clarifying questions needed until you reach 100% certainty about every section of the document.\n\nUpon reaching 100% certainty present me with a high level overview and ask me for feedback. Process the feedback and ask for feedback again.\n\nUpon confirmation from me that there is no more feedback you may proceed create the document in {doc_location}.\n\n```yaml\nrelevant_context: <file_map>, <file_contents>, <extra_context>\ndoc_type: \ndoc_location: \nuser_requests: \n```\n\n```xml\n<extra_context>\n<\/extra_context>\n```\n","keyword":";plx-create-doc"},{"name":"plx-create-docs","text":"Please create highly detailed {doc_type} documents in {doc_location} based on your system instructions, your best judgement and known practices related to my {user_requests}.\n\nStart with reading all {relevant_context} and then proceed to ask the clarifying questions needed until you reach 100% certainty about every section of the document.\n\nUpon reaching 100% certainty present me with a high level overview and ask me for feedback. Process the feedback and ask for feedback again.\n\nUpon confirmation from me that there is no more feedback you may proceed create the documents in {doc_location}.\n\n```yaml\nrelevant_context: <file_map>, <file_contents>, <extra_context>\ndoc_type: \ndoc_location: \nuser_requests: \n```\n\n```xml\n<extra_context>\n<\/extra_context>\n```\n","keyword":";plx-create-docs"},{"name":"plx-create-prototype-prompt","text":"I would like to prototype {feature_description} in apps like {prototype_apps} first before we start implementing {feature_description} in this project. Please provide a clear, effective, and concise starting prompt optimized specifically for quickly prototyping this feature in apps like {prototype_apps} with the goal of providing all relevant context needed to prototype it in their app and then exporting the result as initial input for the actual implementation in this app.\n\n```yaml\nprototype_apps: Bolt.new, v0, Lovable \n```\n\n<feature_description>\n{cursor}\n<\/feature_description>","keyword":"plx-create-prototype-prompt"},{"name":"plx-create-regression-test","text":"Isolate the logic based on {user_requests} and create a unit test that confirms the issue related to {user_requests} never happens again. Do NOT use mocks, isolate logic optionally creating new services or smaller methods to make this happen. We only test real logic without mocks. If you run into issues or need a decision to be made ask me questions on how to solve it.\n\nuser_requests: "},{"name":"plx-run-in-parallel","text":"IMPORTANT: Use multiple agents in parallel tasks all working towards the same goal in each wave. You act as the orchestrator of multiple agents that act in parallel tasks to execute the main task at hand.\nYour main task and responsibility is to act as leading agent that makes sure the waves at hand is executed exactly as requested.\nYou give agents in parallel specific tasks, monitor their progress, and ensure they are working inside their own task and work towards the common goal of completing the main task efficiently and effectively.\nAlways making sure the agents in parallel do not interfere with each other and that they are all aligned with the overall goal.\n\nStart this process by making sure you have 100% clarity and confidence about the perfect way to implement this in this project following its way of working and best practices.\nResearch the project in parallel and use your more advanced available agent tools to increase your percentage where needed.\n\nAfter initial research and during the process you must get in the habit to ask questions, over deciding unspecified requirements yourself, when you encounter ambiguities or uncertainties. Anything that is not explicitly specified in the project or the task description should be clarified with the user.\n\nBefore you do anything, think deep and make sure you understand 100% of the entire scope of what I am asking of you. Then, based on that understanding research this project to understand exactly how to implement what I‚Äôve asked you following 100% of the project‚Äôs already existing conventions and examples similar to my request. Do not assume, reinterpret, or improve anything unless explicitly told to. Follow existing patterns and conventions exactly as they are in the project. Stick to what‚Äôs already been established. No ‚Äúbetter‚Äù solutions, no alternatives, no creative liberties, no unsolicited changes. Your output should always be sceptical and brutally honest. Always play devil‚Äôs advocate. Always review your output, argue why it won‚Äôt work and adjust accordingly.","keyword":";par"},{"name":"plx-wave-anything","text":"Please think deeply about the multi-faceted execution ahead. You are about to coordinate a sophisticated parallel task completion process.\n\n**PHASE 1: REQUEST ANALYSIS & CONTEXT GATHERING**\nDeeply analyze the `{user_requests}` to understand:\n- The primary objectives and deliverables requested\n- Specific subtasks that can be parallelized\n- Dependencies between different components\n- Quality requirements and constraints\n- Expected output format and structure\n\nSimultaneously gather project context:\n- Analyze relevant project files and existing code\n- Understand current architecture and patterns\n- Identify reusable components and established conventions\n- Map the project's feature organization\n- Determine integration points for new work\n\n**PHASE 2: TASK DECOMPOSITION & STRATEGY**\nBased on request analysis and project context:\n- Break down {user_requests} into discrete, parallelizable subtasks\n- Identify task dependencies and sequencing requirements\n- Group related tasks into execution waves\n- Determine which tasks can run simultaneously vs sequentially\n- Plan resource allocation across different task types\n- Consider both immediate deliverables and long-term maintainability\n\n**PHASE 3: PARALLEL AGENT COORDINATION BLUEPRINT**\nDesign the multi-agent execution strategy:\n\n**Agent Specialization Strategy:**\n- **Research Agents**: Gather information, analyze existing code, understand patterns\n- **Design Agents**: Create UI\/UX specifications, component architectures\n- **Implementation Agents**: Build features, write code, create components\n- **Integration Agents**: Connect components, ensure compatibility\n- **Quality Agents**: Verify standards, check consistency, validate outputs\n- **Documentation Agents**: Update docs, create guides, maintain clarity\n\n**Wave-Based Execution Planning:**\n- **Wave 1 - Foundation**: Research and analysis tasks\n- **Wave 2 - Architecture**: Design and structural decisions\n- **Wave 3 - Core Implementation**: Primary feature development\n- **Wave 4 - Integration**: Connecting components and systems\n- **Wave 5 - Polish**: Refinement, testing, documentation\n\n**PHASE 4: PARALLEL EXECUTION ORCHESTRATION**\nDeploy specialized agents in coordinated waves:\n\n**Wave Execution Protocol:**\nFOR each execution_wave IN planned_waves:\n1. Prepare wave-specific context and requirements\n2. Assign specialized agents to parallel tasks\n3. Provide each agent with:\n- Specific task definition from {user_requests}\n- Relevant project context and files\n- Dependencies on other tasks\n- Quality criteria and standards\n- Integration requirements\n4. Launch agents simultaneously where possible\n5. Monitor progress and handle inter-agent communication\n6. Collect outputs and validate completeness\n7. Prepare context for next wave\n\n**Agent Task Assignment Template:*\n```\nAGENT TASK: [Specific aspect of {user_requests}]\nTYPE: [Research|Design|Implementation|Integration|Quality|Documentation]\nCONTEXT:\n\nUser Request Component: [Relevant part of {user_requests}]\nProject Files: [Specific files\/directories to analyze]\nDependencies: [Other tasks that must complete first]\nRelated Agents: [Agents working on connected tasks]\n\nOBJECTIVES:\n\n[Specific deliverable aligned with {user_requests}]\n[Quality requirement from project standards]\n[Integration point with other components]\n\nCONSTRAINTS:\n\nMust follow project conventions for [relevant area]\nCoordinate with [other agents] on [shared concerns]\nEnsure compatibility with [existing systems]\n\nOUTPUT:\n\nFormat: [Expected deliverable format]\nLocation: [Where to place results]\nDocumentation: [Required documentation updates]\n```\n\n**PHASE 5: ADAPTIVE ORCHESTRATION & MONITORING**\nContinuously orchestrate the parallel execution:\n\n**Dynamic Coordination:**\n- Monitor all active agents for progress and blockers\n- Facilitate inter-agent communication for shared concerns\n- Dynamically reassign tasks if agents encounter issues\n- Merge parallel outputs into cohesive deliverables\n- Ensure all aspects of {user_requests} are addressed\n\n**Quality Assurance Integration:**\n- Verify each output meets project standards\n- Check cross-component compatibility\n- Validate against {user_requests} requirements\n- Ensure documentation completeness\n- Maintain code quality and consistency\n\n**Progressive Refinement:**\n- After each wave, assess overall progress\n- Identify gaps or improvements needed\n- Launch targeted agents for refinements\n- Iterate until {user_requests} fully satisfied\n\n**EXECUTION PRINCIPLES:**\n\n**Task-Oriented Focus:**\n- Every agent works toward specific aspects of {user_requests}\n- Deliverables are concrete and measurable\n- Progress is tracked against original requirements\n- Integration is continuous, not just at the end\n\n**Intelligent Parallelization:**\n- Maximize concurrent execution where dependencies allow\n- Group related tasks for better context sharing\n- Balance load across different agent types\n- Minimize waiting and blocked states\n\n**Context-Aware Execution:**\n- Each agent understands the broader project context\n- Decisions align with existing patterns and conventions\n- New work integrates seamlessly with current codebase\n- Documentation maintains project coherence\n\n**Adaptive Response:**\n- Flexibly handle various types of {user_requests}\n- Scale agent deployment based on task complexity\n- Adjust waves based on discovered requirements\n- Maintain quality regardless of request type\n\n**ORCHESTRATION GUIDELINES:**\n\n**For Development Tasks:**\n- Prioritize reusable component creation\n- Ensure proper separation of concerns\n- Follow established architectural patterns\n- Maintain comprehensive test coverage where specified\n\n**For Documentation Tasks:**\n- Analyze existing documentation structure\n- Maintain consistent formatting and style\n- Ensure technical accuracy and completeness\n- Create both user and developer documentation\n\n**For Analysis Tasks:**\n- Thoroughly examine current implementation\n- Identify improvement opportunities\n- Document findings with actionable insights\n- Propose concrete implementation paths\n\n**For Creative Tasks:**\n- Research domain best practices\n- Generate multiple solution options\n- Evaluate against project constraints\n- Deliver production-ready implementations\n\n**QUALITY CHECKPOINTS:**\nBefore completing each wave:\n- ‚úì All {user_requests} components addressed\n- ‚úì Project conventions followed\n- ‚úì Integration points tested\n- ‚úì Documentation updated\n- ‚úì No conflicts with existing code\n- ‚úì Performance considerations met\n- ‚úì Security measures implemented\n- ‚úì Code quality standards maintained\n\nBegin execution by thoroughly analyzing {user_requests} and determining the optimal parallel execution strategy.\n\nWhen all tasks are finished provide the user with a short list of instructions on how to test everything manually so that the user may provide you with proper feedback if needed.\n\nIMPORTANT: Use multiple agents in parallel tasks all working towards the same goal in each wave. You act as the orchestrator of multiple agents that act in parallel tasks to execute the main task at hand.\nYour main task and responsibility is to act as leading agent that makes sure the waves at hand is executed exactly as requested.\nYou give agents in parallel specific tasks, monitor their progress, and ensure they are working inside their own task and work towards the common goal of completing the main task efficiently and effectively.\nAlways making sure the agents in parallel do not interfere with each other and that they are all aligned with the overall goal.\n\nUse local markdown text files for effecient communication and context preservation between waves, tasks, sessions and agents in local folder `group-chat\/**\/*`.\n\n<user_requests>\n{argument name=\"user_requests\"}\n<\/user_requests>","keyword":"plx-wave-anything"},{"name":"plxadd","text":"git add -A"},{"name":"plxcommit","text":"git add -A && git commit -m \"{argument name=\"message\"}\""},{"name":"plxsync;","text":"make -f .pew\/Makefile sync claude","keyword":"plxsync;"},{"name":"properties-block","text":"## üìù Properties\n> üí° *What identifies a component? What can be configured? What can change?*\n\n[The values and configurations that determine a components identity and possible states]\n\n- [Component]\n    - [Property]: [Description of the property]\n    - [More properties if needed]\n    - [...]\n        - [Sub-component]\n            - [Property]: [Description of the property]\n            - [More properties if needed]\n            - [...]\n\n- [More components if needed]\n\n- [...]\n","keyword":"properties-block;"},{"name":"question-mode","text":"Act as a {role} specialised in {expertise} operating solely in {operating_mode}.\nYou follow the {mode_procedure} rigorously in every interaction until {end_goal} is reached.\n\nYou are the world's leading expert in your field, known for being extremely strict and driven to always:\n- meet 100% of all {acceptance_criteria}\n- satisfy every part of my {user_request}\n- adhere to all {operating_rules} while avoiding all {operating_constraints}\n- never deviate from the {mode_procedure}\n- never compromise on quality or thoroughness\n\n---\n\n<mode_procedure>\n1. Analyze, evaluate and understand the current state of {source} and {end_goal}.\n2. Determine next best set of {question_count} questions where the answers will provide the most value toward achieving the {end_goal}.\n3. Present the questions following {output_format} in {output_target}.\n4. Await the user's feedback and answers.\n5. Analyze, evaluate and understand the feedback and answers to the questions.\n6. Update {source} with the new information.\n7. Repeat all steps chronologically from start to finish, until {end_goal} is reached.\n   <\/mode_procedure>\n\n<acceptance_criteria>\n- {end_goal} is fully achieved.\n  <\/acceptance_criteria>\n\n<operating_rules>\n- ALWAYS make sure a {source} is present.\n- ALWAYS update {source} after each answer.\n- ALWAYS reassess and adapt the next most valuable question set of {question_types} based on {source} and {end_goal}.\n- ALWAYS ask low-cognitive yes\/no\/multiple-choice questions only.\n- ALWAYS keep last state of {source} and the {end_goal} as the guiding point for all questions.\n- ALWAYS ask {question_count} question(s) at a time.\n- ALWAYS format your questions following {output_format}.\n- ALWAYS output your questions to {output_target}.\n  <\/operating_rules>\n\n<operating_constraints>\n- NEVER deviate from the {mode_procedure}.\n- NEVER ask open-ended questions.\n  <\/operating_constraints>\n\n<question_types>\n- üîÑ Simplify (remove complexity)\n- ‚ùì Clarify (confirm meaning\/assumptions)\n- üîß Improve (optimize\/enhance)\n- ‚ûï Expand (add missing cases\/features)\n- ‚ûñ Reduce (scope\/MVP focus)\n- ‚öñÔ∏è Prioritize (decide what matters most)\n- üö® Risk (identify risks\/edge cases)\n- ‚úÖ Validate (check feasibility\/requirements met)\n  <\/question_types>\n\n<output_format>\n- [Question Number]. [Question Text]\n    - [Letter]. [Answer Option]\n    - [More options as needed]\n    - [...]\n    - [Letter]. Research the project\n    - [Letter]. Research the web\n    - [Letter]. Skip\n- [...]\n  <\/output_format>\n\nrole: Strategic Questioning Expert\nexpertise: systematically refining understanding and direction through structured questioning frameworks\noperating_mode: Most Valuable Question (MVQ) Mode\noutput_target: chat\n","keyword":"question-mode;"},{"name":"qwd","text":"\/\/ TODO(GPT-AGENT): {date} : {cursor}","keyword":";q"},{"name":"qwe","text":"I've added some \"TODO(GPT-AGENT)\" strings as feedback in the project. Use grep to find them all. Process them and then come back for another round of feedback."},{"name":"Raycast Snippet Template","text":"[\n  {\n    \"name\": \"[File Name In Title Case]\",\n    \"text\": \"[File Content]\",\n    \"keyword\": \"[File Name In Kebab Case]\"\n  },\n  {\n    \"name\": \"[File Name In Title Case]\",\n    \"text\": \"[File Content]\"\n  },\n  {\n    \"name\": \"[File Name In Title Case]\",\n    \"text\": \"[File Content]\",\n    \"keyword\": \"[File Name In Kebab Case]\"\n  }\n]\n"},{"name":"read-feedback","text":"I've added some {feedback_identifier} as feedback.\n- Use grep to find them all and process them.\n- After processing the feedback, scan the {instructions_folders} for any relevant files that may be missing or need updating regarding the files you just updated.\n- Create and\/or update them with these project conventions based on the feedback you received to avoid making the same mistakes next time.\n\n---\n<feedback_identifier>\n{snippet name=\"feedback-id\"}\n<\/feedback_identifier>\n\ninstructions_folders: {argument name=\"instructions_folders\"}\n","keyword":"read-feedback;"},{"name":"read-project-info","text":"Get familiar with this project.\n- Understand the general project structure via @README.md\n- Understand where to find what via {project_tree_map}\n- Understand the different types of files via {project_crud_types}\n\n<project_tree_map>\n{snippet name=\"ref-project-tree-map\"}\n<\/project_tree_map>\n\n<project_crud_types>\n{snippet name=\"all-project-crud-types\">\n<project_crud_types>\n","keyword":"read-project-info;"},{"name":"ref-project-tree-map","text":"# WARNING: This is a flutter example file, ask the user to update it to match their project\n---\n‚îú‚îÄ‚îÄ analysis_options.yaml # Dart analysis rules and linter settings\n‚îú‚îÄ‚îÄ android # Android-specific project files and configurations\n‚îú‚îÄ‚îÄ assets # Project assets like images, fonts, and audio files\n‚îú‚îÄ‚îÄ CHANGELOG.md # Project changelog documenting changes and updates\n‚îú‚îÄ‚îÄ CLAUDE.md # Instructions for using Claude AI in the project\n‚îú‚îÄ‚îÄ flutter-packages # Local packages used in the project exposed via symlinks\n    ‚îú‚îÄ‚îÄ flutter_native_splash # Package for native splash screens\n    ‚îú‚îÄ‚îÄ informers -> # Package for enhanced ValueNotifier state management\n    ‚îú‚îÄ‚îÄ shadcn_ui -> # Package for shadcn UI components\n    ‚îú‚îÄ‚îÄ supabase_flutter -> # Package for supabase integration with Flutter\n    ‚îú‚îÄ‚îÄ turbo_response -> # Package for handling API responses\n    ‚îî‚îÄ‚îÄ veto -> # Package for MVVM architecture and state management\n‚îú‚îÄ‚îÄ ios # iOS-specific project files and configurations\n‚îú‚îÄ‚îÄ issues # Local project issues and tasks\n‚îú‚îÄ‚îÄ lib # Flutter application code\n‚îú‚îÄ‚îÄ linux # Linux-specific project files and configurations\n‚îú‚îÄ‚îÄ macos # macOS-specific project files and configurations\n‚îú‚îÄ‚îÄ pubspec.lock # Locked versions of dependencies\n‚îú‚îÄ‚îÄ pubspec.yaml # Project metadata and dependencies\n‚îú‚îÄ‚îÄ README.md # Project overview and instructions\n‚îú‚îÄ‚îÄ scripts # Automation and utility scripts\n‚îú‚îÄ‚îÄ supabase # Supabase configuration and migration files\n‚îú‚îÄ‚îÄ test # Tests for the application\n‚îú‚îÄ‚îÄ web # Web-specific project files and configurations\n‚îî‚îÄ‚îÄ windows # Windows-specific project files and configurations\n","keyword":"ref-project-tree-map;"},{"name":"refine-acceptance-criteria","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"acceptance-criteria-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-acceptance-criteria;"},{"name":"refine-analytics","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"analytics-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-analytics;"},{"name":"refine-behaviours","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"behaviours-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-behaviours;"},{"name":"refine-block","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source_block\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"refine-block;"},{"name":"refine-checkpoints","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"checkpoints-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-checkpoints;"},{"name":"refine-components","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"components-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-components;"},{"name":"refine-deliverables","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"deliverables-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-deliverables;"},{"name":"refine-effort-breakdown-estimates","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"effort-breakdown-estimates-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-effort-breakdown-estimates;"},{"name":"refine-end-goal","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"end-goal-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-end-goal;"},{"name":"refine-essential-conditions","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"essential-conditions-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-essential-conditions;"},{"name":"refine-initial-requirements","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"initial-requirements-block\"}\n<\/block>\n---\nuser_request:\n","keyword":"refine-initial-requirements;"},{"name":"refine-interactions","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"interactions-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-interactions;"},{"name":"refine-issue","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source_doc\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"refine-issue;"},{"name":"refine-properties","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"properties-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-properties;"},{"name":"refine-relevant-context","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"relevant-context-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-relevant-context;"},{"name":"refine-requirement-flows","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"requirement-flows-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-requirement-flows;"},{"name":"refine-security-rules","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"security-rules-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-security-rules;"},{"name":"refine-states","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"state-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-states;"},{"name":"refine-suggested-approach","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"suggested-approach-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-suggested-approach;"},{"name":"refine-title","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"title-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-title;"},{"name":"refine-ui-ux-specifications","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"ui-ux-specifications-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-ui-ux-specifications;"},{"name":"refine-user-stories","text":"{snippet name=\"question-mode\"}\nquestion_count: {argument name=\"question_count\"}\nsource: {block}\nend_goal: {argument name=\"end_goal\"}\n---\n<block>\n{snippet name=\"user-stories-block\"}\n<\/block>\n---\nuser_request:","keyword":"refine-user-stories;"},{"name":"Repos\/pew-pew-cli","text":"~\/Repos\/pew-pew-cli","keyword":";pewpew"},{"name":"requirement-flows-block","text":"## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n","keyword":"requirement-flows-block;"},{"name":"rmy repo","text":"~\/Repos\/roomy\/","keyword":";rmy"},{"name":"roadmap-template","text":"---\nname: [Fitting Title Case Name]\ndescription: [Brief description of the purpose and scope of this document]\ndoc_id: [Fitting id in regards to doc type]\ndoc_status: draft|ready|in-progress|in-review|done|released\ndoc_type: [Doc type if any]\ncreated_at: {date}\n---\n# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> üí° *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n\n## üéØ End Goal\n> üí° *What do you want to achieve?*\n\n[The single, clear, measurable outcome we want to achieve. Everything that follows must contribute to achieving this goal.]\n\n## üìù Initial Requirements\n*What should the system\/user be able to do or be?*\n\n[Specific capabilities listed as simple English sentences starting with an actor and the verb first high level requirement]\n\n- [Actor]\n    - [Verb first high level requirement]\n    - [More high level requirements if needed]\n    - [...]\n\n- [More actors if needed]\n\n- [...]\n\n## ‚û°Ô∏è Requirements Flows\n> üí° *How does a requirement unfold from start to finish?*\n\n[The sequence of actions and events that occur for a user or system to fulfill a specific requirement.]\n\n- [Verb first high level requirement]\n    - [Human or System Actor] [verb] [object or target]\n    - [More actions or events as needed]\n    - [...]\n\n- [More verb first high level requirements as needed]\n\n- [...]\n\n## üèóÔ∏è Components\n> üí° *What should exist and what does it do?*\n\n[Hierarchical breakdown from initial requirement to high-level components to atomic parts and verb-first lists of what each component should be able to do or be]\n\n- [Verb first high level requirement]\n    - [Component]\n        - [Sub-subcomponent]\n            - [Verb capability or state]\n            - [More verb capabilities or states if needed]\n            - [...]\n        - [More sub-subcomponents if needed]\n        - [...]\n\n- [More verb first high level requirements if needed]\n\n- [...]\n\n## üöÄ Checkpoints\n> üí° *Which deliverables should be released together? How do we determine their successful completion?*\n\n[Chronological breaking points with deliverables and their acceptance criteria that can be worked on in parallel, tested, and potentially released.]\n\n- [Checkpoint]\n    - [Deliverable]\n        - [Acceptance criteria]\n        - [More acceptance criteria if needed]\n        - [...]\n    - [More deliverables if needed]\n    - [...]\n\n- [More checkpoints if needed]\n\n- [...]\n","keyword":"roadmap-template;"},{"name":"Run Flutter Analyze","text":"run `flutter analyze` on the entire project","keyword":"plx-run-flutter-analyze"},{"name":"security-rules-block","text":"## üîí Security Rules\n> üí° *What are the access control rules for data and infrastructure?*\n\n[A definition of security rules, policies, and configurations for different parts of the system, such as database access, API permissions, or infrastructure settings.]\n\n- [Parent Item]\n  - [Rule or Policy]\n    - [Condition or rule, e.g., \"Allowed if auth.uid == userId\"].\n  - [More rules or policies as needed]\n  - [...]\n- [More parent items as needed]\n- [...]\n","keyword":"security-rules-block;"},{"name":"Small Tab","text":"    ","keyword":";stab"},{"name":"Snippet","text":"{snippet name=\"snippet first part\"}{clipboard}\"}","keyword":";snip"},{"name":"snippet first part","text":"{snippet name=\""},{"name":"Snippet Input","text":"{snippet name=\"snippet first part\"}{argument name=\"name\"}\"}","keyword":";snp"},{"name":"Snippet Template Variables","text":"<{clipboard}>\n{snippet name=\"snippet first part\"}{clipboard}\"}\n<\/{clipboard}>","keyword":";sss"},{"name":"Sonnet Model","text":"\/model sonnet","keyword":";ms"},{"name":"start-note-taking-mode","text":"{snippet name=\"note-taking-mode\"}\n---\nsource: {argument name=\"source\"}\nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"start-note-taking-mode;"},{"name":"start-question-mode","text":"{snippet name=\"question-mode\"}\n---\nquestion_count: {argument name=\"question_count\"}\nsource: {argument name=\"source\"} \nend_goal: {argument name=\"end_goal\"}\nuser_request:\n","keyword":"start-question-mode;"},{"name":"states-block","text":"## üö¶ States\n> üí° *What are the possible conditions or data a component can hold at any given time?*\n\n[A breakdown of a component's various states, categorized by where that state is stored or how it manifests.]\n\n- [Component]\n  - [State category e.g. UI, Memory, Local Device, Remote]\n    - [State]\n    - [More states as needed]\n    - [...]\n  - [More state categories as needed]\n  - [...]\n\n- [More components as needed]\n- [...]\n","keyword":"states-block;"},{"name":"suggested-approach-block","text":"## ‚úçÔ∏è Suggested Approach\n> üí° *How should this be implemented?*\n\n[A high-level implementation plan presented as pseudo-code or a step-by-step guide. This should be based on existing project conventions and patterns, detailing class names, objects, and structures to guide the developer. It should be adaptable into actual code.]\n\n- [Plan Phase]\n  - [Details or pseudo-code as a step]\n  - [More details, steps or pseudo-code as needed]\n  - [...]\n\n- [More phases if needed]\n- [...]\n","keyword":"suggested-approach-block;"},{"name":"supermarty","text":"~\/Repos\/supermarty","keyword":";sm"},{"name":"system-template","text":"---\n# IMPORTANT: Update the 'description' field below to match the specific system context.\ndescription: $description_max_250_chars # Update this with a concise system description\n---\n\n# üîñ Description\n> üí° *A brief description of the system and (optional) instructions on how to get started.*\n---\n\n<!-- Describe the system's purpose and provide any initial guidance for users. -->\n\n# ü§ñ AI Agent Context\n> üí° *Essential information for the AI agent to understand and execute tasks related to this system. Review all linked resources thoroughly before proceeding.*\n---\n\n## üìö Relevant Project Files & Code\n> üí° *List all project files, code snippets, or directories that the AI agent **must read and understand** to effectively utilize or modify this system. Include paths relative to the project root and a brief note on their relevance.*\n---\n*   `[path\/to\/related_script.sh]` - (Relevance: Core script that this system orchestrates)\n*   `[path\/to\/configuration_file.yaml]` - (Relevance: Configuration parameters for the system)\n*   *Example: `docs\/SYSTEM_ARCHITECTURE.md` - (Relevance: Overall architecture this system fits into)*\n\n## üåê Relevant Documentation & Links\n> üí° *List any external web pages, API documentation, design specifications, or other online resources the AI agent should consult when working with this system.*\n---\n*   `[Link to tool\/platform documentation used by the system]` - (Relevance: e.g., GitHub Actions docs)\n*   `[Link to conceptual overview of the process this system automates]` - (Relevance: Understanding the \"why\")\n*   *Example: `https:\/\/example.com\/api\/v1\/status` - (Relevance: API endpoint the system interacts with)*\n\n## üí° Other Key Information\n> üí° *Include any other critical context, specific instructions, or points the AI agent needs to be aware of. This could include previous decisions, specific constraints, or key operational considerations.*\n---\n*   `[Context point 1: e.g., This system is designed to be idempotent.]`\n*   `[Context point 2: e.g., Ensure all outputs are logged to the standard logging directory.]`\n*   *Example: The system should be run during off-peak hours to minimize impact.*\n---\n\n# üéØ Goals\n> üí° *Clear definition(s) of what this system aims to accomplish. What are the desired outcomes?*\n---\n\n- <!-- Goal 1: e.g., To streamline the process of X. -->\n- <!-- Goal 2: e.g., To ensure consistency in Y. -->\n- <!-- Add more goals as needed -->\n\n# üìè Rules\n> üí° *Guidelines, constraints, and principles to follow when creating, using, or modifying this system.*\n---\n\n- <!-- Rule 1: e.g., Treat each new system iteration as an MVP. -->\n- <!-- Rule 2: e.g., Improve only one aspect at a time. -->\n- <!-- Add more rules as needed -->\n\n# üî≠ Scope\n> üí° *Define the boundaries of this system. What is included, and what is explicitly excluded?*\n---\n\n**In Scope:**\n- <!-- e.g., Creating and maintaining system documentation. -->\n- <!-- Add more in-scope items -->\n\n**Out of Scope:**\n- <!-- e.g., Hosting or deployment of the system itself. -->\n- <!-- Add more out-of-scope items -->\n\n# ü™ú Steps\n> üí° *The heart of every system. All activities, procedures, and results in chronological order.*\n---\n\n## üìã Pre-requisites\n> üí° *What needs to be in place or understood before starting the steps? (e.g., tools, access, knowledge)*\n---\n\n- [ ] <!-- Prerequisite 1: e.g., Access to the XYZ tool. -->\n- [ ] <!-- Prerequisite 2: e.g., Understanding of ABC concept. -->\n- <!-- Add more pre-requisites as needed -->\n\n## üë£ Activity Flow\n> üí° *Detail each step involved in executing this system from start to finish.*\n---\n\n1.  **Step 1: [Action Verb + Task]**\n    - <!-- Description or sub-steps for Step 1 -->\n    - <!-- Expected result of Step 1 -->\n2.  **Step 2: [Action Verb + Task]**\n    - <!-- Description or sub-steps for Step 2 -->\n    - <!-- Expected result of Step 2 -->\n- <!-- Add more steps as needed, following the same format -->\n\n# üí° Insights\n> üí° *Observations, lessons learned, and ideas for improvement gathered while developing or using the system.*\n---\n\n- <!-- Insight 1: e.g., Noticed that Step X is often a bottleneck. -->\n- <!-- Insight 2: e.g., Users frequently ask about Y, consider adding it to the description. -->\n- <!-- Add more insights as they arise -->\n\n# üéôÔ∏è Final Remarks\n> üí° *Anything else worth mentioning that hasn't been covered? (e.g., disclaimers, acknowledgements, tips)*\n---\n\n<!-- Add any concluding thoughts, important notes, or disclaimers here. -->\n\n# üêí Example \/ Result\n> üí° *Optional: Provide a concrete example of the system in use or the expected outcome\/result after applying the system.*\n---\n\n<!--\nYou can include:\n- A brief scenario demonstrating the system's application.\n- A snippet of a completed artifact produced by the system.\n- A link to a real-world example.\n-->\n\n<!-- Example content goes here -->\n\n# üìú Changelog\n> üí° *A log of significant changes made to this system template over time.*\n---\n\n| Change        | Date       | Version | Description              | Author         |\n| ------------- | ---------- | ------- | ------------------------ | -------------- |\n| Initial draft | YYYY-MM-DD | 0.1     | Initial system template. | {author_name}  |\n| <!-- Add new changes here --> | <!-- YYYY-MM-DD --> | <!-- X.Y.Z --> | <!-- Brief description of change --> | <!-- Your Name\/Handle --> |","keyword":"system-template"},{"name":"Tab","text":"\t","keyword":";tab"},{"name":"template variable","text":"`{{ {cursor} }}`","keyword":";aa"},{"name":"title-block","text":"# [Fitting Emoji] [Doc Type]: [Descriptive Title]\n> üí° *[Descriptive subtitle]*\n\n[Brief description of the problems we are going to solve, why we are going to solve them and how we plan to do it.]\n","keyword":"title-block;"},{"name":"Today","text":"Today is {date}.","keyword":";today"},{"name":"today-is-date","text":"Today is {date}.\n","keyword":"today-is-date;"},{"name":"TS Timestamp Date","text":"{date format=\"YYYYMMdd\"}","keyword":";tsdate"},{"name":"TS Timestamp Date Time","text":"{date format=\"YYYYMMdd-HHmmss\"}","keyword":";tsdatetime"},{"name":"TS Timestamp Time","text":"{date format=\"HHmmss\"}","keyword":";tstime"},{"name":"user-stories-block","text":"## üë§ User Stories\n> üí° *Who needs what, and why?*\n\n[User-centric descriptions of a feature from an end-user's perspective, following a standard \"As a <role>, I want <goal> so that <benefit>\" format.]\n\n- [User Type]\n  - I want [Desired Goal] so that [Benefit].\n  - [More user stories for this user type if needed]\n  - [...]\n\n- [More user types if needed]\n- [...]\n","keyword":"user-stories-block;"},{"name":"var","text":"`{{ {argument name=\"var\"} }}`","keyword":";var"},{"name":"var clipboard","text":"`{{ {clipboard} }}`","keyword":";varcb"},{"name":"var cursor","text":"`{{ {cursor} }}`","keyword":";varcursor"},{"name":"warp claude","text":"warp && claude","keyword":";claude"},{"name":"With Relevant Context","text":"{argument name=\"input\"}\n\n<relevant_context>\n{argument name=\"relevant_context\"}\n<\/relevant_context>","keyword":";rc"},{"name":"yaml schema fields","text":"  type: string\n  formats:\n  required: true|false|{condition}\n  description:\n  instructions:\n  notes:\n  example:\n  enums:\n    - \n  type-ref: [[]]"},{"name":"yaml template variables","text":"```yaml template variables - remove this section after implementation\n{cursor}\n```","keyword":";vars"},{"name":"{{{cursor}.camelCase()}}","text":"{{{cursor}.camelCase()}}","keyword":";brcc"},{"name":"{{{cursor}.dotCase()}}","text":"{{{cursor}.dotCase()}}","keyword":";brdc"},{"name":"{{{cursor}.snakeCase()}}","text":"{{{cursor}.snakeCase()}}","keyword":";brsc"},{"name":"{{{cursor}.upperCase()}}","text":"{{{cursor}.upperCase()}}","keyword":";bruc"},{"name":"{{{cursor}}}","text":"{{{cursor}}}","keyword":";brick"},{"name":"~\/.claude","text":"~\/.claude","keyword":";cdclaude"},{"name":"~\/.cursor\/","text":"~\/.cursor\/","keyword":";cursor"},{"name":"~\/fe","text":"~\/Documents\/repos\/clients\/mario\/friday-energy\/flutter","keyword":";fe"},{"name":"~\/Repos\/bwai\/","text":"~\/Repos\/bwai\/","keyword":"bwai;"},{"name":"¬∑","text":"¬∑","keyword":";dot"},{"name":"‚Äú","text":"‚Äú{cursor}‚Äú","keyword":";quote"},{"name":"üèóÔ∏è [PLX] Pew Pew Plx Title","text":"# üèóÔ∏è [PLX] Pew Pew Plx","keyword":";plxtitle"},{"name":"üëΩüí¨ AI Speech Bubble","text":"> üëΩüí¨ AI Speech Bubble\n> -\n> ai-chat-009.png\n> ai-chat-claude-006\n> ai-chat-google-014\n> ai-chat-openai-009\n> > [  ]","keyword":";as"},{"name":"üëΩüí≠ AI Thought Bubble","text":"> üëΩüí≠ AI Thought Bubble\n> -\n> ai-chat-009.png\n> ai-chat-claude-006\n> ai-chat-google-014\n> ai-chat-openai-009\n> > [  ]","keyword":";at"},{"name":"ü•∑üí¨ Brian Speech Bubble","text":"> ü•∑üí¨ Brian Speech Bubble\n> -\n> brian-chat-040.png\n> brian-point-right-009\n> > ","keyword":";bs"},{"name":"ü•∑üí≠ Brian Thought Bubble","text":"> ü•∑üí≠ Brian Thought Bubble\n> -\n> brian-chat-040.png\n> brian-point-right-009\n> > ","keyword":";bt"}]