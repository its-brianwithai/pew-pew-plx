---
alwaysApply: true
---
### Project structure guide

- **Core entry points**
  - `bin/plx.js`: CLI entry. See [bin/plx.js](mdc:bin/plx.js)
  - `lib/init.js`: library initialization. See [lib/init.js](mdc:lib/init.js)
  - `Makefile`: automation tasks. See [Makefile](mdc:Makefile)

- **Knowledge and content**
  - `agents/`: personas and task-specific agents. See [agents/](mdc:agents)
  - `prompts/`: reusable prompt files. See [prompts/](mdc:prompts)
  - `templates/`: blocks, outputs, and context templates. See [templates/](mdc:templates)
  - `instructions/`: conventions, best practices, and rules. See [instructions/](mdc:instructions)
  - `workflows/`: end-to-end flows. See [workflows/](mdc:workflows)
  - `issues/`: structured issue content. See [issues/](mdc:issues)

- **Not synced (source-only)**
  - `context/`: project knowledge and references. See [context/](mdc:context)
  - `drafts/`: work in progress. See [drafts/](mdc:drafts)
  - `feedback/`: framework feedback. See [feedback/](mdc:feedback)
  - `issues/`: issue management. See [issues/](mdc:issues)

- **Sync behavior**
  - Wikilinks `[[ref]]` resolve to `@path` and `![[embed]]` inlines content during sync (see README)

- **Root guides**
  - [README.md](mdc:README.md)
  - [package.json](mdc:package.json)

- **Navigation hints**
  - Prefer `templates/blocks/` when composing structured documents from blocks
  - Prefer `templates/outputs/` when generating final artifacts
  - Prefer `prompts/` when invoking a specific creation/update action

